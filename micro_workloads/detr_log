def @main(%input0: Tensor[(32, 3, 224, 224), float16] /* ty=Tensor[(32, 3, 224, 224), float16] span=/Split.inputs:0:0 */, %input1: Tensor[(32, 7, 7), float32] /* ty=Tensor[(32, 7, 7), float32] span=/Unsqueeze.input1:0:0 */) -> (Tensor[(32, 100, 92), float16], Tensor[(32, 100, 4), float16]) {
  %547 = fn (%p0213: Tensor[(32, 3, 224, 224), float16] /* ty=Tensor[(32, 3, 224, 224), float16] */, Primitive=1) -> Tensor[(32, 224, 224, 3), float16] {
    layout_transform(%p0213, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(32, 224, 224, 3), float16] */
  } /* ty=fn (Tensor[(32, 3, 224, 224), float16]) -> Tensor[(32, 224, 224, 3), float16] */;
  %550 = %547(%input0) /* ty=Tensor[(32, 224, 224, 3), float16] */;
  %551 = fn (%p0211: Tensor[(32, 224, 224, 3), float16] /* ty=Tensor[(32, 224, 224, 3), float16] */, %p1168: Tensor[(64, 7, 7, 3), float16] /* ty=Tensor[(64, 7, 7, 3), float16] */, %p284: Tensor[(1, 1, 1, 64), float16] /* ty=Tensor[(1, 1, 1, 64), float16] */, %p363: Tensor[(1, 1, 1, 64), float16] /* ty=Tensor[(1, 1, 1, 64), float16] */, Primitive=1) -> Tensor[(32, 112, 112, 64), float16] {
    %413 = nn.conv2d(%p0211, %p1168, strides=[2, 2], padding=[3, 3, 3, 3], channels=64, kernel_size=[7, 7], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 112, 112, 64), float16] */;
    %414 = multiply(%413, %p284) /* ty=Tensor[(32, 112, 112, 64), float16] */;
    %415 = add(%414, %p363) /* ty=Tensor[(32, 112, 112, 64), float16] */;
    nn.relu(%415) /* ty=Tensor[(32, 112, 112, 64), float16] */
  } /* ty=fn (Tensor[(32, 224, 224, 3), float16], Tensor[(64, 7, 7, 3), float16], Tensor[(1, 1, 1, 64), float16], Tensor[(1, 1, 1, 64), float16]) -> Tensor[(32, 112, 112, 64), float16] */;
  %552 = %551(%550, meta[relay.Constant][1] /* ty=Tensor[(64, 7, 7, 3), float16] */, meta[relay.Constant][2] /* ty=Tensor[(1, 1, 1, 64), float16] */, meta[relay.Constant][3] /* ty=Tensor[(1, 1, 1, 64), float16] */) /* ty=Tensor[(32, 112, 112, 64), float16] */;
  %553 = fn (%p0210: Tensor[(32, 112, 112, 64), float16] /* ty=Tensor[(32, 112, 112, 64), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 64), float16] {
    nn.max_pool2d(%p0210, pool_size=[3, 3], strides=[2, 2], padding=[1, 1, 1, 1], layout="NHWC") /* ty=Tensor[(32, 56, 56, 64), float16] */
  } /* ty=fn (Tensor[(32, 112, 112, 64), float16]) -> Tensor[(32, 56, 56, 64), float16] */;
  %554 = %553(%552) /* ty=Tensor[(32, 56, 56, 64), float16] */;
  %555 = fn (%p0209: Tensor[(32, 56, 56, 64), float16] /* ty=Tensor[(32, 56, 56, 64), float16] */, %p1167: Tensor[(64, 1, 1, 64), float16] /* ty=Tensor[(64, 1, 1, 64), float16] */, %p283: Tensor[(1, 1, 1, 64), float16] /* ty=Tensor[(1, 1, 1, 64), float16] */, %p362: Tensor[(1, 1, 1, 64), float16] /* ty=Tensor[(1, 1, 1, 64), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 64), float16] {
    %410 = nn.conv2d(%p0209, %p1167, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 56, 56, 64), float16] */;
    %411 = multiply(%410, %p283) /* ty=Tensor[(32, 56, 56, 64), float16] */;
    %412 = add(%411, %p362) /* ty=Tensor[(32, 56, 56, 64), float16] */;
    nn.relu(%412) /* ty=Tensor[(32, 56, 56, 64), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 64), float16], Tensor[(64, 1, 1, 64), float16], Tensor[(1, 1, 1, 64), float16], Tensor[(1, 1, 1, 64), float16]) -> Tensor[(32, 56, 56, 64), float16] */;
  %556 = %555(%554, meta[relay.Constant][4] /* ty=Tensor[(64, 1, 1, 64), float16] */, meta[relay.Constant][5] /* ty=Tensor[(1, 1, 1, 64), float16] */, meta[relay.Constant][6] /* ty=Tensor[(1, 1, 1, 64), float16] */) /* ty=Tensor[(32, 56, 56, 64), float16] */;
  %557 = fn (%p0208: Tensor[(32, 56, 56, 64), float16] /* ty=Tensor[(32, 56, 56, 64), float16] */, %p1166: Tensor[(64, 3, 3, 64), float16] /* ty=Tensor[(64, 3, 3, 64), float16] */, %p282: Tensor[(1, 1, 1, 64), float16] /* ty=Tensor[(1, 1, 1, 64), float16] */, %p361: Tensor[(1, 1, 1, 64), float16] /* ty=Tensor[(1, 1, 1, 64), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 64), float16] {
    %407 = nn.conv2d(%p0208, %p1166, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 56, 56, 64), float16] */;
    %408 = multiply(%407, %p282) /* ty=Tensor[(32, 56, 56, 64), float16] */;
    %409 = add(%408, %p361) /* ty=Tensor[(32, 56, 56, 64), float16] */;
    nn.relu(%409) /* ty=Tensor[(32, 56, 56, 64), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 64), float16], Tensor[(64, 3, 3, 64), float16], Tensor[(1, 1, 1, 64), float16], Tensor[(1, 1, 1, 64), float16]) -> Tensor[(32, 56, 56, 64), float16] */;
  %560 = fn (%p0214: Tensor[(32, 56, 56, 64), float16] /* ty=Tensor[(32, 56, 56, 64), float16] */, %p1171: Tensor[(256, 1, 1, 64), float16] /* ty=Tensor[(256, 1, 1, 64), float16] */, %p287: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, %p365: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 256), float16] {
    %558 = nn.conv2d(%p0214, %p1171, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 56, 56, 256), float16] */;
    %559 = multiply(%558, %p287) /* ty=Tensor[(32, 56, 56, 256), float16] */;
    add(%559, %p365) /* ty=Tensor[(32, 56, 56, 256), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 64), float16], Tensor[(256, 1, 1, 64), float16], Tensor[(1, 1, 1, 256), float16], Tensor[(1, 1, 1, 256), float16]) -> Tensor[(32, 56, 56, 256), float16] */;
  %561 = %557(%556, meta[relay.Constant][7] /* ty=Tensor[(64, 3, 3, 64), float16] */, meta[relay.Constant][8] /* ty=Tensor[(1, 1, 1, 64), float16] */, meta[relay.Constant][9] /* ty=Tensor[(1, 1, 1, 64), float16] */) /* ty=Tensor[(32, 56, 56, 64), float16] */;
  %562 = %560(%554, meta[relay.Constant][13] /* ty=Tensor[(256, 1, 1, 64), float16] */, meta[relay.Constant][14] /* ty=Tensor[(1, 1, 1, 256), float16] */, meta[relay.Constant][15] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(32, 56, 56, 256), float16] */;
  %563 = fn (%p0207: Tensor[(32, 56, 56, 64), float16] /* ty=Tensor[(32, 56, 56, 64), float16] */, %p1165: Tensor[(256, 1, 1, 64), float16] /* ty=Tensor[(256, 1, 1, 64), float16] */, %p281: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, %p360: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, %p416: Tensor[(32, 56, 56, 256), float16] /* ty=Tensor[(32, 56, 56, 256), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 256), float16] {
    %403 = nn.conv2d(%p0207, %p1165, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 56, 56, 256), float16] */;
    %404 = multiply(%403, %p281) /* ty=Tensor[(32, 56, 56, 256), float16] */;
    %405 = add(%404, %p360) /* ty=Tensor[(32, 56, 56, 256), float16] */;
    %406 = add(%405, %p416) /* ty=Tensor[(32, 56, 56, 256), float16] */;
    nn.relu(%406) /* ty=Tensor[(32, 56, 56, 256), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 64), float16], Tensor[(256, 1, 1, 64), float16], Tensor[(1, 1, 1, 256), float16], Tensor[(1, 1, 1, 256), float16], Tensor[(32, 56, 56, 256), float16]) -> Tensor[(32, 56, 56, 256), float16] */;
  %564 = %563(%561, meta[relay.Constant][10] /* ty=Tensor[(256, 1, 1, 64), float16] */, meta[relay.Constant][11] /* ty=Tensor[(1, 1, 1, 256), float16] */, meta[relay.Constant][12] /* ty=Tensor[(1, 1, 1, 256), float16] */, %562) /* ty=Tensor[(32, 56, 56, 256), float16] */;
  %565 = fn (%p0206: Tensor[(32, 56, 56, 256), float16] /* ty=Tensor[(32, 56, 56, 256), float16] */, %p1164: Tensor[(64, 1, 1, 256), float16] /* ty=Tensor[(64, 1, 1, 256), float16] */, %p280: Tensor[(1, 1, 1, 64), float16] /* ty=Tensor[(1, 1, 1, 64), float16] */, %p359: Tensor[(1, 1, 1, 64), float16] /* ty=Tensor[(1, 1, 1, 64), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 64), float16] {
    %400 = nn.conv2d(%p0206, %p1164, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 56, 56, 64), float16] */;
    %401 = multiply(%400, %p280) /* ty=Tensor[(32, 56, 56, 64), float16] */;
    %402 = add(%401, %p359) /* ty=Tensor[(32, 56, 56, 64), float16] */;
    nn.relu(%402) /* ty=Tensor[(32, 56, 56, 64), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 256), float16], Tensor[(64, 1, 1, 256), float16], Tensor[(1, 1, 1, 64), float16], Tensor[(1, 1, 1, 64), float16]) -> Tensor[(32, 56, 56, 64), float16] */;
  %566 = %565(%564, meta[relay.Constant][16] /* ty=Tensor[(64, 1, 1, 256), float16] */, meta[relay.Constant][17] /* ty=Tensor[(1, 1, 1, 64), float16] */, meta[relay.Constant][18] /* ty=Tensor[(1, 1, 1, 64), float16] */) /* ty=Tensor[(32, 56, 56, 64), float16] */;
  %567 = fn (%p0205: Tensor[(32, 56, 56, 64), float16] /* ty=Tensor[(32, 56, 56, 64), float16] */, %p1163: Tensor[(64, 3, 3, 64), float16] /* ty=Tensor[(64, 3, 3, 64), float16] */, %p279: Tensor[(1, 1, 1, 64), float16] /* ty=Tensor[(1, 1, 1, 64), float16] */, %p358: Tensor[(1, 1, 1, 64), float16] /* ty=Tensor[(1, 1, 1, 64), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 64), float16] {
    %397 = nn.conv2d(%p0205, %p1163, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 56, 56, 64), float16] */;
    %398 = multiply(%397, %p279) /* ty=Tensor[(32, 56, 56, 64), float16] */;
    %399 = add(%398, %p358) /* ty=Tensor[(32, 56, 56, 64), float16] */;
    nn.relu(%399) /* ty=Tensor[(32, 56, 56, 64), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 64), float16], Tensor[(64, 3, 3, 64), float16], Tensor[(1, 1, 1, 64), float16], Tensor[(1, 1, 1, 64), float16]) -> Tensor[(32, 56, 56, 64), float16] */;
  %568 = %567(%566, meta[relay.Constant][19] /* ty=Tensor[(64, 3, 3, 64), float16] */, meta[relay.Constant][20] /* ty=Tensor[(1, 1, 1, 64), float16] */, meta[relay.Constant][21] /* ty=Tensor[(1, 1, 1, 64), float16] */) /* ty=Tensor[(32, 56, 56, 64), float16] */;
  %569 = fn (%p0204: Tensor[(32, 56, 56, 64), float16] /* ty=Tensor[(32, 56, 56, 64), float16] */, %p1162: Tensor[(256, 1, 1, 64), float16] /* ty=Tensor[(256, 1, 1, 64), float16] */, %p278: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, %p357: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, %p415: Tensor[(32, 56, 56, 256), float16] /* ty=Tensor[(32, 56, 56, 256), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 256), float16] {
    %393 = nn.conv2d(%p0204, %p1162, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 56, 56, 256), float16] */;
    %394 = multiply(%393, %p278) /* ty=Tensor[(32, 56, 56, 256), float16] */;
    %395 = add(%394, %p357) /* ty=Tensor[(32, 56, 56, 256), float16] */;
    %396 = add(%395, %p415) /* ty=Tensor[(32, 56, 56, 256), float16] */;
    nn.relu(%396) /* ty=Tensor[(32, 56, 56, 256), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 64), float16], Tensor[(256, 1, 1, 64), float16], Tensor[(1, 1, 1, 256), float16], Tensor[(1, 1, 1, 256), float16], Tensor[(32, 56, 56, 256), float16]) -> Tensor[(32, 56, 56, 256), float16] */;
  %570 = %569(%568, meta[relay.Constant][22] /* ty=Tensor[(256, 1, 1, 64), float16] */, meta[relay.Constant][23] /* ty=Tensor[(1, 1, 1, 256), float16] */, meta[relay.Constant][24] /* ty=Tensor[(1, 1, 1, 256), float16] */, %564) /* ty=Tensor[(32, 56, 56, 256), float16] */;
  %571 = fn (%p0203: Tensor[(32, 56, 56, 256), float16] /* ty=Tensor[(32, 56, 56, 256), float16] */, %p1161: Tensor[(64, 1, 1, 256), float16] /* ty=Tensor[(64, 1, 1, 256), float16] */, %p277: Tensor[(1, 1, 1, 64), float16] /* ty=Tensor[(1, 1, 1, 64), float16] */, %p356: Tensor[(1, 1, 1, 64), float16] /* ty=Tensor[(1, 1, 1, 64), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 64), float16] {
    %390 = nn.conv2d(%p0203, %p1161, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 56, 56, 64), float16] */;
    %391 = multiply(%390, %p277) /* ty=Tensor[(32, 56, 56, 64), float16] */;
    %392 = add(%391, %p356) /* ty=Tensor[(32, 56, 56, 64), float16] */;
    nn.relu(%392) /* ty=Tensor[(32, 56, 56, 64), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 256), float16], Tensor[(64, 1, 1, 256), float16], Tensor[(1, 1, 1, 64), float16], Tensor[(1, 1, 1, 64), float16]) -> Tensor[(32, 56, 56, 64), float16] */;
  %572 = %571(%570, meta[relay.Constant][25] /* ty=Tensor[(64, 1, 1, 256), float16] */, meta[relay.Constant][26] /* ty=Tensor[(1, 1, 1, 64), float16] */, meta[relay.Constant][27] /* ty=Tensor[(1, 1, 1, 64), float16] */) /* ty=Tensor[(32, 56, 56, 64), float16] */;
  %573 = fn (%p0202: Tensor[(32, 56, 56, 64), float16] /* ty=Tensor[(32, 56, 56, 64), float16] */, %p1160: Tensor[(64, 3, 3, 64), float16] /* ty=Tensor[(64, 3, 3, 64), float16] */, %p276: Tensor[(1, 1, 1, 64), float16] /* ty=Tensor[(1, 1, 1, 64), float16] */, %p355: Tensor[(1, 1, 1, 64), float16] /* ty=Tensor[(1, 1, 1, 64), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 64), float16] {
    %387 = nn.conv2d(%p0202, %p1160, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 56, 56, 64), float16] */;
    %388 = multiply(%387, %p276) /* ty=Tensor[(32, 56, 56, 64), float16] */;
    %389 = add(%388, %p355) /* ty=Tensor[(32, 56, 56, 64), float16] */;
    nn.relu(%389) /* ty=Tensor[(32, 56, 56, 64), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 64), float16], Tensor[(64, 3, 3, 64), float16], Tensor[(1, 1, 1, 64), float16], Tensor[(1, 1, 1, 64), float16]) -> Tensor[(32, 56, 56, 64), float16] */;
  %574 = %573(%572, meta[relay.Constant][28] /* ty=Tensor[(64, 3, 3, 64), float16] */, meta[relay.Constant][29] /* ty=Tensor[(1, 1, 1, 64), float16] */, meta[relay.Constant][30] /* ty=Tensor[(1, 1, 1, 64), float16] */) /* ty=Tensor[(32, 56, 56, 64), float16] */;
  %575 = fn (%p0201: Tensor[(32, 56, 56, 64), float16] /* ty=Tensor[(32, 56, 56, 64), float16] */, %p1159: Tensor[(256, 1, 1, 64), float16] /* ty=Tensor[(256, 1, 1, 64), float16] */, %p275: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, %p354: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, %p414: Tensor[(32, 56, 56, 256), float16] /* ty=Tensor[(32, 56, 56, 256), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 256), float16] {
    %383 = nn.conv2d(%p0201, %p1159, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 56, 56, 256), float16] */;
    %384 = multiply(%383, %p275) /* ty=Tensor[(32, 56, 56, 256), float16] */;
    %385 = add(%384, %p354) /* ty=Tensor[(32, 56, 56, 256), float16] */;
    %386 = add(%385, %p414) /* ty=Tensor[(32, 56, 56, 256), float16] */;
    nn.relu(%386) /* ty=Tensor[(32, 56, 56, 256), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 64), float16], Tensor[(256, 1, 1, 64), float16], Tensor[(1, 1, 1, 256), float16], Tensor[(1, 1, 1, 256), float16], Tensor[(32, 56, 56, 256), float16]) -> Tensor[(32, 56, 56, 256), float16] */;
  %576 = %575(%574, meta[relay.Constant][31] /* ty=Tensor[(256, 1, 1, 64), float16] */, meta[relay.Constant][32] /* ty=Tensor[(1, 1, 1, 256), float16] */, meta[relay.Constant][33] /* ty=Tensor[(1, 1, 1, 256), float16] */, %570) /* ty=Tensor[(32, 56, 56, 256), float16] */;
  %577 = fn (%p0200: Tensor[(32, 56, 56, 256), float16] /* ty=Tensor[(32, 56, 56, 256), float16] */, %p1158: Tensor[(128, 1, 1, 256), float16] /* ty=Tensor[(128, 1, 1, 256), float16] */, %p274: Tensor[(1, 1, 1, 128), float16] /* ty=Tensor[(1, 1, 1, 128), float16] */, %p353: Tensor[(1, 1, 1, 128), float16] /* ty=Tensor[(1, 1, 1, 128), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 128), float16] {
    %380 = nn.conv2d(%p0200, %p1158, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 56, 56, 128), float16] */;
    %381 = multiply(%380, %p274) /* ty=Tensor[(32, 56, 56, 128), float16] */;
    %382 = add(%381, %p353) /* ty=Tensor[(32, 56, 56, 128), float16] */;
    nn.relu(%382) /* ty=Tensor[(32, 56, 56, 128), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 256), float16], Tensor[(128, 1, 1, 256), float16], Tensor[(1, 1, 1, 128), float16], Tensor[(1, 1, 1, 128), float16]) -> Tensor[(32, 56, 56, 128), float16] */;
  %578 = %577(%576, meta[relay.Constant][34] /* ty=Tensor[(128, 1, 1, 256), float16] */, meta[relay.Constant][35] /* ty=Tensor[(1, 1, 1, 128), float16] */, meta[relay.Constant][36] /* ty=Tensor[(1, 1, 1, 128), float16] */) /* ty=Tensor[(32, 56, 56, 128), float16] */;
  %579 = fn (%p0199: Tensor[(32, 56, 56, 128), float16] /* ty=Tensor[(32, 56, 56, 128), float16] */, %p1157: Tensor[(128, 3, 3, 128), float16] /* ty=Tensor[(128, 3, 3, 128), float16] */, %p273: Tensor[(1, 1, 1, 128), float16] /* ty=Tensor[(1, 1, 1, 128), float16] */, %p352: Tensor[(1, 1, 1, 128), float16] /* ty=Tensor[(1, 1, 1, 128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 128), float16] {
    %377 = nn.conv2d(%p0199, %p1157, strides=[2, 2], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %378 = multiply(%377, %p273) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %379 = add(%378, %p352) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    nn.relu(%379) /* ty=Tensor[(32, 28, 28, 128), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 128), float16], Tensor[(128, 3, 3, 128), float16], Tensor[(1, 1, 1, 128), float16], Tensor[(1, 1, 1, 128), float16]) -> Tensor[(32, 28, 28, 128), float16] */;
  %582 = fn (%p0215: Tensor[(32, 56, 56, 256), float16] /* ty=Tensor[(32, 56, 56, 256), float16] */, %p1172: Tensor[(512, 1, 1, 256), float16] /* ty=Tensor[(512, 1, 1, 256), float16] */, %p288: Tensor[(1, 1, 1, 512), float16] /* ty=Tensor[(1, 1, 1, 512), float16] */, %p366: Tensor[(1, 1, 1, 512), float16] /* ty=Tensor[(1, 1, 1, 512), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 512), float16] {
    %580 = nn.conv2d(%p0215, %p1172, strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 512), float16] */;
    %581 = multiply(%580, %p288) /* ty=Tensor[(32, 28, 28, 512), float16] */;
    add(%581, %p366) /* ty=Tensor[(32, 28, 28, 512), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 256), float16], Tensor[(512, 1, 1, 256), float16], Tensor[(1, 1, 1, 512), float16], Tensor[(1, 1, 1, 512), float16]) -> Tensor[(32, 28, 28, 512), float16] */;
  %583 = %579(%578, meta[relay.Constant][37] /* ty=Tensor[(128, 3, 3, 128), float16] */, meta[relay.Constant][38] /* ty=Tensor[(1, 1, 1, 128), float16] */, meta[relay.Constant][39] /* ty=Tensor[(1, 1, 1, 128), float16] */) /* ty=Tensor[(32, 28, 28, 128), float16] */;
  %584 = %582(%576, meta[relay.Constant][43] /* ty=Tensor[(512, 1, 1, 256), float16] */, meta[relay.Constant][44] /* ty=Tensor[(1, 1, 1, 512), float16] */, meta[relay.Constant][45] /* ty=Tensor[(1, 1, 1, 512), float16] */) /* ty=Tensor[(32, 28, 28, 512), float16] */;
  %585 = fn (%p0198: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p1156: Tensor[(512, 1, 1, 128), float16] /* ty=Tensor[(512, 1, 1, 128), float16] */, %p272: Tensor[(1, 1, 1, 512), float16] /* ty=Tensor[(1, 1, 1, 512), float16] */, %p351: Tensor[(1, 1, 1, 512), float16] /* ty=Tensor[(1, 1, 1, 512), float16] */, %p413: Tensor[(32, 28, 28, 512), float16] /* ty=Tensor[(32, 28, 28, 512), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 512), float16] {
    %373 = nn.conv2d(%p0198, %p1156, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 512), float16] */;
    %374 = multiply(%373, %p272) /* ty=Tensor[(32, 28, 28, 512), float16] */;
    %375 = add(%374, %p351) /* ty=Tensor[(32, 28, 28, 512), float16] */;
    %376 = add(%375, %p413) /* ty=Tensor[(32, 28, 28, 512), float16] */;
    nn.relu(%376) /* ty=Tensor[(32, 28, 28, 512), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(512, 1, 1, 128), float16], Tensor[(1, 1, 1, 512), float16], Tensor[(1, 1, 1, 512), float16], Tensor[(32, 28, 28, 512), float16]) -> Tensor[(32, 28, 28, 512), float16] */;
  %586 = %585(%583, meta[relay.Constant][40] /* ty=Tensor[(512, 1, 1, 128), float16] */, meta[relay.Constant][41] /* ty=Tensor[(1, 1, 1, 512), float16] */, meta[relay.Constant][42] /* ty=Tensor[(1, 1, 1, 512), float16] */, %584) /* ty=Tensor[(32, 28, 28, 512), float16] */;
  %587 = fn (%p0197: Tensor[(32, 28, 28, 512), float16] /* ty=Tensor[(32, 28, 28, 512), float16] */, %p1155: Tensor[(128, 1, 1, 512), float16] /* ty=Tensor[(128, 1, 1, 512), float16] */, %p271: Tensor[(1, 1, 1, 128), float16] /* ty=Tensor[(1, 1, 1, 128), float16] */, %p350: Tensor[(1, 1, 1, 128), float16] /* ty=Tensor[(1, 1, 1, 128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 128), float16] {
    %370 = nn.conv2d(%p0197, %p1155, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %371 = multiply(%370, %p271) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %372 = add(%371, %p350) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    nn.relu(%372) /* ty=Tensor[(32, 28, 28, 128), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 512), float16], Tensor[(128, 1, 1, 512), float16], Tensor[(1, 1, 1, 128), float16], Tensor[(1, 1, 1, 128), float16]) -> Tensor[(32, 28, 28, 128), float16] */;
  %588 = %587(%586, meta[relay.Constant][46] /* ty=Tensor[(128, 1, 1, 512), float16] */, meta[relay.Constant][47] /* ty=Tensor[(1, 1, 1, 128), float16] */, meta[relay.Constant][48] /* ty=Tensor[(1, 1, 1, 128), float16] */) /* ty=Tensor[(32, 28, 28, 128), float16] */;
  %589 = fn (%p0196: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p1154: Tensor[(128, 3, 3, 128), float16] /* ty=Tensor[(128, 3, 3, 128), float16] */, %p270: Tensor[(1, 1, 1, 128), float16] /* ty=Tensor[(1, 1, 1, 128), float16] */, %p349: Tensor[(1, 1, 1, 128), float16] /* ty=Tensor[(1, 1, 1, 128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 128), float16] {
    %367 = nn.conv2d(%p0196, %p1154, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %368 = multiply(%367, %p270) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %369 = add(%368, %p349) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    nn.relu(%369) /* ty=Tensor[(32, 28, 28, 128), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(128, 3, 3, 128), float16], Tensor[(1, 1, 1, 128), float16], Tensor[(1, 1, 1, 128), float16]) -> Tensor[(32, 28, 28, 128), float16] */;
  %590 = %589(%588, meta[relay.Constant][49] /* ty=Tensor[(128, 3, 3, 128), float16] */, meta[relay.Constant][50] /* ty=Tensor[(1, 1, 1, 128), float16] */, meta[relay.Constant][51] /* ty=Tensor[(1, 1, 1, 128), float16] */) /* ty=Tensor[(32, 28, 28, 128), float16] */;
  %591 = fn (%p0195: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p1153: Tensor[(512, 1, 1, 128), float16] /* ty=Tensor[(512, 1, 1, 128), float16] */, %p269: Tensor[(1, 1, 1, 512), float16] /* ty=Tensor[(1, 1, 1, 512), float16] */, %p348: Tensor[(1, 1, 1, 512), float16] /* ty=Tensor[(1, 1, 1, 512), float16] */, %p412: Tensor[(32, 28, 28, 512), float16] /* ty=Tensor[(32, 28, 28, 512), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 512), float16] {
    %363 = nn.conv2d(%p0195, %p1153, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 512), float16] */;
    %364 = multiply(%363, %p269) /* ty=Tensor[(32, 28, 28, 512), float16] */;
    %365 = add(%364, %p348) /* ty=Tensor[(32, 28, 28, 512), float16] */;
    %366 = add(%365, %p412) /* ty=Tensor[(32, 28, 28, 512), float16] */;
    nn.relu(%366) /* ty=Tensor[(32, 28, 28, 512), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(512, 1, 1, 128), float16], Tensor[(1, 1, 1, 512), float16], Tensor[(1, 1, 1, 512), float16], Tensor[(32, 28, 28, 512), float16]) -> Tensor[(32, 28, 28, 512), float16] */;
  %592 = %591(%590, meta[relay.Constant][52] /* ty=Tensor[(512, 1, 1, 128), float16] */, meta[relay.Constant][53] /* ty=Tensor[(1, 1, 1, 512), float16] */, meta[relay.Constant][54] /* ty=Tensor[(1, 1, 1, 512), float16] */, %586) /* ty=Tensor[(32, 28, 28, 512), float16] */;
  %593 = fn (%p0194: Tensor[(32, 28, 28, 512), float16] /* ty=Tensor[(32, 28, 28, 512), float16] */, %p1152: Tensor[(128, 1, 1, 512), float16] /* ty=Tensor[(128, 1, 1, 512), float16] */, %p268: Tensor[(1, 1, 1, 128), float16] /* ty=Tensor[(1, 1, 1, 128), float16] */, %p347: Tensor[(1, 1, 1, 128), float16] /* ty=Tensor[(1, 1, 1, 128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 128), float16] {
    %360 = nn.conv2d(%p0194, %p1152, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %361 = multiply(%360, %p268) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %362 = add(%361, %p347) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    nn.relu(%362) /* ty=Tensor[(32, 28, 28, 128), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 512), float16], Tensor[(128, 1, 1, 512), float16], Tensor[(1, 1, 1, 128), float16], Tensor[(1, 1, 1, 128), float16]) -> Tensor[(32, 28, 28, 128), float16] */;
  %594 = %593(%592, meta[relay.Constant][55] /* ty=Tensor[(128, 1, 1, 512), float16] */, meta[relay.Constant][56] /* ty=Tensor[(1, 1, 1, 128), float16] */, meta[relay.Constant][57] /* ty=Tensor[(1, 1, 1, 128), float16] */) /* ty=Tensor[(32, 28, 28, 128), float16] */;
  %595 = fn (%p0193: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p1151: Tensor[(128, 3, 3, 128), float16] /* ty=Tensor[(128, 3, 3, 128), float16] */, %p267: Tensor[(1, 1, 1, 128), float16] /* ty=Tensor[(1, 1, 1, 128), float16] */, %p346: Tensor[(1, 1, 1, 128), float16] /* ty=Tensor[(1, 1, 1, 128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 128), float16] {
    %357 = nn.conv2d(%p0193, %p1151, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %358 = multiply(%357, %p267) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %359 = add(%358, %p346) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    nn.relu(%359) /* ty=Tensor[(32, 28, 28, 128), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(128, 3, 3, 128), float16], Tensor[(1, 1, 1, 128), float16], Tensor[(1, 1, 1, 128), float16]) -> Tensor[(32, 28, 28, 128), float16] */;
  %596 = %595(%594, meta[relay.Constant][58] /* ty=Tensor[(128, 3, 3, 128), float16] */, meta[relay.Constant][59] /* ty=Tensor[(1, 1, 1, 128), float16] */, meta[relay.Constant][60] /* ty=Tensor[(1, 1, 1, 128), float16] */) /* ty=Tensor[(32, 28, 28, 128), float16] */;
  %597 = fn (%p0192: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p1150: Tensor[(512, 1, 1, 128), float16] /* ty=Tensor[(512, 1, 1, 128), float16] */, %p266: Tensor[(1, 1, 1, 512), float16] /* ty=Tensor[(1, 1, 1, 512), float16] */, %p345: Tensor[(1, 1, 1, 512), float16] /* ty=Tensor[(1, 1, 1, 512), float16] */, %p411: Tensor[(32, 28, 28, 512), float16] /* ty=Tensor[(32, 28, 28, 512), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 512), float16] {
    %353 = nn.conv2d(%p0192, %p1150, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 512), float16] */;
    %354 = multiply(%353, %p266) /* ty=Tensor[(32, 28, 28, 512), float16] */;
    %355 = add(%354, %p345) /* ty=Tensor[(32, 28, 28, 512), float16] */;
    %356 = add(%355, %p411) /* ty=Tensor[(32, 28, 28, 512), float16] */;
    nn.relu(%356) /* ty=Tensor[(32, 28, 28, 512), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(512, 1, 1, 128), float16], Tensor[(1, 1, 1, 512), float16], Tensor[(1, 1, 1, 512), float16], Tensor[(32, 28, 28, 512), float16]) -> Tensor[(32, 28, 28, 512), float16] */;
  %598 = %597(%596, meta[relay.Constant][61] /* ty=Tensor[(512, 1, 1, 128), float16] */, meta[relay.Constant][62] /* ty=Tensor[(1, 1, 1, 512), float16] */, meta[relay.Constant][63] /* ty=Tensor[(1, 1, 1, 512), float16] */, %592) /* ty=Tensor[(32, 28, 28, 512), float16] */;
  %599 = fn (%p0191: Tensor[(32, 28, 28, 512), float16] /* ty=Tensor[(32, 28, 28, 512), float16] */, %p1149: Tensor[(128, 1, 1, 512), float16] /* ty=Tensor[(128, 1, 1, 512), float16] */, %p265: Tensor[(1, 1, 1, 128), float16] /* ty=Tensor[(1, 1, 1, 128), float16] */, %p344: Tensor[(1, 1, 1, 128), float16] /* ty=Tensor[(1, 1, 1, 128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 128), float16] {
    %350 = nn.conv2d(%p0191, %p1149, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %351 = multiply(%350, %p265) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %352 = add(%351, %p344) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    nn.relu(%352) /* ty=Tensor[(32, 28, 28, 128), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 512), float16], Tensor[(128, 1, 1, 512), float16], Tensor[(1, 1, 1, 128), float16], Tensor[(1, 1, 1, 128), float16]) -> Tensor[(32, 28, 28, 128), float16] */;
  %600 = %599(%598, meta[relay.Constant][64] /* ty=Tensor[(128, 1, 1, 512), float16] */, meta[relay.Constant][65] /* ty=Tensor[(1, 1, 1, 128), float16] */, meta[relay.Constant][66] /* ty=Tensor[(1, 1, 1, 128), float16] */) /* ty=Tensor[(32, 28, 28, 128), float16] */;
  %601 = fn (%p0190: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p1148: Tensor[(128, 3, 3, 128), float16] /* ty=Tensor[(128, 3, 3, 128), float16] */, %p264: Tensor[(1, 1, 1, 128), float16] /* ty=Tensor[(1, 1, 1, 128), float16] */, %p343: Tensor[(1, 1, 1, 128), float16] /* ty=Tensor[(1, 1, 1, 128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 128), float16] {
    %347 = nn.conv2d(%p0190, %p1148, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %348 = multiply(%347, %p264) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %349 = add(%348, %p343) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    nn.relu(%349) /* ty=Tensor[(32, 28, 28, 128), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(128, 3, 3, 128), float16], Tensor[(1, 1, 1, 128), float16], Tensor[(1, 1, 1, 128), float16]) -> Tensor[(32, 28, 28, 128), float16] */;
  %602 = %601(%600, meta[relay.Constant][67] /* ty=Tensor[(128, 3, 3, 128), float16] */, meta[relay.Constant][68] /* ty=Tensor[(1, 1, 1, 128), float16] */, meta[relay.Constant][69] /* ty=Tensor[(1, 1, 1, 128), float16] */) /* ty=Tensor[(32, 28, 28, 128), float16] */;
  %603 = fn (%p0189: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p1147: Tensor[(512, 1, 1, 128), float16] /* ty=Tensor[(512, 1, 1, 128), float16] */, %p263: Tensor[(1, 1, 1, 512), float16] /* ty=Tensor[(1, 1, 1, 512), float16] */, %p342: Tensor[(1, 1, 1, 512), float16] /* ty=Tensor[(1, 1, 1, 512), float16] */, %p410: Tensor[(32, 28, 28, 512), float16] /* ty=Tensor[(32, 28, 28, 512), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 512), float16] {
    %343 = nn.conv2d(%p0189, %p1147, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 512), float16] */;
    %344 = multiply(%343, %p263) /* ty=Tensor[(32, 28, 28, 512), float16] */;
    %345 = add(%344, %p342) /* ty=Tensor[(32, 28, 28, 512), float16] */;
    %346 = add(%345, %p410) /* ty=Tensor[(32, 28, 28, 512), float16] */;
    nn.relu(%346) /* ty=Tensor[(32, 28, 28, 512), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(512, 1, 1, 128), float16], Tensor[(1, 1, 1, 512), float16], Tensor[(1, 1, 1, 512), float16], Tensor[(32, 28, 28, 512), float16]) -> Tensor[(32, 28, 28, 512), float16] */;
  %604 = %603(%602, meta[relay.Constant][70] /* ty=Tensor[(512, 1, 1, 128), float16] */, meta[relay.Constant][71] /* ty=Tensor[(1, 1, 1, 512), float16] */, meta[relay.Constant][72] /* ty=Tensor[(1, 1, 1, 512), float16] */, %598) /* ty=Tensor[(32, 28, 28, 512), float16] */;
  %605 = fn (%p0188: Tensor[(32, 28, 28, 512), float16] /* ty=Tensor[(32, 28, 28, 512), float16] */, %p1146: Tensor[(256, 1, 1, 512), float16] /* ty=Tensor[(256, 1, 1, 512), float16] */, %p262: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, %p341: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 256), float16] {
    %340 = nn.conv2d(%p0188, %p1146, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 256), float16] */;
    %341 = multiply(%340, %p262) /* ty=Tensor[(32, 28, 28, 256), float16] */;
    %342 = add(%341, %p341) /* ty=Tensor[(32, 28, 28, 256), float16] */;
    nn.relu(%342) /* ty=Tensor[(32, 28, 28, 256), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 512), float16], Tensor[(256, 1, 1, 512), float16], Tensor[(1, 1, 1, 256), float16], Tensor[(1, 1, 1, 256), float16]) -> Tensor[(32, 28, 28, 256), float16] */;
  %606 = %605(%604, meta[relay.Constant][73] /* ty=Tensor[(256, 1, 1, 512), float16] */, meta[relay.Constant][74] /* ty=Tensor[(1, 1, 1, 256), float16] */, meta[relay.Constant][75] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(32, 28, 28, 256), float16] */;
  %607 = fn (%p0187: Tensor[(32, 28, 28, 256), float16] /* ty=Tensor[(32, 28, 28, 256), float16] */, %p1145: Tensor[(256, 3, 3, 256), float16] /* ty=Tensor[(256, 3, 3, 256), float16] */, %p261: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, %p340: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 256), float16] {
    %337 = nn.conv2d(%p0187, %p1145, strides=[2, 2], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 256), float16] */;
    %338 = multiply(%337, %p261) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    %339 = add(%338, %p340) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    nn.relu(%339) /* ty=Tensor[(32, 14, 14, 256), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 256), float16], Tensor[(256, 3, 3, 256), float16], Tensor[(1, 1, 1, 256), float16], Tensor[(1, 1, 1, 256), float16]) -> Tensor[(32, 14, 14, 256), float16] */;
  %610 = fn (%p0216: Tensor[(32, 28, 28, 512), float16] /* ty=Tensor[(32, 28, 28, 512), float16] */, %p1173: Tensor[(1024, 1, 1, 512), float16] /* ty=Tensor[(1024, 1, 1, 512), float16] */, %p289: Tensor[(1, 1, 1, 1024), float16] /* ty=Tensor[(1, 1, 1, 1024), float16] */, %p367: Tensor[(1, 1, 1, 1024), float16] /* ty=Tensor[(1, 1, 1, 1024), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 1024), float16] {
    %608 = nn.conv2d(%p0216, %p1173, strides=[2, 2], padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    %609 = multiply(%608, %p289) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    add(%609, %p367) /* ty=Tensor[(32, 14, 14, 1024), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 512), float16], Tensor[(1024, 1, 1, 512), float16], Tensor[(1, 1, 1, 1024), float16], Tensor[(1, 1, 1, 1024), float16]) -> Tensor[(32, 14, 14, 1024), float16] */;
  %611 = %607(%606, meta[relay.Constant][76] /* ty=Tensor[(256, 3, 3, 256), float16] */, meta[relay.Constant][77] /* ty=Tensor[(1, 1, 1, 256), float16] */, meta[relay.Constant][78] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(32, 14, 14, 256), float16] */;
  %612 = %610(%604, meta[relay.Constant][82] /* ty=Tensor[(1024, 1, 1, 512), float16] */, meta[relay.Constant][83] /* ty=Tensor[(1, 1, 1, 1024), float16] */, meta[relay.Constant][84] /* ty=Tensor[(1, 1, 1, 1024), float16] */) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
  %613 = fn (%p0186: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p1144: Tensor[(1024, 1, 1, 256), float16] /* ty=Tensor[(1024, 1, 1, 256), float16] */, %p260: Tensor[(1, 1, 1, 1024), float16] /* ty=Tensor[(1, 1, 1, 1024), float16] */, %p339: Tensor[(1, 1, 1, 1024), float16] /* ty=Tensor[(1, 1, 1, 1024), float16] */, %p49: Tensor[(32, 14, 14, 1024), float16] /* ty=Tensor[(32, 14, 14, 1024), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 1024), float16] {
    %333 = nn.conv2d(%p0186, %p1144, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    %334 = multiply(%333, %p260) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    %335 = add(%334, %p339) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    %336 = add(%335, %p49) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    nn.relu(%336) /* ty=Tensor[(32, 14, 14, 1024), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(1024, 1, 1, 256), float16], Tensor[(1, 1, 1, 1024), float16], Tensor[(1, 1, 1, 1024), float16], Tensor[(32, 14, 14, 1024), float16]) -> Tensor[(32, 14, 14, 1024), float16] */;
  %614 = %613(%611, meta[relay.Constant][79] /* ty=Tensor[(1024, 1, 1, 256), float16] */, meta[relay.Constant][80] /* ty=Tensor[(1, 1, 1, 1024), float16] */, meta[relay.Constant][81] /* ty=Tensor[(1, 1, 1, 1024), float16] */, %612) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
  %615 = fn (%p0185: Tensor[(32, 14, 14, 1024), float16] /* ty=Tensor[(32, 14, 14, 1024), float16] */, %p1143: Tensor[(256, 1, 1, 1024), float16] /* ty=Tensor[(256, 1, 1, 1024), float16] */, %p259: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, %p338: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 256), float16] {
    %330 = nn.conv2d(%p0185, %p1143, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 256), float16] */;
    %331 = multiply(%330, %p259) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    %332 = add(%331, %p338) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    nn.relu(%332) /* ty=Tensor[(32, 14, 14, 256), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 1024), float16], Tensor[(256, 1, 1, 1024), float16], Tensor[(1, 1, 1, 256), float16], Tensor[(1, 1, 1, 256), float16]) -> Tensor[(32, 14, 14, 256), float16] */;
  %616 = %615(%614, meta[relay.Constant][85] /* ty=Tensor[(256, 1, 1, 1024), float16] */, meta[relay.Constant][86] /* ty=Tensor[(1, 1, 1, 256), float16] */, meta[relay.Constant][87] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(32, 14, 14, 256), float16] */;
  %617 = fn (%p0184: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p1142: Tensor[(256, 3, 3, 256), float16] /* ty=Tensor[(256, 3, 3, 256), float16] */, %p258: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, %p337: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 256), float16] {
    %327 = nn.conv2d(%p0184, %p1142, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 256), float16] */;
    %328 = multiply(%327, %p258) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    %329 = add(%328, %p337) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    nn.relu(%329) /* ty=Tensor[(32, 14, 14, 256), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(256, 3, 3, 256), float16], Tensor[(1, 1, 1, 256), float16], Tensor[(1, 1, 1, 256), float16]) -> Tensor[(32, 14, 14, 256), float16] */;
  %618 = %617(%616, meta[relay.Constant][88] /* ty=Tensor[(256, 3, 3, 256), float16] */, meta[relay.Constant][89] /* ty=Tensor[(1, 1, 1, 256), float16] */, meta[relay.Constant][90] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(32, 14, 14, 256), float16] */;
  %619 = fn (%p0183: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p1141: Tensor[(1024, 1, 1, 256), float16] /* ty=Tensor[(1024, 1, 1, 256), float16] */, %p257: Tensor[(1, 1, 1, 1024), float16] /* ty=Tensor[(1, 1, 1, 1024), float16] */, %p336: Tensor[(1, 1, 1, 1024), float16] /* ty=Tensor[(1, 1, 1, 1024), float16] */, %p48: Tensor[(32, 14, 14, 1024), float16] /* ty=Tensor[(32, 14, 14, 1024), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 1024), float16] {
    %323 = nn.conv2d(%p0183, %p1141, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    %324 = multiply(%323, %p257) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    %325 = add(%324, %p336) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    %326 = add(%325, %p48) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    nn.relu(%326) /* ty=Tensor[(32, 14, 14, 1024), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(1024, 1, 1, 256), float16], Tensor[(1, 1, 1, 1024), float16], Tensor[(1, 1, 1, 1024), float16], Tensor[(32, 14, 14, 1024), float16]) -> Tensor[(32, 14, 14, 1024), float16] */;
  %620 = %619(%618, meta[relay.Constant][91] /* ty=Tensor[(1024, 1, 1, 256), float16] */, meta[relay.Constant][92] /* ty=Tensor[(1, 1, 1, 1024), float16] */, meta[relay.Constant][93] /* ty=Tensor[(1, 1, 1, 1024), float16] */, %614) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
  %621 = fn (%p0182: Tensor[(32, 14, 14, 1024), float16] /* ty=Tensor[(32, 14, 14, 1024), float16] */, %p1140: Tensor[(256, 1, 1, 1024), float16] /* ty=Tensor[(256, 1, 1, 1024), float16] */, %p256: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, %p335: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 256), float16] {
    %320 = nn.conv2d(%p0182, %p1140, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 256), float16] */;
    %321 = multiply(%320, %p256) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    %322 = add(%321, %p335) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    nn.relu(%322) /* ty=Tensor[(32, 14, 14, 256), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 1024), float16], Tensor[(256, 1, 1, 1024), float16], Tensor[(1, 1, 1, 256), float16], Tensor[(1, 1, 1, 256), float16]) -> Tensor[(32, 14, 14, 256), float16] */;
  %622 = %621(%620, meta[relay.Constant][94] /* ty=Tensor[(256, 1, 1, 1024), float16] */, meta[relay.Constant][95] /* ty=Tensor[(1, 1, 1, 256), float16] */, meta[relay.Constant][96] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(32, 14, 14, 256), float16] */;
  %623 = fn (%p0181: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p1139: Tensor[(256, 3, 3, 256), float16] /* ty=Tensor[(256, 3, 3, 256), float16] */, %p255: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, %p334: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 256), float16] {
    %317 = nn.conv2d(%p0181, %p1139, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 256), float16] */;
    %318 = multiply(%317, %p255) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    %319 = add(%318, %p334) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    nn.relu(%319) /* ty=Tensor[(32, 14, 14, 256), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(256, 3, 3, 256), float16], Tensor[(1, 1, 1, 256), float16], Tensor[(1, 1, 1, 256), float16]) -> Tensor[(32, 14, 14, 256), float16] */;
  %624 = %623(%622, meta[relay.Constant][97] /* ty=Tensor[(256, 3, 3, 256), float16] */, meta[relay.Constant][98] /* ty=Tensor[(1, 1, 1, 256), float16] */, meta[relay.Constant][99] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(32, 14, 14, 256), float16] */;
  %625 = fn (%p0180: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p1138: Tensor[(1024, 1, 1, 256), float16] /* ty=Tensor[(1024, 1, 1, 256), float16] */, %p254: Tensor[(1, 1, 1, 1024), float16] /* ty=Tensor[(1, 1, 1, 1024), float16] */, %p333: Tensor[(1, 1, 1, 1024), float16] /* ty=Tensor[(1, 1, 1, 1024), float16] */, %p47: Tensor[(32, 14, 14, 1024), float16] /* ty=Tensor[(32, 14, 14, 1024), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 1024), float16] {
    %313 = nn.conv2d(%p0180, %p1138, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    %314 = multiply(%313, %p254) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    %315 = add(%314, %p333) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    %316 = add(%315, %p47) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    nn.relu(%316) /* ty=Tensor[(32, 14, 14, 1024), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(1024, 1, 1, 256), float16], Tensor[(1, 1, 1, 1024), float16], Tensor[(1, 1, 1, 1024), float16], Tensor[(32, 14, 14, 1024), float16]) -> Tensor[(32, 14, 14, 1024), float16] */;
  %626 = %625(%624, meta[relay.Constant][100] /* ty=Tensor[(1024, 1, 1, 256), float16] */, meta[relay.Constant][101] /* ty=Tensor[(1, 1, 1, 1024), float16] */, meta[relay.Constant][102] /* ty=Tensor[(1, 1, 1, 1024), float16] */, %620) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
  %627 = fn (%p0179: Tensor[(32, 14, 14, 1024), float16] /* ty=Tensor[(32, 14, 14, 1024), float16] */, %p1137: Tensor[(256, 1, 1, 1024), float16] /* ty=Tensor[(256, 1, 1, 1024), float16] */, %p253: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, %p332: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 256), float16] {
    %310 = nn.conv2d(%p0179, %p1137, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 256), float16] */;
    %311 = multiply(%310, %p253) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    %312 = add(%311, %p332) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    nn.relu(%312) /* ty=Tensor[(32, 14, 14, 256), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 1024), float16], Tensor[(256, 1, 1, 1024), float16], Tensor[(1, 1, 1, 256), float16], Tensor[(1, 1, 1, 256), float16]) -> Tensor[(32, 14, 14, 256), float16] */;
  %628 = %627(%626, meta[relay.Constant][103] /* ty=Tensor[(256, 1, 1, 1024), float16] */, meta[relay.Constant][104] /* ty=Tensor[(1, 1, 1, 256), float16] */, meta[relay.Constant][105] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(32, 14, 14, 256), float16] */;
  %629 = fn (%p0178: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p1136: Tensor[(256, 3, 3, 256), float16] /* ty=Tensor[(256, 3, 3, 256), float16] */, %p252: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, %p331: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 256), float16] {
    %307 = nn.conv2d(%p0178, %p1136, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 256), float16] */;
    %308 = multiply(%307, %p252) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    %309 = add(%308, %p331) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    nn.relu(%309) /* ty=Tensor[(32, 14, 14, 256), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(256, 3, 3, 256), float16], Tensor[(1, 1, 1, 256), float16], Tensor[(1, 1, 1, 256), float16]) -> Tensor[(32, 14, 14, 256), float16] */;
  %630 = %629(%628, meta[relay.Constant][106] /* ty=Tensor[(256, 3, 3, 256), float16] */, meta[relay.Constant][107] /* ty=Tensor[(1, 1, 1, 256), float16] */, meta[relay.Constant][108] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(32, 14, 14, 256), float16] */;
  %631 = fn (%p0177: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p1135: Tensor[(1024, 1, 1, 256), float16] /* ty=Tensor[(1024, 1, 1, 256), float16] */, %p251: Tensor[(1, 1, 1, 1024), float16] /* ty=Tensor[(1, 1, 1, 1024), float16] */, %p330: Tensor[(1, 1, 1, 1024), float16] /* ty=Tensor[(1, 1, 1, 1024), float16] */, %p46: Tensor[(32, 14, 14, 1024), float16] /* ty=Tensor[(32, 14, 14, 1024), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 1024), float16] {
    %303 = nn.conv2d(%p0177, %p1135, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    %304 = multiply(%303, %p251) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    %305 = add(%304, %p330) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    %306 = add(%305, %p46) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    nn.relu(%306) /* ty=Tensor[(32, 14, 14, 1024), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(1024, 1, 1, 256), float16], Tensor[(1, 1, 1, 1024), float16], Tensor[(1, 1, 1, 1024), float16], Tensor[(32, 14, 14, 1024), float16]) -> Tensor[(32, 14, 14, 1024), float16] */;
  %632 = %631(%630, meta[relay.Constant][109] /* ty=Tensor[(1024, 1, 1, 256), float16] */, meta[relay.Constant][110] /* ty=Tensor[(1, 1, 1, 1024), float16] */, meta[relay.Constant][111] /* ty=Tensor[(1, 1, 1, 1024), float16] */, %626) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
  %633 = fn (%p0176: Tensor[(32, 14, 14, 1024), float16] /* ty=Tensor[(32, 14, 14, 1024), float16] */, %p1134: Tensor[(256, 1, 1, 1024), float16] /* ty=Tensor[(256, 1, 1, 1024), float16] */, %p250: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, %p329: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 256), float16] {
    %300 = nn.conv2d(%p0176, %p1134, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 256), float16] */;
    %301 = multiply(%300, %p250) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    %302 = add(%301, %p329) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    nn.relu(%302) /* ty=Tensor[(32, 14, 14, 256), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 1024), float16], Tensor[(256, 1, 1, 1024), float16], Tensor[(1, 1, 1, 256), float16], Tensor[(1, 1, 1, 256), float16]) -> Tensor[(32, 14, 14, 256), float16] */;
  %634 = %633(%632, meta[relay.Constant][112] /* ty=Tensor[(256, 1, 1, 1024), float16] */, meta[relay.Constant][113] /* ty=Tensor[(1, 1, 1, 256), float16] */, meta[relay.Constant][114] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(32, 14, 14, 256), float16] */;
  %635 = fn (%p0175: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p1133: Tensor[(256, 3, 3, 256), float16] /* ty=Tensor[(256, 3, 3, 256), float16] */, %p249: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, %p328: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 256), float16] {
    %297 = nn.conv2d(%p0175, %p1133, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 256), float16] */;
    %298 = multiply(%297, %p249) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    %299 = add(%298, %p328) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    nn.relu(%299) /* ty=Tensor[(32, 14, 14, 256), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(256, 3, 3, 256), float16], Tensor[(1, 1, 1, 256), float16], Tensor[(1, 1, 1, 256), float16]) -> Tensor[(32, 14, 14, 256), float16] */;
  %636 = %635(%634, meta[relay.Constant][115] /* ty=Tensor[(256, 3, 3, 256), float16] */, meta[relay.Constant][116] /* ty=Tensor[(1, 1, 1, 256), float16] */, meta[relay.Constant][117] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(32, 14, 14, 256), float16] */;
  %637 = fn (%p0174: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p1132: Tensor[(1024, 1, 1, 256), float16] /* ty=Tensor[(1024, 1, 1, 256), float16] */, %p248: Tensor[(1, 1, 1, 1024), float16] /* ty=Tensor[(1, 1, 1, 1024), float16] */, %p327: Tensor[(1, 1, 1, 1024), float16] /* ty=Tensor[(1, 1, 1, 1024), float16] */, %p45: Tensor[(32, 14, 14, 1024), float16] /* ty=Tensor[(32, 14, 14, 1024), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 1024), float16] {
    %293 = nn.conv2d(%p0174, %p1132, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    %294 = multiply(%293, %p248) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    %295 = add(%294, %p327) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    %296 = add(%295, %p45) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    nn.relu(%296) /* ty=Tensor[(32, 14, 14, 1024), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(1024, 1, 1, 256), float16], Tensor[(1, 1, 1, 1024), float16], Tensor[(1, 1, 1, 1024), float16], Tensor[(32, 14, 14, 1024), float16]) -> Tensor[(32, 14, 14, 1024), float16] */;
  %638 = %637(%636, meta[relay.Constant][118] /* ty=Tensor[(1024, 1, 1, 256), float16] */, meta[relay.Constant][119] /* ty=Tensor[(1, 1, 1, 1024), float16] */, meta[relay.Constant][120] /* ty=Tensor[(1, 1, 1, 1024), float16] */, %632) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
  %639 = fn (%p0173: Tensor[(32, 14, 14, 1024), float16] /* ty=Tensor[(32, 14, 14, 1024), float16] */, %p1131: Tensor[(256, 1, 1, 1024), float16] /* ty=Tensor[(256, 1, 1, 1024), float16] */, %p247: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, %p326: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 256), float16] {
    %290 = nn.conv2d(%p0173, %p1131, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 256), float16] */;
    %291 = multiply(%290, %p247) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    %292 = add(%291, %p326) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    nn.relu(%292) /* ty=Tensor[(32, 14, 14, 256), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 1024), float16], Tensor[(256, 1, 1, 1024), float16], Tensor[(1, 1, 1, 256), float16], Tensor[(1, 1, 1, 256), float16]) -> Tensor[(32, 14, 14, 256), float16] */;
  %640 = %639(%638, meta[relay.Constant][121] /* ty=Tensor[(256, 1, 1, 1024), float16] */, meta[relay.Constant][122] /* ty=Tensor[(1, 1, 1, 256), float16] */, meta[relay.Constant][123] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(32, 14, 14, 256), float16] */;
  %641 = fn (%p0172: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p1130: Tensor[(256, 3, 3, 256), float16] /* ty=Tensor[(256, 3, 3, 256), float16] */, %p246: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, %p325: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 256), float16] {
    %287 = nn.conv2d(%p0172, %p1130, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 256), float16] */;
    %288 = multiply(%287, %p246) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    %289 = add(%288, %p325) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    nn.relu(%289) /* ty=Tensor[(32, 14, 14, 256), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(256, 3, 3, 256), float16], Tensor[(1, 1, 1, 256), float16], Tensor[(1, 1, 1, 256), float16]) -> Tensor[(32, 14, 14, 256), float16] */;
  %642 = %641(%640, meta[relay.Constant][124] /* ty=Tensor[(256, 3, 3, 256), float16] */, meta[relay.Constant][125] /* ty=Tensor[(1, 1, 1, 256), float16] */, meta[relay.Constant][126] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(32, 14, 14, 256), float16] */;
  %643 = fn (%p0171: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p1129: Tensor[(1024, 1, 1, 256), float16] /* ty=Tensor[(1024, 1, 1, 256), float16] */, %p245: Tensor[(1, 1, 1, 1024), float16] /* ty=Tensor[(1, 1, 1, 1024), float16] */, %p324: Tensor[(1, 1, 1, 1024), float16] /* ty=Tensor[(1, 1, 1, 1024), float16] */, %p44: Tensor[(32, 14, 14, 1024), float16] /* ty=Tensor[(32, 14, 14, 1024), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 1024), float16] {
    %283 = nn.conv2d(%p0171, %p1129, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    %284 = multiply(%283, %p245) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    %285 = add(%284, %p324) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    %286 = add(%285, %p44) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    nn.relu(%286) /* ty=Tensor[(32, 14, 14, 1024), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(1024, 1, 1, 256), float16], Tensor[(1, 1, 1, 1024), float16], Tensor[(1, 1, 1, 1024), float16], Tensor[(32, 14, 14, 1024), float16]) -> Tensor[(32, 14, 14, 1024), float16] */;
  %644 = %643(%642, meta[relay.Constant][127] /* ty=Tensor[(1024, 1, 1, 256), float16] */, meta[relay.Constant][128] /* ty=Tensor[(1, 1, 1, 1024), float16] */, meta[relay.Constant][129] /* ty=Tensor[(1, 1, 1, 1024), float16] */, %638) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
  %645 = fn (%p0170: Tensor[(32, 14, 14, 1024), float16] /* ty=Tensor[(32, 14, 14, 1024), float16] */, %p1128: Tensor[(512, 1, 1, 1024), float16] /* ty=Tensor[(512, 1, 1, 1024), float16] */, %p244: Tensor[(1, 1, 1, 512), float16] /* ty=Tensor[(1, 1, 1, 512), float16] */, %p323: Tensor[(1, 1, 1, 512), float16] /* ty=Tensor[(1, 1, 1, 512), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 512), float16] {
    %280 = nn.conv2d(%p0170, %p1128, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 512), float16] */;
    %281 = multiply(%280, %p244) /* ty=Tensor[(32, 14, 14, 512), float16] */;
    %282 = add(%281, %p323) /* ty=Tensor[(32, 14, 14, 512), float16] */;
    nn.relu(%282) /* ty=Tensor[(32, 14, 14, 512), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 1024), float16], Tensor[(512, 1, 1, 1024), float16], Tensor[(1, 1, 1, 512), float16], Tensor[(1, 1, 1, 512), float16]) -> Tensor[(32, 14, 14, 512), float16] */;
  %646 = %645(%644, meta[relay.Constant][130] /* ty=Tensor[(512, 1, 1, 1024), float16] */, meta[relay.Constant][131] /* ty=Tensor[(1, 1, 1, 512), float16] */, meta[relay.Constant][132] /* ty=Tensor[(1, 1, 1, 512), float16] */) /* ty=Tensor[(32, 14, 14, 512), float16] */;
  %647 = fn (%p0169: Tensor[(32, 14, 14, 512), float16] /* ty=Tensor[(32, 14, 14, 512), float16] */, %p1127: Tensor[(512, 3, 3, 512), float16] /* ty=Tensor[(512, 3, 3, 512), float16] */, %p243: Tensor[(1, 1, 1, 512), float16] /* ty=Tensor[(1, 1, 1, 512), float16] */, %p322: Tensor[(1, 1, 1, 512), float16] /* ty=Tensor[(1, 1, 1, 512), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 512), float16] {
    %277 = nn.conv2d(%p0169, %p1127, strides=[2, 2], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 512), float16] */;
    %278 = multiply(%277, %p243) /* ty=Tensor[(32, 7, 7, 512), float16] */;
    %279 = add(%278, %p322) /* ty=Tensor[(32, 7, 7, 512), float16] */;
    nn.relu(%279) /* ty=Tensor[(32, 7, 7, 512), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 512), float16], Tensor[(512, 3, 3, 512), float16], Tensor[(1, 1, 1, 512), float16], Tensor[(1, 1, 1, 512), float16]) -> Tensor[(32, 7, 7, 512), float16] */;
  %650 = fn (%p0217: Tensor[(32, 14, 14, 1024), float16] /* ty=Tensor[(32, 14, 14, 1024), float16] */, %p1174: Tensor[(2048, 1, 1, 1024), float16] /* ty=Tensor[(2048, 1, 1, 1024), float16] */, %p290: Tensor[(1, 1, 1, 2048), float16] /* ty=Tensor[(1, 1, 1, 2048), float16] */, %p368: Tensor[(1, 1, 1, 2048), float16] /* ty=Tensor[(1, 1, 1, 2048), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 2048), float16] {
    %648 = nn.conv2d(%p0217, %p1174, strides=[2, 2], padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 2048), float16] */;
    %649 = multiply(%648, %p290) /* ty=Tensor[(32, 7, 7, 2048), float16] */;
    add(%649, %p368) /* ty=Tensor[(32, 7, 7, 2048), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 1024), float16], Tensor[(2048, 1, 1, 1024), float16], Tensor[(1, 1, 1, 2048), float16], Tensor[(1, 1, 1, 2048), float16]) -> Tensor[(32, 7, 7, 2048), float16] */;
  %651 = %647(%646, meta[relay.Constant][133] /* ty=Tensor[(512, 3, 3, 512), float16] */, meta[relay.Constant][134] /* ty=Tensor[(1, 1, 1, 512), float16] */, meta[relay.Constant][135] /* ty=Tensor[(1, 1, 1, 512), float16] */) /* ty=Tensor[(32, 7, 7, 512), float16] */;
  %652 = %650(%644, meta[relay.Constant][139] /* ty=Tensor[(2048, 1, 1, 1024), float16] */, meta[relay.Constant][140] /* ty=Tensor[(1, 1, 1, 2048), float16] */, meta[relay.Constant][141] /* ty=Tensor[(1, 1, 1, 2048), float16] */) /* ty=Tensor[(32, 7, 7, 2048), float16] */;
  %653 = fn (%p0168: Tensor[(32, 7, 7, 512), float16] /* ty=Tensor[(32, 7, 7, 512), float16] */, %p1126: Tensor[(2048, 1, 1, 512), float16] /* ty=Tensor[(2048, 1, 1, 512), float16] */, %p242: Tensor[(1, 1, 1, 2048), float16] /* ty=Tensor[(1, 1, 1, 2048), float16] */, %p321: Tensor[(1, 1, 1, 2048), float16] /* ty=Tensor[(1, 1, 1, 2048), float16] */, %p43: Tensor[(32, 7, 7, 2048), float16] /* ty=Tensor[(32, 7, 7, 2048), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 2048), float16] {
    %273 = nn.conv2d(%p0168, %p1126, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 2048), float16] */;
    %274 = multiply(%273, %p242) /* ty=Tensor[(32, 7, 7, 2048), float16] */;
    %275 = add(%274, %p321) /* ty=Tensor[(32, 7, 7, 2048), float16] */;
    %276 = add(%275, %p43) /* ty=Tensor[(32, 7, 7, 2048), float16] */;
    nn.relu(%276) /* ty=Tensor[(32, 7, 7, 2048), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 512), float16], Tensor[(2048, 1, 1, 512), float16], Tensor[(1, 1, 1, 2048), float16], Tensor[(1, 1, 1, 2048), float16], Tensor[(32, 7, 7, 2048), float16]) -> Tensor[(32, 7, 7, 2048), float16] */;
  %654 = %653(%651, meta[relay.Constant][136] /* ty=Tensor[(2048, 1, 1, 512), float16] */, meta[relay.Constant][137] /* ty=Tensor[(1, 1, 1, 2048), float16] */, meta[relay.Constant][138] /* ty=Tensor[(1, 1, 1, 2048), float16] */, %652) /* ty=Tensor[(32, 7, 7, 2048), float16] */;
  %655 = fn (%p0167: Tensor[(32, 7, 7, 2048), float16] /* ty=Tensor[(32, 7, 7, 2048), float16] */, %p1125: Tensor[(512, 1, 1, 2048), float16] /* ty=Tensor[(512, 1, 1, 2048), float16] */, %p241: Tensor[(1, 1, 1, 512), float16] /* ty=Tensor[(1, 1, 1, 512), float16] */, %p320: Tensor[(1, 1, 1, 512), float16] /* ty=Tensor[(1, 1, 1, 512), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 512), float16] {
    %270 = nn.conv2d(%p0167, %p1125, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 512), float16] */;
    %271 = multiply(%270, %p241) /* ty=Tensor[(32, 7, 7, 512), float16] */;
    %272 = add(%271, %p320) /* ty=Tensor[(32, 7, 7, 512), float16] */;
    nn.relu(%272) /* ty=Tensor[(32, 7, 7, 512), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 2048), float16], Tensor[(512, 1, 1, 2048), float16], Tensor[(1, 1, 1, 512), float16], Tensor[(1, 1, 1, 512), float16]) -> Tensor[(32, 7, 7, 512), float16] */;
  %656 = %655(%654, meta[relay.Constant][142] /* ty=Tensor[(512, 1, 1, 2048), float16] */, meta[relay.Constant][143] /* ty=Tensor[(1, 1, 1, 512), float16] */, meta[relay.Constant][144] /* ty=Tensor[(1, 1, 1, 512), float16] */) /* ty=Tensor[(32, 7, 7, 512), float16] */;
  %657 = fn (%p0166: Tensor[(32, 7, 7, 512), float16] /* ty=Tensor[(32, 7, 7, 512), float16] */, %p1124: Tensor[(512, 3, 3, 512), float16] /* ty=Tensor[(512, 3, 3, 512), float16] */, %p240: Tensor[(1, 1, 1, 512), float16] /* ty=Tensor[(1, 1, 1, 512), float16] */, %p319: Tensor[(1, 1, 1, 512), float16] /* ty=Tensor[(1, 1, 1, 512), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 512), float16] {
    %267 = nn.conv2d(%p0166, %p1124, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 512), float16] */;
    %268 = multiply(%267, %p240) /* ty=Tensor[(32, 7, 7, 512), float16] */;
    %269 = add(%268, %p319) /* ty=Tensor[(32, 7, 7, 512), float16] */;
    nn.relu(%269) /* ty=Tensor[(32, 7, 7, 512), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 512), float16], Tensor[(512, 3, 3, 512), float16], Tensor[(1, 1, 1, 512), float16], Tensor[(1, 1, 1, 512), float16]) -> Tensor[(32, 7, 7, 512), float16] */;
  %658 = %657(%656, meta[relay.Constant][145] /* ty=Tensor[(512, 3, 3, 512), float16] */, meta[relay.Constant][146] /* ty=Tensor[(1, 1, 1, 512), float16] */, meta[relay.Constant][147] /* ty=Tensor[(1, 1, 1, 512), float16] */) /* ty=Tensor[(32, 7, 7, 512), float16] */;
  %659 = fn (%p0165: Tensor[(32, 7, 7, 512), float16] /* ty=Tensor[(32, 7, 7, 512), float16] */, %p1123: Tensor[(2048, 1, 1, 512), float16] /* ty=Tensor[(2048, 1, 1, 512), float16] */, %p239: Tensor[(1, 1, 1, 2048), float16] /* ty=Tensor[(1, 1, 1, 2048), float16] */, %p318: Tensor[(1, 1, 1, 2048), float16] /* ty=Tensor[(1, 1, 1, 2048), float16] */, %p42: Tensor[(32, 7, 7, 2048), float16] /* ty=Tensor[(32, 7, 7, 2048), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 2048), float16] {
    %263 = nn.conv2d(%p0165, %p1123, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 2048), float16] */;
    %264 = multiply(%263, %p239) /* ty=Tensor[(32, 7, 7, 2048), float16] */;
    %265 = add(%264, %p318) /* ty=Tensor[(32, 7, 7, 2048), float16] */;
    %266 = add(%265, %p42) /* ty=Tensor[(32, 7, 7, 2048), float16] */;
    nn.relu(%266) /* ty=Tensor[(32, 7, 7, 2048), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 512), float16], Tensor[(2048, 1, 1, 512), float16], Tensor[(1, 1, 1, 2048), float16], Tensor[(1, 1, 1, 2048), float16], Tensor[(32, 7, 7, 2048), float16]) -> Tensor[(32, 7, 7, 2048), float16] */;
  %660 = %659(%658, meta[relay.Constant][148] /* ty=Tensor[(2048, 1, 1, 512), float16] */, meta[relay.Constant][149] /* ty=Tensor[(1, 1, 1, 2048), float16] */, meta[relay.Constant][150] /* ty=Tensor[(1, 1, 1, 2048), float16] */, %654) /* ty=Tensor[(32, 7, 7, 2048), float16] */;
  %661 = fn (%p0164: Tensor[(32, 7, 7, 2048), float16] /* ty=Tensor[(32, 7, 7, 2048), float16] */, %p1122: Tensor[(512, 1, 1, 2048), float16] /* ty=Tensor[(512, 1, 1, 2048), float16] */, %p238: Tensor[(1, 1, 1, 512), float16] /* ty=Tensor[(1, 1, 1, 512), float16] */, %p317: Tensor[(1, 1, 1, 512), float16] /* ty=Tensor[(1, 1, 1, 512), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 512), float16] {
    %260 = nn.conv2d(%p0164, %p1122, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 512), float16] */;
    %261 = multiply(%260, %p238) /* ty=Tensor[(32, 7, 7, 512), float16] */;
    %262 = add(%261, %p317) /* ty=Tensor[(32, 7, 7, 512), float16] */;
    nn.relu(%262) /* ty=Tensor[(32, 7, 7, 512), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 2048), float16], Tensor[(512, 1, 1, 2048), float16], Tensor[(1, 1, 1, 512), float16], Tensor[(1, 1, 1, 512), float16]) -> Tensor[(32, 7, 7, 512), float16] */;
  %662 = %661(%660, meta[relay.Constant][151] /* ty=Tensor[(512, 1, 1, 2048), float16] */, meta[relay.Constant][152] /* ty=Tensor[(1, 1, 1, 512), float16] */, meta[relay.Constant][153] /* ty=Tensor[(1, 1, 1, 512), float16] */) /* ty=Tensor[(32, 7, 7, 512), float16] */;
  %663 = fn (%p0163: Tensor[(32, 7, 7, 512), float16] /* ty=Tensor[(32, 7, 7, 512), float16] */, %p1121: Tensor[(512, 3, 3, 512), float16] /* ty=Tensor[(512, 3, 3, 512), float16] */, %p237: Tensor[(1, 1, 1, 512), float16] /* ty=Tensor[(1, 1, 1, 512), float16] */, %p316: Tensor[(1, 1, 1, 512), float16] /* ty=Tensor[(1, 1, 1, 512), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 512), float16] {
    %257 = nn.conv2d(%p0163, %p1121, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 512), float16] */;
    %258 = multiply(%257, %p237) /* ty=Tensor[(32, 7, 7, 512), float16] */;
    %259 = add(%258, %p316) /* ty=Tensor[(32, 7, 7, 512), float16] */;
    nn.relu(%259) /* ty=Tensor[(32, 7, 7, 512), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 512), float16], Tensor[(512, 3, 3, 512), float16], Tensor[(1, 1, 1, 512), float16], Tensor[(1, 1, 1, 512), float16]) -> Tensor[(32, 7, 7, 512), float16] */;
  %664 = %663(%662, meta[relay.Constant][154] /* ty=Tensor[(512, 3, 3, 512), float16] */, meta[relay.Constant][155] /* ty=Tensor[(1, 1, 1, 512), float16] */, meta[relay.Constant][156] /* ty=Tensor[(1, 1, 1, 512), float16] */) /* ty=Tensor[(32, 7, 7, 512), float16] */;
  %665 = fn (%p0162: Tensor[(32, 7, 7, 512), float16] /* ty=Tensor[(32, 7, 7, 512), float16] */, %p1120: Tensor[(2048, 1, 1, 512), float16] /* ty=Tensor[(2048, 1, 1, 512), float16] */, %p236: Tensor[(1, 1, 1, 2048), float16] /* ty=Tensor[(1, 1, 1, 2048), float16] */, %p315: Tensor[(1, 1, 1, 2048), float16] /* ty=Tensor[(1, 1, 1, 2048), float16] */, %p41: Tensor[(32, 7, 7, 2048), float16] /* ty=Tensor[(32, 7, 7, 2048), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 2048), float16] {
    %253 = nn.conv2d(%p0162, %p1120, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 2048), float16] */;
    %254 = multiply(%253, %p236) /* ty=Tensor[(32, 7, 7, 2048), float16] */;
    %255 = add(%254, %p315) /* ty=Tensor[(32, 7, 7, 2048), float16] */;
    %256 = add(%255, %p41) /* ty=Tensor[(32, 7, 7, 2048), float16] */;
    nn.relu(%256) /* ty=Tensor[(32, 7, 7, 2048), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 512), float16], Tensor[(2048, 1, 1, 512), float16], Tensor[(1, 1, 1, 2048), float16], Tensor[(1, 1, 1, 2048), float16], Tensor[(32, 7, 7, 2048), float16]) -> Tensor[(32, 7, 7, 2048), float16] */;
  %666 = %665(%664, meta[relay.Constant][157] /* ty=Tensor[(2048, 1, 1, 512), float16] */, meta[relay.Constant][158] /* ty=Tensor[(1, 1, 1, 2048), float16] */, meta[relay.Constant][159] /* ty=Tensor[(1, 1, 1, 2048), float16] */, %660) /* ty=Tensor[(32, 7, 7, 2048), float16] */;
  %667 = fn (%p0161: Tensor[(32, 7, 7, 2048), float16] /* ty=Tensor[(32, 7, 7, 2048), float16] */, %p1119: Tensor[(256, 1, 1, 2048), float16] /* ty=Tensor[(256, 1, 1, 2048), float16] */, %p235: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 256), float16] {
    %252 = nn.conv2d(%p0161, %p1119, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 256), float16] */;
    add(%252, %p235) /* ty=Tensor[(32, 7, 7, 256), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 2048), float16], Tensor[(256, 1, 1, 2048), float16], Tensor[(1, 1, 1, 256), float16]) -> Tensor[(32, 7, 7, 256), float16] */;
  %668 = %667(%666, meta[relay.Constant][160] /* ty=Tensor[(256, 1, 1, 2048), float16] */, meta[relay.Constant][161] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(32, 7, 7, 256), float16] */;
  %669 = fn (%p0160: Tensor[(32, 7, 7, 256), float16] /* ty=Tensor[(32, 7, 7, 256), float16] */, Primitive=1) -> Tensor[(49, 32, 256), float16] {
    %250 = layout_transform(%p0160, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(32, 256, 7, 7), float16] */;
    %251 = reshape(%250, newshape=[32, 256, -1]) /* ty=Tensor[(32, 256, 49), float16] */;
    transpose(%251, axes=[2, 0, 1]) /* ty=Tensor[(49, 32, 256), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 256), float16]) -> Tensor[(49, 32, 256), float16] */;
  %2028 = fn (%p0181: Tensor[(32, 7, 7), float32] /* ty=Tensor[(32, 7, 7), float32] */, Primitive=1) -> Tensor[(32, 7, 7), bool] {
    %653 = cast(%p0181, dtype="bool") /* ty=Tensor[(32, 7, 7), bool] */;
    logical_not(%653) /* ty=Tensor[(32, 7, 7), bool] */
  } /* ty=fn (Tensor[(32, 7, 7), float32]) -> Tensor[(32, 7, 7), bool] */;
  %2029 = %2028(%input1) /* ty=Tensor[(32, 7, 7), bool] */;
  %2030 = fn (%p0180: Tensor[(32, 7, 7), bool] /* ty=Tensor[(32, 7, 7), bool] */, Primitive=1) -> Tensor[(32, 7, 7), float32] {
    cumsum(%p0180, axis=1, dtype="float32", exclusive=None) /* ty=Tensor[(32, 7, 7), float32] */
  } /* ty=fn (Tensor[(32, 7, 7), bool]) -> Tensor[(32, 7, 7), float32] */;
  %2031 = fn (%p0182: Tensor[(32, 7, 7), bool] /* ty=Tensor[(32, 7, 7), bool] */, Primitive=1) -> Tensor[(32, 7, 7), float32] {
    cumsum(%p0182, axis=2, dtype="float32", exclusive=None) /* ty=Tensor[(32, 7, 7), float32] */
  } /* ty=fn (Tensor[(32, 7, 7), bool]) -> Tensor[(32, 7, 7), float32] */;
  %2032 = %2030(%2029) /* ty=Tensor[(32, 7, 7), float32] */;
  %2033 = %2031(%2029) /* ty=Tensor[(32, 7, 7), float32] */;
  %2034 = fn (%p0179: Tensor[(32, 7, 7), float32] /* ty=Tensor[(32, 7, 7), float32] */, %p1157: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p2105: Tensor[(32, 7, 7), float32] /* ty=Tensor[(32, 7, 7), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    %620 = strided_slice(%p0179, begin=[0, -1, 0], end=[32, 7, 7], strides=[1, 1, 1], axes=None) /* ty=Tensor[(32, 1, 7), float32] */;
    %621 = add(%620, 1e-06f /* ty=float32 span=aten::add_106:0:0 */) /* ty=Tensor[(32, 1, 7), float32] */;
    %622 = divide(%p0179, %621) /* ty=Tensor[(32, 7, 7), float32] */;
    %623 = multiply(%622, 6.28319f /* ty=float32 span=aten::mul_159:0:0 */) /* ty=Tensor[(32, 7, 7), float32] */;
    %624 = expand_dims(%623, axis=3) /* ty=Tensor[(32, 7, 7, 1), float32] */;
    %660 = broadcast_to(%624, shape=[32, 7, 7, 128], dtype="float32") /* ty=Tensor[(32, 7, 7, 128), float32] */;
    %625 = divide(%660, %p1157) /* ty=Tensor[(32, 7, 7, 128), float32] */;
    %626 = strided_slice(%625, begin=[0, 0, 0, 0], end=[32, 7, 7, 128], strides=[1, 1, 1, 2], axes=None) /* ty=Tensor[(32, 7, 7, 64), float32] */;
    %627 = strided_slice(%625, begin=[0, 0, 0, 1], end=[32, 7, 7, 128], strides=[1, 1, 1, 2], axes=None) /* ty=Tensor[(32, 7, 7, 64), float32] */;
    %628 = sin(%626) /* ty=Tensor[(32, 7, 7, 64), float32] */;
    %629 = cos(%627) /* ty=Tensor[(32, 7, 7, 64), float32] */;
    %653 = expand_dims(%628, axis=4) /* ty=Tensor[(32, 7, 7, 64, 1), float32] */;
    %654 = expand_dims(%629, axis=4) /* ty=Tensor[(32, 7, 7, 64, 1), float32] */;
    %655 = (%653, %654) /* ty=(Tensor[(32, 7, 7, 64), float32], Tensor[(32, 7, 7, 64), float32]) span=aten::stack_6:0:0 */;
    %631 = concatenate(%655, axis=4) /* ty=Tensor[(32, 7, 7, 64, 2), float32] */;
    %632 = reshape(%631, newshape=[0, 0, 0, -1, 1]) /* ty=Tensor[(32, 7, 7, 128, 1), float32] */;
    %633 = strided_slice(%p2105, begin=[0, 0, -1], end=[32, 7, 7], strides=[1, 1, 1], axes=None) /* ty=Tensor[(32, 7, 1), float32] */;
    %634 = add(%633, 1e-06f /* ty=float32 span=aten::add_107:0:0 */) /* ty=Tensor[(32, 7, 1), float32] */;
    %635 = divide(%p2105, %634) /* ty=Tensor[(32, 7, 7), float32] */;
    %636 = multiply(%635, 6.28319f /* ty=float32 span=aten::mul_160:0:0 */) /* ty=Tensor[(32, 7, 7), float32] */;
    %637 = expand_dims(%636, axis=3) /* ty=Tensor[(32, 7, 7, 1), float32] */;
    %661 = broadcast_to(%637, shape=[32, 7, 7, 128], dtype="float32") /* ty=Tensor[(32, 7, 7, 128), float32] */;
    %638 = divide(%661, %p1157) /* ty=Tensor[(32, 7, 7, 128), float32] */;
    %639 = strided_slice(%638, begin=[0, 0, 0, 0], end=[32, 7, 7, 128], strides=[1, 1, 1, 2], axes=None) /* ty=Tensor[(32, 7, 7, 64), float32] */;
    %640 = strided_slice(%638, begin=[0, 0, 0, 1], end=[32, 7, 7, 128], strides=[1, 1, 1, 2], axes=None) /* ty=Tensor[(32, 7, 7, 64), float32] */;
    %641 = sin(%639) /* ty=Tensor[(32, 7, 7, 64), float32] */;
    %642 = cos(%640) /* ty=Tensor[(32, 7, 7, 64), float32] */;
    %656 = expand_dims(%641, axis=4) /* ty=Tensor[(32, 7, 7, 64, 1), float32] */;
    %657 = expand_dims(%642, axis=4) /* ty=Tensor[(32, 7, 7, 64, 1), float32] */;
    %658 = (%656, %657) /* ty=(Tensor[(32, 7, 7, 64), float32], Tensor[(32, 7, 7, 64), float32]) span=aten::stack_6:0:0 */;
    %659 = concatenate(%658, axis=4) /* ty=Tensor[(32, 7, 7, 64, 2), float32] */;
    %645 = reshape(%659, newshape=[0, 0, 0, -1, 1]) /* ty=Tensor[(32, 7, 7, 128, 1), float32] */;
    %646 = squeeze(%632, axis=[4]) /* ty=Tensor[(32, 7, 7, 128), float32] */;
    %647 = squeeze(%645, axis=[4]) /* ty=Tensor[(32, 7, 7, 128), float32] */;
    %648 = (%646, %647) /* ty=(Tensor[(32, 7, 7, 128), float32], Tensor[(32, 7, 7, 128), float32]) span=aten::cat_0:0:0 */;
    %649 = concatenate(%648, axis=3) /* ty=Tensor[(32, 7, 7, 256), float32] */;
    %650 = reshape(%649, newshape=[32, 49, 256]) /* ty=Tensor[(32, 49, 256), float32] */;
    %651 = transpose(%650, axes=[1, 0, 2]) /* ty=Tensor[(49, 32, 256), float32] */;
    cast(%651, dtype="float16") /* ty=Tensor[(49, 32, 256), float16] */;
  } /* ty=fn (Tensor[(32, 7, 7), float32], Tensor[(128), float32], Tensor[(32, 7, 7), float32]) -> Tensor[(49, 32, 256), float32] */;
  %670 = %669(%668) /* ty=Tensor[(49, 32, 256), float16] */;
  %2035 = %2034(%2032, meta[relay.Constant][109] /* ty=Tensor[(128), float32] */, %2033) /* ty=Tensor[(49, 32, 256), float32] */;
  %671 = fn (%p0159: Tensor[(49, 32, 256), float16] /* ty=Tensor[(49, 32, 256), float16] */, %p1118: Tensor[(49, 32, 256), float16] /* ty=Tensor[(49, 32, 256), float16] */, Primitive=1) -> Tensor[(49, 32, 256), float16] {
    add(%p0159, %p1118) /* ty=Tensor[(49, 32, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float16], Tensor[(49, 32, 256), float16]) -> Tensor[(49, 32, 256), float16] */;
  %672 = %671(%670, %2035) /* ty=Tensor[(49, 32, 256), float16] */;
  %673 = fn (%p0158: Tensor[(49, 32, 256), float16] /* ty=Tensor[(49, 32, 256), float16] */, Primitive=1, relay.reshape_only=1) -> Tensor[(1568, 256), float16] {
    reshape(%p0158, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %674 = %673(%672) /* ty=Tensor[(1568, 256), float16] */;
  %675 = fn (%p0157: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1117: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p0157, %p1117, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %676 = %675(%674, meta[relay.Constant][163] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %677 = fn (%p0156: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1116: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, %p234: float16 /* ty=float16 */, Primitive=1) -> Tensor[(256, 49, 32), float16] {
    %246 = reshape(%p0156, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %247 = add(%p1116, %246) /* ty=Tensor[(49, 32, 256), float16] */;
    %248 = reshape(%247, newshape=[49, 256, 32]) /* ty=Tensor[(49, 256, 32), float16] */;
    %249 = transpose(%248, axes=[1, 0, 2]) /* ty=Tensor[(256, 49, 32), float16] */;
    divide(%249, %p234) /* ty=Tensor[(256, 49, 32), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16], float16) -> Tensor[(256, 49, 32), float16] */;
  %681 = fn (%p0220: Tensor[(49, 32, 256), float16] /* ty=Tensor[(49, 32, 256), float16] */, Primitive=1, relay.reshape_only=1) -> Tensor[(1568, 256), float16] {
    reshape(%p0220, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %682 = %681(%672) /* ty=Tensor[(1568, 256), float16] */;
  %683 = fn (%p0219: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1176: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p0219, %p1176, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %684 = %683(%682, meta[relay.Constant][165] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %685 = fn (%p0218: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1175: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(256, 49, 32), float16] {
    %678 = reshape(%p0218, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %679 = add(%p1175, %678) /* ty=Tensor[(49, 32, 256), float16] */;
    %680 = reshape(%679, newshape=[49, 256, 32]) /* ty=Tensor[(49, 256, 32), float16] */;
    transpose(%680, axes=[1, 0, 2]) /* ty=Tensor[(256, 49, 32), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16]) -> Tensor[(256, 49, 32), float16] */;
  %686 = %677(%676, meta[relay.Constant][164] /* ty=Tensor[(256), float16] */, 5.65625f16 /* ty=float16 */) /* ty=Tensor[(256, 49, 32), float16] */;
  %687 = %685(%684, meta[relay.Constant][166] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(256, 49, 32), float16] */;
  %688 = fn (%p0155: Tensor[(256, 49, 32), float16] /* ty=Tensor[(256, 49, 32), float16] */, %p1115: Tensor[(256, 49, 32), float16] /* ty=Tensor[(256, 49, 32), float16] */, Primitive=1) -> Tensor[(256, 49, 49), float16] {
    nn.batch_matmul(%p0155, %p1115, out_dtype="float16", transpose_b=True) /* ty=Tensor[(256, 49, 49), float16] */
  } /* ty=fn (Tensor[(256, 49, 32), float16], Tensor[(256, 49, 32), float16]) -> Tensor[(256, 49, 49), float16] */;
  %689 = %688(%686, %687) /* ty=Tensor[(256, 49, 49), float16] */;
  %690 = fn (%p0154: Tensor[(256, 49, 49), float16] /* ty=Tensor[(256, 49, 49), float16] */, %p1114: Tensor[(256, 1, 49), float16] /* ty=Tensor[(256, 1, 49), float16] */, Primitive=1) -> Tensor[(256, 49, 49), float32] {
    %244 = reshape(%p0154, newshape=[256, 49, 49]) /* ty=Tensor[(256, 49, 49), float16] */;
    %245 = add(%244, %p1114) /* ty=Tensor[(256, 49, 49), float16] */;
    cast(%245, dtype="float32") /* ty=Tensor[(256, 49, 49), float32] */
  } /* ty=fn (Tensor[(256, 49, 49), float16], Tensor[(256, 1, 49), float16]) -> Tensor[(256, 49, 49), float32] */;
  %691 = %690(%689, meta[relay.Constant][167] /* ty=Tensor[(256, 1, 49), float16] */) /* ty=Tensor[(256, 49, 49), float32] */;
  %692 = fn (%p0153: Tensor[(256, 49, 49), float32] /* ty=Tensor[(256, 49, 49), float32] */, Primitive=1) -> Tensor[(256, 49, 49), float16] {
    %243 = nn.softmax(%p0153, axis=2) /* ty=Tensor[(256, 49, 49), float32] */;
    cast(%243, dtype="float16") /* ty=Tensor[(256, 49, 49), float16] */
  } /* ty=fn (Tensor[(256, 49, 49), float32]) -> Tensor[(256, 49, 49), float16] */;
  %696 = fn (%p0223: Tensor[(49, 32, 256), float16] /* ty=Tensor[(49, 32, 256), float16] */, Primitive=1, relay.reshape_only=1) -> Tensor[(1568, 256), float16] {
    reshape(%p0223, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %697 = %696(%670) /* ty=Tensor[(1568, 256), float16] */;
  %698 = fn (%p0222: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1178: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p0222, %p1178, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %699 = %698(%697, meta[relay.Constant][168] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %700 = fn (%p0221: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1177: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(256, 32, 49), float16] {
    %693 = reshape(%p0221, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %694 = add(%p1177, %693) /* ty=Tensor[(49, 32, 256), float16] */;
    %695 = reshape(%694, newshape=[49, 256, 32]) /* ty=Tensor[(49, 256, 32), float16] */;
    transpose(%695, axes=[1, 2, 0]) /* ty=Tensor[(256, 32, 49), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16]) -> Tensor[(256, 32, 49), float16] */;
  %701 = %692(%691) /* ty=Tensor[(256, 49, 49), float16] */;
  %702 = %700(%699, meta[relay.Constant][169] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(256, 32, 49), float16] */;
  %703 = fn (%p0152: Tensor[(256, 49, 49), float16] /* ty=Tensor[(256, 49, 49), float16] */, %p1113: Tensor[(256, 32, 49), float16] /* ty=Tensor[(256, 32, 49), float16] */, Primitive=1) -> Tensor[(256, 49, 32), float16] {
    nn.batch_matmul(%p0152, %p1113, out_dtype="float16", transpose_b=True) /* ty=Tensor[(256, 49, 32), float16] */
  } /* ty=fn (Tensor[(256, 49, 49), float16], Tensor[(256, 32, 49), float16]) -> Tensor[(256, 49, 32), float16] */;
  %704 = %703(%701, %702) /* ty=Tensor[(256, 49, 32), float16] */;
  %705 = fn (%p0151: Tensor[(256, 49, 32), float16] /* ty=Tensor[(256, 49, 32), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %241 = reshape(%p0151, newshape=[256, 49, 32]) /* ty=Tensor[(256, 49, 32), float16] */;
    %242 = transpose(%241, axes=[1, 0, 2]) /* ty=Tensor[(49, 256, 32), float16] */;
    reshape(%242, newshape=[1568, 256]) /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(256, 49, 32), float16]) -> Tensor[(1568, 256), float16] */;
  %706 = %705(%704) /* ty=Tensor[(1568, 256), float16] */;
  %707 = fn (%p0150: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1112: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, %p233: Tensor[(1, 256), float16] /* ty=Tensor[(1, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %240 = nn.dense(%p0150, %p1112, units=256, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */;
    add(%240, %p233) /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16], Tensor[(1, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %708 = %707(%706, meta[relay.Constant][170] /* ty=Tensor[(256, 256), float16] */, meta[relay.Constant][171] /* ty=Tensor[(1, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %709 = fn (%p0149: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1111: Tensor[(49, 32, 256), float16] /* ty=Tensor[(49, 32, 256), float16] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    %238 = reshape(%p0149, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %239 = add(%p1111, %238) /* ty=Tensor[(49, 32, 256), float16] */;
    cast(%239, dtype="float32") /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(49, 32, 256), float16]) -> Tensor[(49, 32, 256), float32] */;
  %710 = %709(%708, %670) /* ty=Tensor[(49, 32, 256), float32] */;
  %711 = fn (%p0224: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 1), float32] {
    mean(%p0224, axis=[-1], keepdims=True) /* ty=Tensor[(49, 32, 1), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 1), float32] */;
  %712 = %711(%710) /* ty=Tensor[(49, 32, 1), float32] */;
  %713 = fn (%p0148: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, %p1110: Tensor[(49, 32, 1), float32] /* ty=Tensor[(49, 32, 1), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    subtract(%p0148, %p1110) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32], Tensor[(49, 32, 1), float32]) -> Tensor[(49, 32, 256), float32] */;
  %714 = %713(%710, %712) /* ty=Tensor[(49, 32, 256), float32] */;
  %715 = fn (%p0147: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 1), float32] {
    %237 = power(%p0147, 2f /* ty=float32 span=/transformer/encoder/layers.0/norm1/Constant:0:0 */) /* ty=Tensor[(49, 32, 256), float32] */;
    mean(%237, axis=[-1], keepdims=True) /* ty=Tensor[(49, 32, 1), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 1), float32] */;
  %716 = %715(%714) /* ty=Tensor[(49, 32, 1), float32] */;
  %717 = fn (%p0146: Tensor[(49, 32, 1), float32] /* ty=Tensor[(49, 32, 1), float32] */, %p1109: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, %p232: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p314: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float16] {
    %233 = add(%p0146, 1e-05f /* ty=float32 span=/transformer/encoder/layers.0/norm1/Constant_1:0:0 */) /* ty=Tensor[(49, 32, 1), float32] */;
    %234 = rsqrt(%233) /* ty=Tensor[(49, 32, 1), float32] */;
    %235 = multiply(%p1109, %234) /* ty=Tensor[(49, 32, 256), float32] */;
    %236 = multiply(%235, %p232) /* ty=Tensor[(49, 32, 256), float32] */;
    %237 = add(%236, %p314) /* ty=Tensor[(49, 32, 256), float32] */
    cast(%237, dtype="float16") /* ty=Tensor[(49, 32, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 1), float32], Tensor[(49, 32, 256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> Tensor[(49, 32, 256), float16] */;
  %718 = %717(%716, %714, meta[relay.Constant][172] /* ty=Tensor[(256), float32] span=/transformer/encoder/layers.0/norm1/Mul.transformer.encoder.layers.0.norm1.weight:0:0 */, meta[relay.Constant][173] /* ty=Tensor[(256), float32] span=/transformer/encoder/layers.0/norm1/Add_1.transformer.encoder.layers.0.norm1.bias:0:0 */) /* ty=Tensor[(49, 32, 256), float16] */;
  %719 = fn (%p0145: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %232 = reshape(%p0145, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float32] */;
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(1568, 256), float16] */;
  %720 = %719(%718) /* ty=Tensor[(1568, 256), float16] */;
  %721 = fn (%p0144: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1108: Tensor[(2048, 256), float16] /* ty=Tensor[(2048, 256), float16] */, Primitive=1) -> Tensor[(1568, 2048), float16] {
    nn.dense(%p0144, %p1108, units=None, out_dtype="float16") /* ty=Tensor[(1568, 2048), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(2048, 256), float16]) -> Tensor[(1568, 2048), float16] */;
  %722 = %721(%720, meta[relay.Constant][174] /* ty=Tensor[(2048, 256), float16] */) /* ty=Tensor[(1568, 2048), float16] */;
  %723 = fn (%p0143: Tensor[(1568, 2048), float16] /* ty=Tensor[(1568, 2048), float16] */, %p1107: Tensor[(2048), float16] /* ty=Tensor[(2048), float16] */, Primitive=1) -> Tensor[(1568, 2048), float16] {
    %229 = reshape(%p0143, newshape=[49, 32, 2048]) /* ty=Tensor[(49, 32, 2048), float16] */;
    %230 = add(%p1107, %229) /* ty=Tensor[(49, 32, 2048), float16] */;
    %231 = nn.relu(%230) /* ty=Tensor[(49, 32, 2048), float16] */;
    reshape(%231, newshape=[-1, 2048]) /* ty=Tensor[(1568, 2048), float16] */
  } /* ty=fn (Tensor[(1568, 2048), float16], Tensor[(2048), float16]) -> Tensor[(1568, 2048), float16] */;
  %724 = %723(%722, meta[relay.Constant][175] /* ty=Tensor[(2048), float16] */) /* ty=Tensor[(1568, 2048), float16] */;
  %725 = fn (%p0142: Tensor[(1568, 2048), float16] /* ty=Tensor[(1568, 2048), float16] */, %p1106: Tensor[(256, 2048), float16] /* ty=Tensor[(256, 2048), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p0142, %p1106, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 2048), float16], Tensor[(256, 2048), float16]) -> Tensor[(1568, 256), float16] */;
  %726 = %725(%724, meta[relay.Constant][176] /* ty=Tensor[(256, 2048), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %727 = fn (%p0141: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1105: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, %p231: Tensor[(49, 32, 256), float16] /* ty=Tensor[(49, 32, 256), float16] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    %226 = reshape(%p0141, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %227 = add(%p1105, %226) /* ty=Tensor[(49, 32, 256), float16] */;
    %228 = cast(%227, dtype="float32") /* ty=Tensor[(49, 32, 256), float32] */;
    %229 = cast(%p231, dtype="float32") /* ty=Tensor[(49, 32, 256), float32] */;
    add(%229, %228) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16], Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 256), float32] */;
  %728 = %727(%726, meta[relay.Constant][177] /* ty=Tensor[(256), float16] */, %718) /* ty=Tensor[(49, 32, 256), float32] */;
  %729 = fn (%p0225: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 1), float32] {
    mean(%p0225, axis=[-1], keepdims=True) /* ty=Tensor[(49, 32, 1), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 1), float32] */;
  %730 = %729(%728) /* ty=Tensor[(49, 32, 1), float32] */;
  %731 = fn (%p0140: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, %p1104: Tensor[(49, 32, 1), float32] /* ty=Tensor[(49, 32, 1), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    subtract(%p0140, %p1104) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32], Tensor[(49, 32, 1), float32]) -> Tensor[(49, 32, 256), float32] */;
  %732 = %731(%728, %730) /* ty=Tensor[(49, 32, 256), float32] */;
  %733 = fn (%p0139: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 1), float32] {
    %225 = power(%p0139, 2f /* ty=float32 span=/transformer/encoder/layers.0/norm2/Constant:0:0 */) /* ty=Tensor[(49, 32, 256), float32] */;
    mean(%225, axis=[-1], keepdims=True) /* ty=Tensor[(49, 32, 1), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 1), float32] */;
  %734 = %733(%732) /* ty=Tensor[(49, 32, 1), float32] */;
  %735 = fn (%p0138: Tensor[(49, 32, 1), float32] /* ty=Tensor[(49, 32, 1), float32] */, %p1103: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, %p230: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p313: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    %221 = add(%p0138, 1e-05f /* ty=float32 span=/transformer/encoder/layers.0/norm2/Constant_1:0:0 */) /* ty=Tensor[(49, 32, 1), float32] */;
    %222 = rsqrt(%221) /* ty=Tensor[(49, 32, 1), float32] */;
    %223 = multiply(%p1103, %222) /* ty=Tensor[(49, 32, 256), float32] */;
    %224 = multiply(%223, %p230) /* ty=Tensor[(49, 32, 256), float32] */;
    add(%224, %p313) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(49, 32, 1), float32], Tensor[(49, 32, 256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> Tensor[(49, 32, 256), float32] */;
  %736 = %735(%734, %732, meta[relay.Constant][178] /* ty=Tensor[(256), float32] span=/transformer/encoder/layers.0/norm2/Mul.transformer.encoder.layers.0.norm2.weight:0:0 */, meta[relay.Constant][179] /* ty=Tensor[(256), float32] span=/transformer/encoder/layers.0/norm2/Add_1.transformer.encoder.layers.0.norm2.bias:0:0 */) /* ty=Tensor[(49, 32, 256), float32] */;
  %737 = fn (%p0137: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, %p1102: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    add(%p0137, %p1102) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32], Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 256), float32] */;
  %738 = %737(%736, meta[relay.Constant][180] /* ty=Tensor[(49, 32, 256), float32] span=/transformer/Transpose_1:0:0 */) /* ty=Tensor[(49, 32, 256), float32] */;
  %739 = fn (%p0136: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %220 = reshape(%p0136, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float32] */;
    cast(%220, dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(1568, 256), float16] */;
  %740 = %739(%738) /* ty=Tensor[(1568, 256), float16] */;
  %741 = fn (%p0135: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1101: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p0135, %p1101, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %742 = %741(%740, meta[relay.Constant][181] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %743 = fn (%p0134: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1100: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, %p229: float16 /* ty=float16 */, Primitive=1) -> Tensor[(256, 49, 32), float16] {
    %216 = reshape(%p0134, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %217 = add(%p1100, %216) /* ty=Tensor[(49, 32, 256), float16] */;
    %218 = reshape(%217, newshape=[49, 256, 32]) /* ty=Tensor[(49, 256, 32), float16] */;
    %219 = transpose(%218, axes=[1, 0, 2]) /* ty=Tensor[(256, 49, 32), float16] */;
    divide(%219, %p229) /* ty=Tensor[(256, 49, 32), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16], float16) -> Tensor[(256, 49, 32), float16] */;
  %748 = fn (%p0228: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %747 = reshape(%p0228, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float32] */;
    cast(%747, dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(1568, 256), float16] */;
  %749 = %748(%738) /* ty=Tensor[(1568, 256), float16] */;
  %750 = fn (%p0227: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1180: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p0227, %p1180, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %751 = %750(%749, meta[relay.Constant][183] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %752 = fn (%p0226: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1179: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(256, 49, 32), float16] {
    %744 = reshape(%p0226, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %745 = add(%p1179, %744) /* ty=Tensor[(49, 32, 256), float16] */;
    %746 = reshape(%745, newshape=[49, 256, 32]) /* ty=Tensor[(49, 256, 32), float16] */;
    transpose(%746, axes=[1, 0, 2]) /* ty=Tensor[(256, 49, 32), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16]) -> Tensor[(256, 49, 32), float16] */;
  %753 = %743(%742, meta[relay.Constant][182] /* ty=Tensor[(256), float16] */, 5.65625f16 /* ty=float16 */) /* ty=Tensor[(256, 49, 32), float16] */;
  %754 = %752(%751, meta[relay.Constant][184] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(256, 49, 32), float16] */;
  %755 = fn (%p0133: Tensor[(256, 49, 32), float16] /* ty=Tensor[(256, 49, 32), float16] */, %p199: Tensor[(256, 49, 32), float16] /* ty=Tensor[(256, 49, 32), float16] */, Primitive=1) -> Tensor[(256, 49, 49), float16] {
    nn.batch_matmul(%p0133, %p199, out_dtype="float16", transpose_b=True) /* ty=Tensor[(256, 49, 49), float16] */
  } /* ty=fn (Tensor[(256, 49, 32), float16], Tensor[(256, 49, 32), float16]) -> Tensor[(256, 49, 49), float16] */;
  %756 = %755(%753, %754) /* ty=Tensor[(256, 49, 49), float16] */;
  %757 = fn (%p0132: Tensor[(256, 49, 49), float16] /* ty=Tensor[(256, 49, 49), float16] */, %p198: Tensor[(256, 1, 49), float16] /* ty=Tensor[(256, 1, 49), float16] */, Primitive=1) -> Tensor[(256, 49, 49), float32] {
    %214 = reshape(%p0132, newshape=[256, 49, 49]) /* ty=Tensor[(256, 49, 49), float16] */;
    %215 = add(%214, %p198) /* ty=Tensor[(256, 49, 49), float16] */;
    cast(%215, dtype="float32") /* ty=Tensor[(256, 49, 49), float32] */
  } /* ty=fn (Tensor[(256, 49, 49), float16], Tensor[(256, 1, 49), float16]) -> Tensor[(256, 49, 49), float32] */;
  %758 = %757(%756, meta[relay.Constant][185] /* ty=Tensor[(256, 1, 49), float16] */) /* ty=Tensor[(256, 49, 49), float32] */;
  %759 = fn (%p0131: Tensor[(256, 49, 49), float32] /* ty=Tensor[(256, 49, 49), float32] */, Primitive=1) -> Tensor[(256, 49, 49), float16] {
    %213 = nn.softmax(%p0131, axis=2) /* ty=Tensor[(256, 49, 49), float32] */;
    cast(%213, dtype="float16") /* ty=Tensor[(256, 49, 49), float16] */
  } /* ty=fn (Tensor[(256, 49, 49), float32]) -> Tensor[(256, 49, 49), float16] */;
  %764 = fn (%p0231: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %763 = reshape(%p0231, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float32] */;
    cast(%763, dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(1568, 256), float16] */;
  %765 = %764(%736) /* ty=Tensor[(1568, 256), float16] */;
  %766 = fn (%p0230: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1182: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p0230, %p1182, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %767 = %766(%765, meta[relay.Constant][186] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %768 = fn (%p0229: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1181: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(256, 32, 49), float16] {
    %760 = reshape(%p0229, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %761 = add(%p1181, %760) /* ty=Tensor[(49, 32, 256), float16] */;
    %762 = reshape(%761, newshape=[49, 256, 32]) /* ty=Tensor[(49, 256, 32), float16] */;
    transpose(%762, axes=[1, 2, 0]) /* ty=Tensor[(256, 32, 49), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16]) -> Tensor[(256, 32, 49), float16] */;
  %769 = %759(%758) /* ty=Tensor[(256, 49, 49), float16] */;
  %770 = %768(%767, meta[relay.Constant][187] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(256, 32, 49), float16] */;
  %771 = fn (%p0130: Tensor[(256, 49, 49), float16] /* ty=Tensor[(256, 49, 49), float16] */, %p197: Tensor[(256, 32, 49), float16] /* ty=Tensor[(256, 32, 49), float16] */, Primitive=1) -> Tensor[(256, 49, 32), float16] {
    nn.batch_matmul(%p0130, %p197, out_dtype="float16", transpose_b=True) /* ty=Tensor[(256, 49, 32), float16] */
  } /* ty=fn (Tensor[(256, 49, 49), float16], Tensor[(256, 32, 49), float16]) -> Tensor[(256, 49, 32), float16] */;
  %772 = %771(%769, %770) /* ty=Tensor[(256, 49, 32), float16] */;
  %773 = fn (%p0129: Tensor[(256, 49, 32), float16] /* ty=Tensor[(256, 49, 32), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %211 = reshape(%p0129, newshape=[256, 49, 32]) /* ty=Tensor[(256, 49, 32), float16] */;
    %212 = transpose(%211, axes=[1, 0, 2]) /* ty=Tensor[(49, 256, 32), float16] */;
    reshape(%212, newshape=[1568, 256]) /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(256, 49, 32), float16]) -> Tensor[(1568, 256), float16] */;
  %774 = %773(%772) /* ty=Tensor[(1568, 256), float16] */;
  %775 = fn (%p0128: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p196: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, %p228: Tensor[(1, 256), float16] /* ty=Tensor[(1, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %210 = nn.dense(%p0128, %p196, units=256, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */;
    add(%210, %p228) /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16], Tensor[(1, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %776 = %775(%774, meta[relay.Constant][188] /* ty=Tensor[(256, 256), float16] */, meta[relay.Constant][189] /* ty=Tensor[(1, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %777 = fn (%p0127: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p195: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    %208 = reshape(%p0127, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %209 = cast(%208, dtype="float32") /* ty=Tensor[(49, 32, 256), float32] */;
    add(%p195, %209) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 256), float32] */;
  %778 = %777(%776, %736) /* ty=Tensor[(49, 32, 256), float32] */;
  %779 = fn (%p0232: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 1), float32] {
    mean(%p0232, axis=[-1], keepdims=True) /* ty=Tensor[(49, 32, 1), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 1), float32] */;
  %780 = %779(%778) /* ty=Tensor[(49, 32, 1), float32] */;
  %781 = fn (%p0126: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, %p194: Tensor[(49, 32, 1), float32] /* ty=Tensor[(49, 32, 1), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    subtract(%p0126, %p194) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32], Tensor[(49, 32, 1), float32]) -> Tensor[(49, 32, 256), float32] */;
  %782 = %781(%778, %780) /* ty=Tensor[(49, 32, 256), float32] */;
  %783 = fn (%p0125: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 1), float32] {
    %207 = power(%p0125, 2f /* ty=float32 span=/transformer/encoder/layers.1/norm1/Constant:0:0 */) /* ty=Tensor[(49, 32, 256), float32] */;
    mean(%207, axis=[-1], keepdims=True) /* ty=Tensor[(49, 32, 1), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 1), float32] */;
  %784 = %783(%782) /* ty=Tensor[(49, 32, 1), float32] */;
  %785 = fn (%p0124: Tensor[(49, 32, 1), float32] /* ty=Tensor[(49, 32, 1), float32] */, %p193: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, %p227: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p312: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    %203 = add(%p0124, 1e-05f /* ty=float32 span=/transformer/encoder/layers.1/norm1/Constant_1:0:0 */) /* ty=Tensor[(49, 32, 1), float32] */;
    %204 = rsqrt(%203) /* ty=Tensor[(49, 32, 1), float32] */;
    %205 = multiply(%p193, %204) /* ty=Tensor[(49, 32, 256), float32] */;
    %206 = multiply(%205, %p227) /* ty=Tensor[(49, 32, 256), float32] */;
    add(%206, %p312) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(49, 32, 1), float32], Tensor[(49, 32, 256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> Tensor[(49, 32, 256), float32] */;
  %786 = %785(%784, %782, meta[relay.Constant][190] /* ty=Tensor[(256), float32] span=/transformer/encoder/layers.1/norm1/Mul.transformer.encoder.layers.1.norm1.weight:0:0 */, meta[relay.Constant][191] /* ty=Tensor[(256), float32] span=/transformer/encoder/layers.1/norm1/Add_1.transformer.encoder.layers.1.norm1.bias:0:0 */) /* ty=Tensor[(49, 32, 256), float32] */;
  %787 = fn (%p0123: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %202 = reshape(%p0123, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float32] */;
    cast(%202, dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(1568, 256), float16] */;
  %788 = %787(%786) /* ty=Tensor[(1568, 256), float16] */;
  %789 = fn (%p0122: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p192: Tensor[(2048, 256), float16] /* ty=Tensor[(2048, 256), float16] */, Primitive=1) -> Tensor[(1568, 2048), float16] {
    nn.dense(%p0122, %p192, units=None, out_dtype="float16") /* ty=Tensor[(1568, 2048), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(2048, 256), float16]) -> Tensor[(1568, 2048), float16] */;
  %790 = %789(%788, meta[relay.Constant][192] /* ty=Tensor[(2048, 256), float16] */) /* ty=Tensor[(1568, 2048), float16] */;
  %791 = fn (%p0121: Tensor[(1568, 2048), float16] /* ty=Tensor[(1568, 2048), float16] */, %p191: Tensor[(2048), float16] /* ty=Tensor[(2048), float16] */, Primitive=1) -> Tensor[(1568, 2048), float16] {
    %199 = reshape(%p0121, newshape=[49, 32, 2048]) /* ty=Tensor[(49, 32, 2048), float16] */;
    %200 = add(%p191, %199) /* ty=Tensor[(49, 32, 2048), float16] */;
    %201 = nn.relu(%200) /* ty=Tensor[(49, 32, 2048), float16] */;
    reshape(%201, newshape=[-1, 2048]) /* ty=Tensor[(1568, 2048), float16] */
  } /* ty=fn (Tensor[(1568, 2048), float16], Tensor[(2048), float16]) -> Tensor[(1568, 2048), float16] */;
  %792 = %791(%790, meta[relay.Constant][193] /* ty=Tensor[(2048), float16] */) /* ty=Tensor[(1568, 2048), float16] */;
  %793 = fn (%p0120: Tensor[(1568, 2048), float16] /* ty=Tensor[(1568, 2048), float16] */, %p190: Tensor[(256, 2048), float16] /* ty=Tensor[(256, 2048), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p0120, %p190, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 2048), float16], Tensor[(256, 2048), float16]) -> Tensor[(1568, 256), float16] */;
  %794 = %793(%792, meta[relay.Constant][194] /* ty=Tensor[(256, 2048), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %795 = fn (%p0119: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p189: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, %p226: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    %196 = reshape(%p0119, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %197 = add(%p189, %196) /* ty=Tensor[(49, 32, 256), float16] */;
    %198 = cast(%197, dtype="float32") /* ty=Tensor[(49, 32, 256), float32] */;
    add(%p226, %198) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16], Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 256), float32] */;
  %796 = %795(%794, meta[relay.Constant][195] /* ty=Tensor[(256), float16] */, %786) /* ty=Tensor[(49, 32, 256), float32] */;
  %797 = fn (%p0233: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 1), float32] {
    mean(%p0233, axis=[-1], keepdims=True) /* ty=Tensor[(49, 32, 1), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 1), float32] */;
  %798 = %797(%796) /* ty=Tensor[(49, 32, 1), float32] */;
  %799 = fn (%p0118: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, %p188: Tensor[(49, 32, 1), float32] /* ty=Tensor[(49, 32, 1), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    subtract(%p0118, %p188) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32], Tensor[(49, 32, 1), float32]) -> Tensor[(49, 32, 256), float32] */;
  %800 = %799(%796, %798) /* ty=Tensor[(49, 32, 256), float32] */;
  %801 = fn (%p0117: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 1), float32] {
    %195 = power(%p0117, 2f /* ty=float32 span=/transformer/encoder/layers.1/norm2/Constant:0:0 */) /* ty=Tensor[(49, 32, 256), float32] */;
    mean(%195, axis=[-1], keepdims=True) /* ty=Tensor[(49, 32, 1), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 1), float32] */;
  %802 = %801(%800) /* ty=Tensor[(49, 32, 1), float32] */;
  %803 = fn (%p0116: Tensor[(49, 32, 1), float32] /* ty=Tensor[(49, 32, 1), float32] */, %p187: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, %p225: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p311: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    %191 = add(%p0116, 1e-05f /* ty=float32 span=/transformer/encoder/layers.1/norm2/Constant_1:0:0 */) /* ty=Tensor[(49, 32, 1), float32] */;
    %192 = rsqrt(%191) /* ty=Tensor[(49, 32, 1), float32] */;
    %193 = multiply(%p187, %192) /* ty=Tensor[(49, 32, 256), float32] */;
    %194 = multiply(%193, %p225) /* ty=Tensor[(49, 32, 256), float32] */;
    add(%194, %p311) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(49, 32, 1), float32], Tensor[(49, 32, 256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> Tensor[(49, 32, 256), float32] */;
  %804 = %803(%802, %800, meta[relay.Constant][196] /* ty=Tensor[(256), float32] span=/transformer/encoder/layers.1/norm2/Mul.transformer.encoder.layers.1.norm2.weight:0:0 */, meta[relay.Constant][197] /* ty=Tensor[(256), float32] span=/transformer/encoder/layers.1/norm2/Add_1.transformer.encoder.layers.1.norm2.bias:0:0 */) /* ty=Tensor[(49, 32, 256), float32] */;
  %805 = fn (%p0115: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, %p186: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    add(%p0115, %p186) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32], Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 256), float32] */;
  %806 = %805(%804, meta[relay.Constant][180] /* ty=Tensor[(49, 32, 256), float32] span=/transformer/Transpose_1:0:0 */) /* ty=Tensor[(49, 32, 256), float32] */;
  %807 = fn (%p0114: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %190 = reshape(%p0114, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float32] */;
    cast(%190, dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(1568, 256), float16] */;
  %808 = %807(%806) /* ty=Tensor[(1568, 256), float16] */;
  %809 = fn (%p0113: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p185: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p0113, %p185, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %810 = %809(%808, meta[relay.Constant][198] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %811 = fn (%p0112: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p184: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, %p224: float16 /* ty=float16 */, Primitive=1) -> Tensor[(256, 49, 32), float16] {
    %186 = reshape(%p0112, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %187 = add(%p184, %186) /* ty=Tensor[(49, 32, 256), float16] */;
    %188 = reshape(%187, newshape=[49, 256, 32]) /* ty=Tensor[(49, 256, 32), float16] */;
    %189 = transpose(%188, axes=[1, 0, 2]) /* ty=Tensor[(256, 49, 32), float16] */;
    divide(%189, %p224) /* ty=Tensor[(256, 49, 32), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16], float16) -> Tensor[(256, 49, 32), float16] */;
  %816 = fn (%p0236: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %815 = reshape(%p0236, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float32] */;
    cast(%815, dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(1568, 256), float16] */;
  %817 = %816(%806) /* ty=Tensor[(1568, 256), float16] */;
  %818 = fn (%p0235: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1184: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p0235, %p1184, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %819 = %818(%817, meta[relay.Constant][200] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %820 = fn (%p0234: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1183: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(256, 49, 32), float16] {
    %812 = reshape(%p0234, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %813 = add(%p1183, %812) /* ty=Tensor[(49, 32, 256), float16] */;
    %814 = reshape(%813, newshape=[49, 256, 32]) /* ty=Tensor[(49, 256, 32), float16] */;
    transpose(%814, axes=[1, 0, 2]) /* ty=Tensor[(256, 49, 32), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16]) -> Tensor[(256, 49, 32), float16] */;
  %821 = %811(%810, meta[relay.Constant][199] /* ty=Tensor[(256), float16] */, 5.65625f16 /* ty=float16 */) /* ty=Tensor[(256, 49, 32), float16] */;
  %822 = %820(%819, meta[relay.Constant][201] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(256, 49, 32), float16] */;
  %823 = fn (%p0111: Tensor[(256, 49, 32), float16] /* ty=Tensor[(256, 49, 32), float16] */, %p183: Tensor[(256, 49, 32), float16] /* ty=Tensor[(256, 49, 32), float16] */, Primitive=1) -> Tensor[(256, 49, 49), float16] {
    nn.batch_matmul(%p0111, %p183, out_dtype="float16", transpose_b=True) /* ty=Tensor[(256, 49, 49), float16] */
  } /* ty=fn (Tensor[(256, 49, 32), float16], Tensor[(256, 49, 32), float16]) -> Tensor[(256, 49, 49), float16] */;
  %824 = %823(%821, %822) /* ty=Tensor[(256, 49, 49), float16] */;
  %825 = fn (%p0110: Tensor[(256, 49, 49), float16] /* ty=Tensor[(256, 49, 49), float16] */, %p182: Tensor[(256, 1, 49), float16] /* ty=Tensor[(256, 1, 49), float16] */, Primitive=1) -> Tensor[(256, 49, 49), float32] {
    %184 = reshape(%p0110, newshape=[256, 49, 49]) /* ty=Tensor[(256, 49, 49), float16] */;
    %185 = add(%184, %p182) /* ty=Tensor[(256, 49, 49), float16] */;
    cast(%185, dtype="float32") /* ty=Tensor[(256, 49, 49), float32] */
  } /* ty=fn (Tensor[(256, 49, 49), float16], Tensor[(256, 1, 49), float16]) -> Tensor[(256, 49, 49), float32] */;
  %826 = %825(%824, meta[relay.Constant][202] /* ty=Tensor[(256, 1, 49), float16] */) /* ty=Tensor[(256, 49, 49), float32] */;
  %827 = fn (%p0109: Tensor[(256, 49, 49), float32] /* ty=Tensor[(256, 49, 49), float32] */, Primitive=1) -> Tensor[(256, 49, 49), float16] {
    %183 = nn.softmax(%p0109, axis=2) /* ty=Tensor[(256, 49, 49), float32] */;
    cast(%183, dtype="float16") /* ty=Tensor[(256, 49, 49), float16] */
  } /* ty=fn (Tensor[(256, 49, 49), float32]) -> Tensor[(256, 49, 49), float16] */;
  %832 = fn (%p0239: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %831 = reshape(%p0239, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float32] */;
    cast(%831, dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(1568, 256), float16] */;
  %833 = %832(%804) /* ty=Tensor[(1568, 256), float16] */;
  %834 = fn (%p0238: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1186: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p0238, %p1186, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %835 = %834(%833, meta[relay.Constant][203] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %836 = fn (%p0237: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1185: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(256, 32, 49), float16] {
    %828 = reshape(%p0237, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %829 = add(%p1185, %828) /* ty=Tensor[(49, 32, 256), float16] */;
    %830 = reshape(%829, newshape=[49, 256, 32]) /* ty=Tensor[(49, 256, 32), float16] */;
    transpose(%830, axes=[1, 2, 0]) /* ty=Tensor[(256, 32, 49), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16]) -> Tensor[(256, 32, 49), float16] */;
  %837 = %827(%826) /* ty=Tensor[(256, 49, 49), float16] */;
  %838 = %836(%835, meta[relay.Constant][204] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(256, 32, 49), float16] */;
  %839 = fn (%p0108: Tensor[(256, 49, 49), float16] /* ty=Tensor[(256, 49, 49), float16] */, %p181: Tensor[(256, 32, 49), float16] /* ty=Tensor[(256, 32, 49), float16] */, Primitive=1) -> Tensor[(256, 49, 32), float16] {
    nn.batch_matmul(%p0108, %p181, out_dtype="float16", transpose_b=True) /* ty=Tensor[(256, 49, 32), float16] */
  } /* ty=fn (Tensor[(256, 49, 49), float16], Tensor[(256, 32, 49), float16]) -> Tensor[(256, 49, 32), float16] */;
  %840 = %839(%837, %838) /* ty=Tensor[(256, 49, 32), float16] */;
  %841 = fn (%p0107: Tensor[(256, 49, 32), float16] /* ty=Tensor[(256, 49, 32), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %181 = reshape(%p0107, newshape=[256, 49, 32]) /* ty=Tensor[(256, 49, 32), float16] */;
    %182 = transpose(%181, axes=[1, 0, 2]) /* ty=Tensor[(49, 256, 32), float16] */;
    reshape(%182, newshape=[1568, 256]) /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(256, 49, 32), float16]) -> Tensor[(1568, 256), float16] */;
  %842 = %841(%840) /* ty=Tensor[(1568, 256), float16] */;
  %843 = fn (%p0106: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p180: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, %p223: Tensor[(1, 256), float16] /* ty=Tensor[(1, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %180 = nn.dense(%p0106, %p180, units=256, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */;
    add(%180, %p223) /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16], Tensor[(1, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %844 = %843(%842, meta[relay.Constant][205] /* ty=Tensor[(256, 256), float16] */, meta[relay.Constant][206] /* ty=Tensor[(1, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %845 = fn (%p0105: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p179: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    %178 = reshape(%p0105, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %179 = cast(%178, dtype="float32") /* ty=Tensor[(49, 32, 256), float32] */;
    add(%p179, %179) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 256), float32] */;
  %846 = %845(%844, %804) /* ty=Tensor[(49, 32, 256), float32] */;
  %847 = fn (%p0240: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 1), float32] {
    mean(%p0240, axis=[-1], keepdims=True) /* ty=Tensor[(49, 32, 1), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 1), float32] */;
  %848 = %847(%846) /* ty=Tensor[(49, 32, 1), float32] */;
  %849 = fn (%p0104: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, %p178: Tensor[(49, 32, 1), float32] /* ty=Tensor[(49, 32, 1), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    subtract(%p0104, %p178) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32], Tensor[(49, 32, 1), float32]) -> Tensor[(49, 32, 256), float32] */;
  %850 = %849(%846, %848) /* ty=Tensor[(49, 32, 256), float32] */;
  %851 = fn (%p0103: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 1), float32] {
    %177 = power(%p0103, 2f /* ty=float32 span=/transformer/encoder/layers.2/norm1/Constant:0:0 */) /* ty=Tensor[(49, 32, 256), float32] */;
    mean(%177, axis=[-1], keepdims=True) /* ty=Tensor[(49, 32, 1), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 1), float32] */;
  %852 = %851(%850) /* ty=Tensor[(49, 32, 1), float32] */;
  %853 = fn (%p0102: Tensor[(49, 32, 1), float32] /* ty=Tensor[(49, 32, 1), float32] */, %p177: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, %p222: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p310: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    %173 = add(%p0102, 1e-05f /* ty=float32 span=/transformer/encoder/layers.2/norm1/Constant_1:0:0 */) /* ty=Tensor[(49, 32, 1), float32] */;
    %174 = rsqrt(%173) /* ty=Tensor[(49, 32, 1), float32] */;
    %175 = multiply(%p177, %174) /* ty=Tensor[(49, 32, 256), float32] */;
    %176 = multiply(%175, %p222) /* ty=Tensor[(49, 32, 256), float32] */;
    add(%176, %p310) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(49, 32, 1), float32], Tensor[(49, 32, 256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> Tensor[(49, 32, 256), float32] */;
  %854 = %853(%852, %850, meta[relay.Constant][207] /* ty=Tensor[(256), float32] span=/transformer/encoder/layers.2/norm1/Mul.transformer.encoder.layers.2.norm1.weight:0:0 */, meta[relay.Constant][208] /* ty=Tensor[(256), float32] span=/transformer/encoder/layers.2/norm1/Add_1.transformer.encoder.layers.2.norm1.bias:0:0 */) /* ty=Tensor[(49, 32, 256), float32] */;
  %855 = fn (%p0101: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %172 = reshape(%p0101, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float32] */;
    cast(%172, dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(1568, 256), float16] */;
  %856 = %855(%854) /* ty=Tensor[(1568, 256), float16] */;
  %857 = fn (%p0100: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p176: Tensor[(2048, 256), float16] /* ty=Tensor[(2048, 256), float16] */, Primitive=1) -> Tensor[(1568, 2048), float16] {
    nn.dense(%p0100, %p176, units=None, out_dtype="float16") /* ty=Tensor[(1568, 2048), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(2048, 256), float16]) -> Tensor[(1568, 2048), float16] */;
  %858 = %857(%856, meta[relay.Constant][209] /* ty=Tensor[(2048, 256), float16] */) /* ty=Tensor[(1568, 2048), float16] */;
  %859 = fn (%p099: Tensor[(1568, 2048), float16] /* ty=Tensor[(1568, 2048), float16] */, %p175: Tensor[(2048), float16] /* ty=Tensor[(2048), float16] */, Primitive=1) -> Tensor[(1568, 2048), float16] {
    %169 = reshape(%p099, newshape=[49, 32, 2048]) /* ty=Tensor[(49, 32, 2048), float16] */;
    %170 = add(%p175, %169) /* ty=Tensor[(49, 32, 2048), float16] */;
    %171 = nn.relu(%170) /* ty=Tensor[(49, 32, 2048), float16] */;
    reshape(%171, newshape=[-1, 2048]) /* ty=Tensor[(1568, 2048), float16] */
  } /* ty=fn (Tensor[(1568, 2048), float16], Tensor[(2048), float16]) -> Tensor[(1568, 2048), float16] */;
  %860 = %859(%858, meta[relay.Constant][210] /* ty=Tensor[(2048), float16] */) /* ty=Tensor[(1568, 2048), float16] */;
  %861 = fn (%p098: Tensor[(1568, 2048), float16] /* ty=Tensor[(1568, 2048), float16] */, %p174: Tensor[(256, 2048), float16] /* ty=Tensor[(256, 2048), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p098, %p174, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 2048), float16], Tensor[(256, 2048), float16]) -> Tensor[(1568, 256), float16] */;
  %862 = %861(%860, meta[relay.Constant][211] /* ty=Tensor[(256, 2048), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %863 = fn (%p097: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p173: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, %p221: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    %166 = reshape(%p097, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %167 = add(%p173, %166) /* ty=Tensor[(49, 32, 256), float16] */;
    %168 = cast(%167, dtype="float32") /* ty=Tensor[(49, 32, 256), float32] */;
    add(%p221, %168) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16], Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 256), float32] */;
  %864 = %863(%862, meta[relay.Constant][212] /* ty=Tensor[(256), float16] */, %854) /* ty=Tensor[(49, 32, 256), float32] */;
  %865 = fn (%p0241: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 1), float32] {
    mean(%p0241, axis=[-1], keepdims=True) /* ty=Tensor[(49, 32, 1), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 1), float32] */;
  %866 = %865(%864) /* ty=Tensor[(49, 32, 1), float32] */;
  %867 = fn (%p096: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, %p172: Tensor[(49, 32, 1), float32] /* ty=Tensor[(49, 32, 1), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    subtract(%p096, %p172) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32], Tensor[(49, 32, 1), float32]) -> Tensor[(49, 32, 256), float32] */;
  %868 = %867(%864, %866) /* ty=Tensor[(49, 32, 256), float32] */;
  %869 = fn (%p095: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 1), float32] {
    %165 = power(%p095, 2f /* ty=float32 span=/transformer/encoder/layers.2/norm2/Constant:0:0 */) /* ty=Tensor[(49, 32, 256), float32] */;
    mean(%165, axis=[-1], keepdims=True) /* ty=Tensor[(49, 32, 1), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 1), float32] */;
  %870 = %869(%868) /* ty=Tensor[(49, 32, 1), float32] */;
  %871 = fn (%p094: Tensor[(49, 32, 1), float32] /* ty=Tensor[(49, 32, 1), float32] */, %p171: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, %p220: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p39: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    %161 = add(%p094, 1e-05f /* ty=float32 span=/transformer/encoder/layers.2/norm2/Constant_1:0:0 */) /* ty=Tensor[(49, 32, 1), float32] */;
    %162 = rsqrt(%161) /* ty=Tensor[(49, 32, 1), float32] */;
    %163 = multiply(%p171, %162) /* ty=Tensor[(49, 32, 256), float32] */;
    %164 = multiply(%163, %p220) /* ty=Tensor[(49, 32, 256), float32] */;
    add(%164, %p39) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(49, 32, 1), float32], Tensor[(49, 32, 256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> Tensor[(49, 32, 256), float32] */;
  %872 = %871(%870, %868, meta[relay.Constant][213] /* ty=Tensor[(256), float32] span=/transformer/encoder/layers.2/norm2/Mul.transformer.encoder.layers.2.norm2.weight:0:0 */, meta[relay.Constant][214] /* ty=Tensor[(256), float32] span=/transformer/encoder/layers.2/norm2/Add_1.transformer.encoder.layers.2.norm2.bias:0:0 */) /* ty=Tensor[(49, 32, 256), float32] */;
  %873 = fn (%p093: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, %p170: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    add(%p093, %p170) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32], Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 256), float32] */;
  %874 = %873(%872, meta[relay.Constant][180] /* ty=Tensor[(49, 32, 256), float32] span=/transformer/Transpose_1:0:0 */) /* ty=Tensor[(49, 32, 256), float32] */;
  %875 = fn (%p092: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %160 = reshape(%p092, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float32] */;
    cast(%160, dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(1568, 256), float16] */;
  %876 = %875(%874) /* ty=Tensor[(1568, 256), float16] */;
  %877 = fn (%p091: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p169: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p091, %p169, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %878 = %877(%876, meta[relay.Constant][215] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %879 = fn (%p090: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p168: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, %p219: float16 /* ty=float16 */, Primitive=1) -> Tensor[(256, 49, 32), float16] {
    %156 = reshape(%p090, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %157 = add(%p168, %156) /* ty=Tensor[(49, 32, 256), float16] */;
    %158 = reshape(%157, newshape=[49, 256, 32]) /* ty=Tensor[(49, 256, 32), float16] */;
    %159 = transpose(%158, axes=[1, 0, 2]) /* ty=Tensor[(256, 49, 32), float16] */;
    divide(%159, %p219) /* ty=Tensor[(256, 49, 32), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16], float16) -> Tensor[(256, 49, 32), float16] */;
  %884 = fn (%p0244: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %883 = reshape(%p0244, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float32] */;
    cast(%883, dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(1568, 256), float16] */;
  %885 = %884(%874) /* ty=Tensor[(1568, 256), float16] */;
  %886 = fn (%p0243: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1188: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p0243, %p1188, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %887 = %886(%885, meta[relay.Constant][217] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %888 = fn (%p0242: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1187: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(256, 49, 32), float16] {
    %880 = reshape(%p0242, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %881 = add(%p1187, %880) /* ty=Tensor[(49, 32, 256), float16] */;
    %882 = reshape(%881, newshape=[49, 256, 32]) /* ty=Tensor[(49, 256, 32), float16] */;
    transpose(%882, axes=[1, 0, 2]) /* ty=Tensor[(256, 49, 32), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16]) -> Tensor[(256, 49, 32), float16] */;
  %889 = %879(%878, meta[relay.Constant][216] /* ty=Tensor[(256), float16] */, 5.65625f16 /* ty=float16 */) /* ty=Tensor[(256, 49, 32), float16] */;
  %890 = %888(%887, meta[relay.Constant][218] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(256, 49, 32), float16] */;
  %891 = fn (%p089: Tensor[(256, 49, 32), float16] /* ty=Tensor[(256, 49, 32), float16] */, %p167: Tensor[(256, 49, 32), float16] /* ty=Tensor[(256, 49, 32), float16] */, Primitive=1) -> Tensor[(256, 49, 49), float16] {
    nn.batch_matmul(%p089, %p167, out_dtype="float16", transpose_b=True) /* ty=Tensor[(256, 49, 49), float16] */
  } /* ty=fn (Tensor[(256, 49, 32), float16], Tensor[(256, 49, 32), float16]) -> Tensor[(256, 49, 49), float16] */;
  %892 = %891(%889, %890) /* ty=Tensor[(256, 49, 49), float16] */;
  %893 = fn (%p088: Tensor[(256, 49, 49), float16] /* ty=Tensor[(256, 49, 49), float16] */, %p166: Tensor[(256, 1, 49), float16] /* ty=Tensor[(256, 1, 49), float16] */, Primitive=1) -> Tensor[(256, 49, 49), float32] {
    %154 = reshape(%p088, newshape=[256, 49, 49]) /* ty=Tensor[(256, 49, 49), float16] */;
    %155 = add(%154, %p166) /* ty=Tensor[(256, 49, 49), float16] */;
    cast(%155, dtype="float32") /* ty=Tensor[(256, 49, 49), float32] */
  } /* ty=fn (Tensor[(256, 49, 49), float16], Tensor[(256, 1, 49), float16]) -> Tensor[(256, 49, 49), float32] */;
  %894 = %893(%892, meta[relay.Constant][219] /* ty=Tensor[(256, 1, 49), float16] */) /* ty=Tensor[(256, 49, 49), float32] */;
  %895 = fn (%p087: Tensor[(256, 49, 49), float32] /* ty=Tensor[(256, 49, 49), float32] */, Primitive=1) -> Tensor[(256, 49, 49), float16] {
    %153 = nn.softmax(%p087, axis=2) /* ty=Tensor[(256, 49, 49), float32] */;
    cast(%153, dtype="float16") /* ty=Tensor[(256, 49, 49), float16] */
  } /* ty=fn (Tensor[(256, 49, 49), float32]) -> Tensor[(256, 49, 49), float16] */;
  %900 = fn (%p0247: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %899 = reshape(%p0247, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float32] */;
    cast(%899, dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(1568, 256), float16] */;
  %901 = %900(%872) /* ty=Tensor[(1568, 256), float16] */;
  %902 = fn (%p0246: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1190: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p0246, %p1190, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %903 = %902(%901, meta[relay.Constant][220] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %904 = fn (%p0245: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1189: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(256, 32, 49), float16] {
    %896 = reshape(%p0245, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %897 = add(%p1189, %896) /* ty=Tensor[(49, 32, 256), float16] */;
    %898 = reshape(%897, newshape=[49, 256, 32]) /* ty=Tensor[(49, 256, 32), float16] */;
    transpose(%898, axes=[1, 2, 0]) /* ty=Tensor[(256, 32, 49), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16]) -> Tensor[(256, 32, 49), float16] */;
  %905 = %895(%894) /* ty=Tensor[(256, 49, 49), float16] */;
  %906 = %904(%903, meta[relay.Constant][221] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(256, 32, 49), float16] */;
  %907 = fn (%p086: Tensor[(256, 49, 49), float16] /* ty=Tensor[(256, 49, 49), float16] */, %p165: Tensor[(256, 32, 49), float16] /* ty=Tensor[(256, 32, 49), float16] */, Primitive=1) -> Tensor[(256, 49, 32), float16] {
    nn.batch_matmul(%p086, %p165, out_dtype="float16", transpose_b=True) /* ty=Tensor[(256, 49, 32), float16] */
  } /* ty=fn (Tensor[(256, 49, 49), float16], Tensor[(256, 32, 49), float16]) -> Tensor[(256, 49, 32), float16] */;
  %908 = %907(%905, %906) /* ty=Tensor[(256, 49, 32), float16] */;
  %909 = fn (%p085: Tensor[(256, 49, 32), float16] /* ty=Tensor[(256, 49, 32), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %151 = reshape(%p085, newshape=[256, 49, 32]) /* ty=Tensor[(256, 49, 32), float16] */;
    %152 = transpose(%151, axes=[1, 0, 2]) /* ty=Tensor[(49, 256, 32), float16] */;
    reshape(%152, newshape=[1568, 256]) /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(256, 49, 32), float16]) -> Tensor[(1568, 256), float16] */;
  %910 = %909(%908) /* ty=Tensor[(1568, 256), float16] */;
  %911 = fn (%p084: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p164: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, %p218: Tensor[(1, 256), float16] /* ty=Tensor[(1, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %150 = nn.dense(%p084, %p164, units=256, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */;
    add(%150, %p218) /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16], Tensor[(1, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %912 = %911(%910, meta[relay.Constant][222] /* ty=Tensor[(256, 256), float16] */, meta[relay.Constant][223] /* ty=Tensor[(1, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %913 = fn (%p083: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p163: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    %148 = reshape(%p083, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %149 = cast(%148, dtype="float32") /* ty=Tensor[(49, 32, 256), float32] */;
    add(%p163, %149) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 256), float32] */;
  %914 = %913(%912, %872) /* ty=Tensor[(49, 32, 256), float32] */;
  %915 = fn (%p0248: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 1), float32] {
    mean(%p0248, axis=[-1], keepdims=True) /* ty=Tensor[(49, 32, 1), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 1), float32] */;
  %916 = %915(%914) /* ty=Tensor[(49, 32, 1), float32] */;
  %917 = fn (%p082: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, %p162: Tensor[(49, 32, 1), float32] /* ty=Tensor[(49, 32, 1), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    subtract(%p082, %p162) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32], Tensor[(49, 32, 1), float32]) -> Tensor[(49, 32, 256), float32] */;
  %918 = %917(%914, %916) /* ty=Tensor[(49, 32, 256), float32] */;
  %919 = fn (%p081: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 1), float32] {
    %147 = power(%p081, 2f /* ty=float32 span=/transformer/encoder/layers.3/norm1/Constant:0:0 */) /* ty=Tensor[(49, 32, 256), float32] */;
    mean(%147, axis=[-1], keepdims=True) /* ty=Tensor[(49, 32, 1), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 1), float32] */;
  %920 = %919(%918) /* ty=Tensor[(49, 32, 1), float32] */;
  %921 = fn (%p080: Tensor[(49, 32, 1), float32] /* ty=Tensor[(49, 32, 1), float32] */, %p161: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, %p217: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p38: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    %143 = add(%p080, 1e-05f /* ty=float32 span=/transformer/encoder/layers.3/norm1/Constant_1:0:0 */) /* ty=Tensor[(49, 32, 1), float32] */;
    %144 = rsqrt(%143) /* ty=Tensor[(49, 32, 1), float32] */;
    %145 = multiply(%p161, %144) /* ty=Tensor[(49, 32, 256), float32] */;
    %146 = multiply(%145, %p217) /* ty=Tensor[(49, 32, 256), float32] */;
    add(%146, %p38) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(49, 32, 1), float32], Tensor[(49, 32, 256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> Tensor[(49, 32, 256), float32] */;
  %922 = %921(%920, %918, meta[relay.Constant][224] /* ty=Tensor[(256), float32] span=/transformer/encoder/layers.3/norm1/Mul.transformer.encoder.layers.3.norm1.weight:0:0 */, meta[relay.Constant][225] /* ty=Tensor[(256), float32] span=/transformer/encoder/layers.3/norm1/Add_1.transformer.encoder.layers.3.norm1.bias:0:0 */) /* ty=Tensor[(49, 32, 256), float32] */;
  %923 = fn (%p079: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %142 = reshape(%p079, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float32] */;
    cast(%142, dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(1568, 256), float16] */;
  %924 = %923(%922) /* ty=Tensor[(1568, 256), float16] */;
  %925 = fn (%p078: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p160: Tensor[(2048, 256), float16] /* ty=Tensor[(2048, 256), float16] */, Primitive=1) -> Tensor[(1568, 2048), float16] {
    nn.dense(%p078, %p160, units=None, out_dtype="float16") /* ty=Tensor[(1568, 2048), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(2048, 256), float16]) -> Tensor[(1568, 2048), float16] */;
  %926 = %925(%924, meta[relay.Constant][226] /* ty=Tensor[(2048, 256), float16] */) /* ty=Tensor[(1568, 2048), float16] */;
  %927 = fn (%p077: Tensor[(1568, 2048), float16] /* ty=Tensor[(1568, 2048), float16] */, %p159: Tensor[(2048), float16] /* ty=Tensor[(2048), float16] */, Primitive=1) -> Tensor[(1568, 2048), float16] {
    %139 = reshape(%p077, newshape=[49, 32, 2048]) /* ty=Tensor[(49, 32, 2048), float16] */;
    %140 = add(%p159, %139) /* ty=Tensor[(49, 32, 2048), float16] */;
    %141 = nn.relu(%140) /* ty=Tensor[(49, 32, 2048), float16] */;
    reshape(%141, newshape=[-1, 2048]) /* ty=Tensor[(1568, 2048), float16] */
  } /* ty=fn (Tensor[(1568, 2048), float16], Tensor[(2048), float16]) -> Tensor[(1568, 2048), float16] */;
  %928 = %927(%926, meta[relay.Constant][227] /* ty=Tensor[(2048), float16] */) /* ty=Tensor[(1568, 2048), float16] */;
  %929 = fn (%p076: Tensor[(1568, 2048), float16] /* ty=Tensor[(1568, 2048), float16] */, %p158: Tensor[(256, 2048), float16] /* ty=Tensor[(256, 2048), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p076, %p158, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 2048), float16], Tensor[(256, 2048), float16]) -> Tensor[(1568, 256), float16] */;
  %930 = %929(%928, meta[relay.Constant][228] /* ty=Tensor[(256, 2048), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %931 = fn (%p075: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p157: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, %p216: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    %136 = reshape(%p075, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %137 = add(%p157, %136) /* ty=Tensor[(49, 32, 256), float16] */;
    %138 = cast(%137, dtype="float32") /* ty=Tensor[(49, 32, 256), float32] */;
    add(%p216, %138) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16], Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 256), float32] */;
  %932 = %931(%930, meta[relay.Constant][229] /* ty=Tensor[(256), float16] */, %922) /* ty=Tensor[(49, 32, 256), float32] */;
  %933 = fn (%p0249: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 1), float32] {
    mean(%p0249, axis=[-1], keepdims=True) /* ty=Tensor[(49, 32, 1), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 1), float32] */;
  %934 = %933(%932) /* ty=Tensor[(49, 32, 1), float32] */;
  %935 = fn (%p074: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, %p156: Tensor[(49, 32, 1), float32] /* ty=Tensor[(49, 32, 1), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    subtract(%p074, %p156) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32], Tensor[(49, 32, 1), float32]) -> Tensor[(49, 32, 256), float32] */;
  %936 = %935(%932, %934) /* ty=Tensor[(49, 32, 256), float32] */;
  %937 = fn (%p073: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 1), float32] {
    %135 = power(%p073, 2f /* ty=float32 span=/transformer/encoder/layers.3/norm2/Constant:0:0 */) /* ty=Tensor[(49, 32, 256), float32] */;
    mean(%135, axis=[-1], keepdims=True) /* ty=Tensor[(49, 32, 1), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 1), float32] */;
  %938 = %937(%936) /* ty=Tensor[(49, 32, 1), float32] */;
  %939 = fn (%p072: Tensor[(49, 32, 1), float32] /* ty=Tensor[(49, 32, 1), float32] */, %p155: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, %p215: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p37: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    %131 = add(%p072, 1e-05f /* ty=float32 span=/transformer/encoder/layers.3/norm2/Constant_1:0:0 */) /* ty=Tensor[(49, 32, 1), float32] */;
    %132 = rsqrt(%131) /* ty=Tensor[(49, 32, 1), float32] */;
    %133 = multiply(%p155, %132) /* ty=Tensor[(49, 32, 256), float32] */;
    %134 = multiply(%133, %p215) /* ty=Tensor[(49, 32, 256), float32] */;
    add(%134, %p37) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(49, 32, 1), float32], Tensor[(49, 32, 256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> Tensor[(49, 32, 256), float32] */;
  %940 = %939(%938, %936, meta[relay.Constant][230] /* ty=Tensor[(256), float32] span=/transformer/encoder/layers.3/norm2/Mul.transformer.encoder.layers.3.norm2.weight:0:0 */, meta[relay.Constant][231] /* ty=Tensor[(256), float32] span=/transformer/encoder/layers.3/norm2/Add_1.transformer.encoder.layers.3.norm2.bias:0:0 */) /* ty=Tensor[(49, 32, 256), float32] */;
  %941 = fn (%p071: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, %p154: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    add(%p071, %p154) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32], Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 256), float32] */;
  %942 = %941(%940, meta[relay.Constant][180] /* ty=Tensor[(49, 32, 256), float32] span=/transformer/Transpose_1:0:0 */) /* ty=Tensor[(49, 32, 256), float32] */;
  %943 = fn (%p070: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %130 = reshape(%p070, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float32] */;
    cast(%130, dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(1568, 256), float16] */;
  %944 = %943(%942) /* ty=Tensor[(1568, 256), float16] */;
  %945 = fn (%p069: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p153: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p069, %p153, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %946 = %945(%944, meta[relay.Constant][232] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %947 = fn (%p068: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p152: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, %p214: float16 /* ty=float16 */, Primitive=1) -> Tensor[(256, 49, 32), float16] {
    %126 = reshape(%p068, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %127 = add(%p152, %126) /* ty=Tensor[(49, 32, 256), float16] */;
    %128 = reshape(%127, newshape=[49, 256, 32]) /* ty=Tensor[(49, 256, 32), float16] */;
    %129 = transpose(%128, axes=[1, 0, 2]) /* ty=Tensor[(256, 49, 32), float16] */;
    divide(%129, %p214) /* ty=Tensor[(256, 49, 32), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16], float16) -> Tensor[(256, 49, 32), float16] */;
  %952 = fn (%p0252: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %951 = reshape(%p0252, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float32] */;
    cast(%951, dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(1568, 256), float16] */;
  %953 = %952(%942) /* ty=Tensor[(1568, 256), float16] */;
  %954 = fn (%p0251: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1192: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p0251, %p1192, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %955 = %954(%953, meta[relay.Constant][234] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %956 = fn (%p0250: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1191: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(256, 49, 32), float16] {
    %948 = reshape(%p0250, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %949 = add(%p1191, %948) /* ty=Tensor[(49, 32, 256), float16] */;
    %950 = reshape(%949, newshape=[49, 256, 32]) /* ty=Tensor[(49, 256, 32), float16] */;
    transpose(%950, axes=[1, 0, 2]) /* ty=Tensor[(256, 49, 32), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16]) -> Tensor[(256, 49, 32), float16] */;
  %957 = %947(%946, meta[relay.Constant][233] /* ty=Tensor[(256), float16] */, 5.65625f16 /* ty=float16 */) /* ty=Tensor[(256, 49, 32), float16] */;
  %958 = %956(%955, meta[relay.Constant][235] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(256, 49, 32), float16] */;
  %959 = fn (%p067: Tensor[(256, 49, 32), float16] /* ty=Tensor[(256, 49, 32), float16] */, %p151: Tensor[(256, 49, 32), float16] /* ty=Tensor[(256, 49, 32), float16] */, Primitive=1) -> Tensor[(256, 49, 49), float16] {
    nn.batch_matmul(%p067, %p151, out_dtype="float16", transpose_b=True) /* ty=Tensor[(256, 49, 49), float16] */
  } /* ty=fn (Tensor[(256, 49, 32), float16], Tensor[(256, 49, 32), float16]) -> Tensor[(256, 49, 49), float16] */;
  %960 = %959(%957, %958) /* ty=Tensor[(256, 49, 49), float16] */;
  %961 = fn (%p066: Tensor[(256, 49, 49), float16] /* ty=Tensor[(256, 49, 49), float16] */, %p150: Tensor[(256, 1, 49), float16] /* ty=Tensor[(256, 1, 49), float16] */, Primitive=1) -> Tensor[(256, 49, 49), float32] {
    %124 = reshape(%p066, newshape=[256, 49, 49]) /* ty=Tensor[(256, 49, 49), float16] */;
    %125 = add(%124, %p150) /* ty=Tensor[(256, 49, 49), float16] */;
    cast(%125, dtype="float32") /* ty=Tensor[(256, 49, 49), float32] */
  } /* ty=fn (Tensor[(256, 49, 49), float16], Tensor[(256, 1, 49), float16]) -> Tensor[(256, 49, 49), float32] */;
  %962 = %961(%960, meta[relay.Constant][236] /* ty=Tensor[(256, 1, 49), float16] */) /* ty=Tensor[(256, 49, 49), float32] */;
  %963 = fn (%p065: Tensor[(256, 49, 49), float32] /* ty=Tensor[(256, 49, 49), float32] */, Primitive=1) -> Tensor[(256, 49, 49), float16] {
    %123 = nn.softmax(%p065, axis=2) /* ty=Tensor[(256, 49, 49), float32] */;
    cast(%123, dtype="float16") /* ty=Tensor[(256, 49, 49), float16] */
  } /* ty=fn (Tensor[(256, 49, 49), float32]) -> Tensor[(256, 49, 49), float16] */;
  %968 = fn (%p0255: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %967 = reshape(%p0255, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float32] */;
    cast(%967, dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(1568, 256), float16] */;
  %969 = %968(%940) /* ty=Tensor[(1568, 256), float16] */;
  %970 = fn (%p0254: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1194: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p0254, %p1194, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %971 = %970(%969, meta[relay.Constant][237] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %972 = fn (%p0253: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1193: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(256, 32, 49), float16] {
    %964 = reshape(%p0253, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %965 = add(%p1193, %964) /* ty=Tensor[(49, 32, 256), float16] */;
    %966 = reshape(%965, newshape=[49, 256, 32]) /* ty=Tensor[(49, 256, 32), float16] */;
    transpose(%966, axes=[1, 2, 0]) /* ty=Tensor[(256, 32, 49), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16]) -> Tensor[(256, 32, 49), float16] */;
  %973 = %963(%962) /* ty=Tensor[(256, 49, 49), float16] */;
  %974 = %972(%971, meta[relay.Constant][238] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(256, 32, 49), float16] */;
  %975 = fn (%p064: Tensor[(256, 49, 49), float16] /* ty=Tensor[(256, 49, 49), float16] */, %p149: Tensor[(256, 32, 49), float16] /* ty=Tensor[(256, 32, 49), float16] */, Primitive=1) -> Tensor[(256, 49, 32), float16] {
    nn.batch_matmul(%p064, %p149, out_dtype="float16", transpose_b=True) /* ty=Tensor[(256, 49, 32), float16] */
  } /* ty=fn (Tensor[(256, 49, 49), float16], Tensor[(256, 32, 49), float16]) -> Tensor[(256, 49, 32), float16] */;
  %976 = %975(%973, %974) /* ty=Tensor[(256, 49, 32), float16] */;
  %977 = fn (%p063: Tensor[(256, 49, 32), float16] /* ty=Tensor[(256, 49, 32), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %121 = reshape(%p063, newshape=[256, 49, 32]) /* ty=Tensor[(256, 49, 32), float16] */;
    %122 = transpose(%121, axes=[1, 0, 2]) /* ty=Tensor[(49, 256, 32), float16] */;
    reshape(%122, newshape=[1568, 256]) /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(256, 49, 32), float16]) -> Tensor[(1568, 256), float16] */;
  %978 = %977(%976) /* ty=Tensor[(1568, 256), float16] */;
  %979 = fn (%p062: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p148: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, %p213: Tensor[(1, 256), float16] /* ty=Tensor[(1, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %120 = nn.dense(%p062, %p148, units=256, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */;
    add(%120, %p213) /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16], Tensor[(1, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %980 = %979(%978, meta[relay.Constant][239] /* ty=Tensor[(256, 256), float16] */, meta[relay.Constant][240] /* ty=Tensor[(1, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %981 = fn (%p061: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p147: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    %118 = reshape(%p061, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %119 = cast(%118, dtype="float32") /* ty=Tensor[(49, 32, 256), float32] */;
    add(%p147, %119) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 256), float32] */;
  %982 = %981(%980, %940) /* ty=Tensor[(49, 32, 256), float32] */;
  %983 = fn (%p0256: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 1), float32] {
    mean(%p0256, axis=[-1], keepdims=True) /* ty=Tensor[(49, 32, 1), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 1), float32] */;
  %984 = %983(%982) /* ty=Tensor[(49, 32, 1), float32] */;
  %985 = fn (%p060: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, %p146: Tensor[(49, 32, 1), float32] /* ty=Tensor[(49, 32, 1), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    subtract(%p060, %p146) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32], Tensor[(49, 32, 1), float32]) -> Tensor[(49, 32, 256), float32] */;
  %986 = %985(%982, %984) /* ty=Tensor[(49, 32, 256), float32] */;
  %987 = fn (%p059: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 1), float32] {
    %117 = power(%p059, 2f /* ty=float32 span=/transformer/encoder/layers.4/norm1/Constant:0:0 */) /* ty=Tensor[(49, 32, 256), float32] */;
    mean(%117, axis=[-1], keepdims=True) /* ty=Tensor[(49, 32, 1), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 1), float32] */;
  %988 = %987(%986) /* ty=Tensor[(49, 32, 1), float32] */;
  %989 = fn (%p058: Tensor[(49, 32, 1), float32] /* ty=Tensor[(49, 32, 1), float32] */, %p145: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, %p212: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p36: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    %113 = add(%p058, 1e-05f /* ty=float32 span=/transformer/encoder/layers.4/norm1/Constant_1:0:0 */) /* ty=Tensor[(49, 32, 1), float32] */;
    %114 = rsqrt(%113) /* ty=Tensor[(49, 32, 1), float32] */;
    %115 = multiply(%p145, %114) /* ty=Tensor[(49, 32, 256), float32] */;
    %116 = multiply(%115, %p212) /* ty=Tensor[(49, 32, 256), float32] */;
    add(%116, %p36) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(49, 32, 1), float32], Tensor[(49, 32, 256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> Tensor[(49, 32, 256), float32] */;
  %990 = %989(%988, %986, meta[relay.Constant][241] /* ty=Tensor[(256), float32] span=/transformer/encoder/layers.4/norm1/Mul.transformer.encoder.layers.4.norm1.weight:0:0 */, meta[relay.Constant][242] /* ty=Tensor[(256), float32] span=/transformer/encoder/layers.4/norm1/Add_1.transformer.encoder.layers.4.norm1.bias:0:0 */) /* ty=Tensor[(49, 32, 256), float32] */;
  %991 = fn (%p057: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %112 = reshape(%p057, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float32] */;
    cast(%112, dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(1568, 256), float16] */;
  %992 = %991(%990) /* ty=Tensor[(1568, 256), float16] */;
  %993 = fn (%p056: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p144: Tensor[(2048, 256), float16] /* ty=Tensor[(2048, 256), float16] */, Primitive=1) -> Tensor[(1568, 2048), float16] {
    nn.dense(%p056, %p144, units=None, out_dtype="float16") /* ty=Tensor[(1568, 2048), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(2048, 256), float16]) -> Tensor[(1568, 2048), float16] */;
  %994 = %993(%992, meta[relay.Constant][243] /* ty=Tensor[(2048, 256), float16] */) /* ty=Tensor[(1568, 2048), float16] */;
  %995 = fn (%p055: Tensor[(1568, 2048), float16] /* ty=Tensor[(1568, 2048), float16] */, %p143: Tensor[(2048), float16] /* ty=Tensor[(2048), float16] */, Primitive=1) -> Tensor[(1568, 2048), float16] {
    %109 = reshape(%p055, newshape=[49, 32, 2048]) /* ty=Tensor[(49, 32, 2048), float16] */;
    %110 = add(%p143, %109) /* ty=Tensor[(49, 32, 2048), float16] */;
    %111 = nn.relu(%110) /* ty=Tensor[(49, 32, 2048), float16] */;
    reshape(%111, newshape=[-1, 2048]) /* ty=Tensor[(1568, 2048), float16] */
  } /* ty=fn (Tensor[(1568, 2048), float16], Tensor[(2048), float16]) -> Tensor[(1568, 2048), float16] */;
  %996 = %995(%994, meta[relay.Constant][244] /* ty=Tensor[(2048), float16] */) /* ty=Tensor[(1568, 2048), float16] */;
  %997 = fn (%p054: Tensor[(1568, 2048), float16] /* ty=Tensor[(1568, 2048), float16] */, %p142: Tensor[(256, 2048), float16] /* ty=Tensor[(256, 2048), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p054, %p142, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 2048), float16], Tensor[(256, 2048), float16]) -> Tensor[(1568, 256), float16] */;
  %998 = %997(%996, meta[relay.Constant][245] /* ty=Tensor[(256, 2048), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %999 = fn (%p053: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p141: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, %p211: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    %106 = reshape(%p053, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %107 = add(%p141, %106) /* ty=Tensor[(49, 32, 256), float16] */;
    %108 = cast(%107, dtype="float32") /* ty=Tensor[(49, 32, 256), float32] */;
    add(%p211, %108) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16], Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 256), float32] */;
  %1000 = %999(%998, meta[relay.Constant][246] /* ty=Tensor[(256), float16] */, %990) /* ty=Tensor[(49, 32, 256), float32] */;
  %1001 = fn (%p0257: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 1), float32] {
    mean(%p0257, axis=[-1], keepdims=True) /* ty=Tensor[(49, 32, 1), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 1), float32] */;
  %1002 = %1001(%1000) /* ty=Tensor[(49, 32, 1), float32] */;
  %1003 = fn (%p052: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, %p140: Tensor[(49, 32, 1), float32] /* ty=Tensor[(49, 32, 1), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    subtract(%p052, %p140) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32], Tensor[(49, 32, 1), float32]) -> Tensor[(49, 32, 256), float32] */;
  %1004 = %1003(%1000, %1002) /* ty=Tensor[(49, 32, 256), float32] */;
  %1005 = fn (%p051: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 1), float32] {
    %105 = power(%p051, 2f /* ty=float32 span=/transformer/encoder/layers.4/norm2/Constant:0:0 */) /* ty=Tensor[(49, 32, 256), float32] */;
    mean(%105, axis=[-1], keepdims=True) /* ty=Tensor[(49, 32, 1), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 1), float32] */;
  %1006 = %1005(%1004) /* ty=Tensor[(49, 32, 1), float32] */;
  %1007 = fn (%p050: Tensor[(49, 32, 1), float32] /* ty=Tensor[(49, 32, 1), float32] */, %p139: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, %p210: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p35: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    %101 = add(%p050, 1e-05f /* ty=float32 span=/transformer/encoder/layers.4/norm2/Constant_1:0:0 */) /* ty=Tensor[(49, 32, 1), float32] */;
    %102 = rsqrt(%101) /* ty=Tensor[(49, 32, 1), float32] */;
    %103 = multiply(%p139, %102) /* ty=Tensor[(49, 32, 256), float32] */;
    %104 = multiply(%103, %p210) /* ty=Tensor[(49, 32, 256), float32] */;
    add(%104, %p35) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(49, 32, 1), float32], Tensor[(49, 32, 256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> Tensor[(49, 32, 256), float32] */;
  %1008 = %1007(%1006, %1004, meta[relay.Constant][247] /* ty=Tensor[(256), float32] span=/transformer/encoder/layers.4/norm2/Mul.transformer.encoder.layers.4.norm2.weight:0:0 */, meta[relay.Constant][248] /* ty=Tensor[(256), float32] span=/transformer/encoder/layers.4/norm2/Add_1.transformer.encoder.layers.4.norm2.bias:0:0 */) /* ty=Tensor[(49, 32, 256), float32] */;
  %1009 = fn (%p049: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, %p138: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    add(%p049, %p138) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32], Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 256), float32] */;
  %1010 = %1009(%1008, meta[relay.Constant][180] /* ty=Tensor[(49, 32, 256), float32] span=/transformer/Transpose_1:0:0 */) /* ty=Tensor[(49, 32, 256), float32] */;
  %1011 = fn (%p048: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %100 = reshape(%p048, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float32] */;
    cast(%100, dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(1568, 256), float16] */;
  %1012 = %1011(%1010) /* ty=Tensor[(1568, 256), float16] */;
  %1013 = fn (%p047: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p137: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p047, %p137, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %1014 = %1013(%1012, meta[relay.Constant][249] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %1015 = fn (%p046: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p136: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, %p29: float16 /* ty=float16 */, Primitive=1) -> Tensor[(256, 49, 32), float16] {
    %96 = reshape(%p046, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %97 = add(%p136, %96) /* ty=Tensor[(49, 32, 256), float16] */;
    %98 = reshape(%97, newshape=[49, 256, 32]) /* ty=Tensor[(49, 256, 32), float16] */;
    %99 = transpose(%98, axes=[1, 0, 2]) /* ty=Tensor[(256, 49, 32), float16] */;
    divide(%99, %p29) /* ty=Tensor[(256, 49, 32), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16], float16) -> Tensor[(256, 49, 32), float16] */;
  %1020 = fn (%p0260: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %1019 = reshape(%p0260, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float32] */;
    cast(%1019, dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(1568, 256), float16] */;
  %1021 = %1020(%1010) /* ty=Tensor[(1568, 256), float16] */;
  %1022 = fn (%p0259: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1196: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p0259, %p1196, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %1023 = %1022(%1021, meta[relay.Constant][251] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %1024 = fn (%p0258: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1195: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(256, 49, 32), float16] {
    %1016 = reshape(%p0258, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %1017 = add(%p1195, %1016) /* ty=Tensor[(49, 32, 256), float16] */;
    %1018 = reshape(%1017, newshape=[49, 256, 32]) /* ty=Tensor[(49, 256, 32), float16] */;
    transpose(%1018, axes=[1, 0, 2]) /* ty=Tensor[(256, 49, 32), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16]) -> Tensor[(256, 49, 32), float16] */;
  %1025 = %1015(%1014, meta[relay.Constant][250] /* ty=Tensor[(256), float16] */, 5.65625f16 /* ty=float16 */) /* ty=Tensor[(256, 49, 32), float16] */;
  %1026 = %1024(%1023, meta[relay.Constant][252] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(256, 49, 32), float16] */;
  %1027 = fn (%p045: Tensor[(256, 49, 32), float16] /* ty=Tensor[(256, 49, 32), float16] */, %p135: Tensor[(256, 49, 32), float16] /* ty=Tensor[(256, 49, 32), float16] */, Primitive=1) -> Tensor[(256, 49, 49), float16] {
    nn.batch_matmul(%p045, %p135, out_dtype="float16", transpose_b=True) /* ty=Tensor[(256, 49, 49), float16] */
  } /* ty=fn (Tensor[(256, 49, 32), float16], Tensor[(256, 49, 32), float16]) -> Tensor[(256, 49, 49), float16] */;
  %1028 = %1027(%1025, %1026) /* ty=Tensor[(256, 49, 49), float16] */;
  %1029 = fn (%p044: Tensor[(256, 49, 49), float16] /* ty=Tensor[(256, 49, 49), float16] */, %p134: Tensor[(256, 1, 49), float16] /* ty=Tensor[(256, 1, 49), float16] */, Primitive=1) -> Tensor[(256, 49, 49), float32] {
    %94 = reshape(%p044, newshape=[256, 49, 49]) /* ty=Tensor[(256, 49, 49), float16] */;
    %95 = add(%94, %p134) /* ty=Tensor[(256, 49, 49), float16] */;
    cast(%95, dtype="float32") /* ty=Tensor[(256, 49, 49), float32] */
  } /* ty=fn (Tensor[(256, 49, 49), float16], Tensor[(256, 1, 49), float16]) -> Tensor[(256, 49, 49), float32] */;
  %1030 = %1029(%1028, meta[relay.Constant][253] /* ty=Tensor[(256, 1, 49), float16] */) /* ty=Tensor[(256, 49, 49), float32] */;
  %1031 = fn (%p043: Tensor[(256, 49, 49), float32] /* ty=Tensor[(256, 49, 49), float32] */, Primitive=1) -> Tensor[(256, 49, 49), float16] {
    %93 = nn.softmax(%p043, axis=2) /* ty=Tensor[(256, 49, 49), float32] */;
    cast(%93, dtype="float16") /* ty=Tensor[(256, 49, 49), float16] */
  } /* ty=fn (Tensor[(256, 49, 49), float32]) -> Tensor[(256, 49, 49), float16] */;
  %1036 = fn (%p0263: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %1035 = reshape(%p0263, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float32] */;
    cast(%1035, dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(1568, 256), float16] */;
  %1037 = %1036(%1008) /* ty=Tensor[(1568, 256), float16] */;
  %1038 = fn (%p0262: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1198: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p0262, %p1198, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %1039 = %1038(%1037, meta[relay.Constant][254] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %1040 = fn (%p0261: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1197: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(256, 32, 49), float16] {
    %1032 = reshape(%p0261, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %1033 = add(%p1197, %1032) /* ty=Tensor[(49, 32, 256), float16] */;
    %1034 = reshape(%1033, newshape=[49, 256, 32]) /* ty=Tensor[(49, 256, 32), float16] */;
    transpose(%1034, axes=[1, 2, 0]) /* ty=Tensor[(256, 32, 49), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16]) -> Tensor[(256, 32, 49), float16] */;
  %1041 = %1031(%1030) /* ty=Tensor[(256, 49, 49), float16] */;
  %1042 = %1040(%1039, meta[relay.Constant][255] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(256, 32, 49), float16] */;
  %1043 = fn (%p042: Tensor[(256, 49, 49), float16] /* ty=Tensor[(256, 49, 49), float16] */, %p133: Tensor[(256, 32, 49), float16] /* ty=Tensor[(256, 32, 49), float16] */, Primitive=1) -> Tensor[(256, 49, 32), float16] {
    nn.batch_matmul(%p042, %p133, out_dtype="float16", transpose_b=True) /* ty=Tensor[(256, 49, 32), float16] */
  } /* ty=fn (Tensor[(256, 49, 49), float16], Tensor[(256, 32, 49), float16]) -> Tensor[(256, 49, 32), float16] */;
  %1044 = %1043(%1041, %1042) /* ty=Tensor[(256, 49, 32), float16] */;
  %1045 = fn (%p041: Tensor[(256, 49, 32), float16] /* ty=Tensor[(256, 49, 32), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %91 = reshape(%p041, newshape=[256, 49, 32]) /* ty=Tensor[(256, 49, 32), float16] */;
    %92 = transpose(%91, axes=[1, 0, 2]) /* ty=Tensor[(49, 256, 32), float16] */;
    reshape(%92, newshape=[1568, 256]) /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(256, 49, 32), float16]) -> Tensor[(1568, 256), float16] */;
  %1046 = %1045(%1044) /* ty=Tensor[(1568, 256), float16] */;
  %1047 = fn (%p040: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p132: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, %p28: Tensor[(1, 256), float16] /* ty=Tensor[(1, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %90 = nn.dense(%p040, %p132, units=256, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */;
    add(%90, %p28) /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16], Tensor[(1, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %1048 = %1047(%1046, meta[relay.Constant][256] /* ty=Tensor[(256, 256), float16] */, meta[relay.Constant][257] /* ty=Tensor[(1, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %1049 = fn (%p039: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p131: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    %88 = reshape(%p039, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %89 = cast(%88, dtype="float32") /* ty=Tensor[(49, 32, 256), float32] */;
    add(%p131, %89) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 256), float32] */;
  %1050 = %1049(%1048, %1008) /* ty=Tensor[(49, 32, 256), float32] */;
  %1051 = fn (%p0264: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 1), float32] {
    mean(%p0264, axis=[-1], keepdims=True) /* ty=Tensor[(49, 32, 1), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 1), float32] */;
  %1052 = %1051(%1050) /* ty=Tensor[(49, 32, 1), float32] */;
  %1053 = fn (%p038: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, %p130: Tensor[(49, 32, 1), float32] /* ty=Tensor[(49, 32, 1), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    subtract(%p038, %p130) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32], Tensor[(49, 32, 1), float32]) -> Tensor[(49, 32, 256), float32] */;
  %1054 = %1053(%1050, %1052) /* ty=Tensor[(49, 32, 256), float32] */;
  %1055 = fn (%p037: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 1), float32] {
    %87 = power(%p037, 2f /* ty=float32 span=/transformer/encoder/layers.5/norm1/Constant:0:0 */) /* ty=Tensor[(49, 32, 256), float32] */;
    mean(%87, axis=[-1], keepdims=True) /* ty=Tensor[(49, 32, 1), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 1), float32] */;
  %1056 = %1055(%1054) /* ty=Tensor[(49, 32, 1), float32] */;
  %1057 = fn (%p036: Tensor[(49, 32, 1), float32] /* ty=Tensor[(49, 32, 1), float32] */, %p129: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, %p27: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p34: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    %83 = add(%p036, 1e-05f /* ty=float32 span=/transformer/encoder/layers.5/norm1/Constant_1:0:0 */) /* ty=Tensor[(49, 32, 1), float32] */;
    %84 = rsqrt(%83) /* ty=Tensor[(49, 32, 1), float32] */;
    %85 = multiply(%p129, %84) /* ty=Tensor[(49, 32, 256), float32] */;
    %86 = multiply(%85, %p27) /* ty=Tensor[(49, 32, 256), float32] */;
    add(%86, %p34) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(49, 32, 1), float32], Tensor[(49, 32, 256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> Tensor[(49, 32, 256), float32] */;
  %1058 = %1057(%1056, %1054, meta[relay.Constant][258] /* ty=Tensor[(256), float32] span=/transformer/encoder/layers.5/norm1/Mul.transformer.encoder.layers.5.norm1.weight:0:0 */, meta[relay.Constant][259] /* ty=Tensor[(256), float32] span=/transformer/encoder/layers.5/norm1/Add_1.transformer.encoder.layers.5.norm1.bias:0:0 */) /* ty=Tensor[(49, 32, 256), float32] */;
  %1059 = fn (%p035: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %82 = reshape(%p035, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float32] */;
    cast(%82, dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(1568, 256), float16] */;
  %1060 = %1059(%1058) /* ty=Tensor[(1568, 256), float16] */;
  %1061 = fn (%p034: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p128: Tensor[(2048, 256), float16] /* ty=Tensor[(2048, 256), float16] */, Primitive=1) -> Tensor[(1568, 2048), float16] {
    nn.dense(%p034, %p128, units=None, out_dtype="float16") /* ty=Tensor[(1568, 2048), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(2048, 256), float16]) -> Tensor[(1568, 2048), float16] */;
  %1062 = %1061(%1060, meta[relay.Constant][260] /* ty=Tensor[(2048, 256), float16] */) /* ty=Tensor[(1568, 2048), float16] */;
  %1063 = fn (%p033: Tensor[(1568, 2048), float16] /* ty=Tensor[(1568, 2048), float16] */, %p127: Tensor[(2048), float16] /* ty=Tensor[(2048), float16] */, Primitive=1) -> Tensor[(1568, 2048), float16] {
    %79 = reshape(%p033, newshape=[49, 32, 2048]) /* ty=Tensor[(49, 32, 2048), float16] */;
    %80 = add(%p127, %79) /* ty=Tensor[(49, 32, 2048), float16] */;
    %81 = nn.relu(%80) /* ty=Tensor[(49, 32, 2048), float16] */;
    reshape(%81, newshape=[-1, 2048]) /* ty=Tensor[(1568, 2048), float16] */
  } /* ty=fn (Tensor[(1568, 2048), float16], Tensor[(2048), float16]) -> Tensor[(1568, 2048), float16] */;
  %1064 = %1063(%1062, meta[relay.Constant][261] /* ty=Tensor[(2048), float16] */) /* ty=Tensor[(1568, 2048), float16] */;
  %1065 = fn (%p032: Tensor[(1568, 2048), float16] /* ty=Tensor[(1568, 2048), float16] */, %p126: Tensor[(256, 2048), float16] /* ty=Tensor[(256, 2048), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p032, %p126, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 2048), float16], Tensor[(256, 2048), float16]) -> Tensor[(1568, 256), float16] */;
  %1066 = %1065(%1064, meta[relay.Constant][262] /* ty=Tensor[(256, 2048), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %1067 = fn (%p031: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p125: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, %p26: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    %76 = reshape(%p031, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %77 = add(%p125, %76) /* ty=Tensor[(49, 32, 256), float16] */;
    %78 = cast(%77, dtype="float32") /* ty=Tensor[(49, 32, 256), float32] */;
    add(%p26, %78) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16], Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 256), float32] */;
  %1068 = %1067(%1066, meta[relay.Constant][263] /* ty=Tensor[(256), float16] */, %1058) /* ty=Tensor[(49, 32, 256), float32] */;
  %1069 = fn (%p0265: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 1), float32] {
    mean(%p0265, axis=[-1], keepdims=True) /* ty=Tensor[(49, 32, 1), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 1), float32] */;
  %1070 = %1069(%1068) /* ty=Tensor[(49, 32, 1), float32] */;
  %1071 = fn (%p030: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, %p124: Tensor[(49, 32, 1), float32] /* ty=Tensor[(49, 32, 1), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    subtract(%p030, %p124) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32], Tensor[(49, 32, 1), float32]) -> Tensor[(49, 32, 256), float32] */;
  %1072 = %1071(%1068, %1070) /* ty=Tensor[(49, 32, 256), float32] */;
  %1073 = fn (%p029: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 1), float32] {
    %75 = power(%p029, 2f /* ty=float32 span=/transformer/encoder/layers.5/norm2/Constant:0:0 */) /* ty=Tensor[(49, 32, 256), float32] */;
    mean(%75, axis=[-1], keepdims=True) /* ty=Tensor[(49, 32, 1), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 1), float32] */;
  %1074 = %1073(%1072) /* ty=Tensor[(49, 32, 1), float32] */;
  %1075 = fn (%p028: Tensor[(49, 32, 1), float32] /* ty=Tensor[(49, 32, 1), float32] */, %p123: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, %p25: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p33: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    %71 = add(%p028, 1e-05f /* ty=float32 span=/transformer/encoder/layers.5/norm2/Constant_1:0:0 */) /* ty=Tensor[(49, 32, 1), float32] */;
    %72 = rsqrt(%71) /* ty=Tensor[(49, 32, 1), float32] */;
    %73 = multiply(%p123, %72) /* ty=Tensor[(49, 32, 256), float32] */;
    %74 = multiply(%73, %p25) /* ty=Tensor[(49, 32, 256), float32] */;
    add(%74, %p33) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(49, 32, 1), float32], Tensor[(49, 32, 256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> Tensor[(49, 32, 256), float32] */;
  %1076 = %1075(%1074, %1072, meta[relay.Constant][264] /* ty=Tensor[(256), float32] span=/transformer/encoder/layers.5/norm2/Mul.transformer.encoder.layers.5.norm2.weight:0:0 */, meta[relay.Constant][265] /* ty=Tensor[(256), float32] span=/transformer/encoder/layers.5/norm2/Add_1.transformer.encoder.layers.5.norm2.bias:0:0 */) /* ty=Tensor[(49, 32, 256), float32] */;
  %1077 = fn (%p027: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, %p122: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(49, 32, 256), float32] {
    add(%p027, %p122) /* ty=Tensor[(49, 32, 256), float32] */
  } /* ty=fn (Tensor[(49, 32, 256), float32], Tensor[(49, 32, 256), float32]) -> Tensor[(49, 32, 256), float32] */;
  %1078 = %1077(%1076, meta[relay.Constant][180] /* ty=Tensor[(49, 32, 256), float32] span=/transformer/Transpose_1:0:0 */) /* ty=Tensor[(49, 32, 256), float32] */;
  %1079 = fn (%p026: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %70 = reshape(%p026, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float32] */;
    cast(%70, dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(1568, 256), float16] */;
  %1080 = %1079(%1078) /* ty=Tensor[(1568, 256), float16] */;
  %1081 = fn (%p025: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p120: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p025, %p120, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %1082 = %1081(%1080, meta[relay.Constant][266] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %1083 = fn (%p024: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p119: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(256, 49, 32), float16] {
    %67 = reshape(%p024, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %68 = add(%p119, %67) /* ty=Tensor[(49, 32, 256), float16] */;
    %69 = reshape(%68, newshape=[49, 256, 32]) /* ty=Tensor[(49, 256, 32), float16] */;
    transpose(%69, axes=[1, 0, 2]) /* ty=Tensor[(256, 49, 32), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16]) -> Tensor[(256, 49, 32), float16] */;
  %1084 = %1083(%1082, meta[relay.Constant][267] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(256, 49, 32), float16] */;
  %1085 = fn (%p023: Tensor[(256, 100, 32), float16] /* ty=Tensor[(256, 100, 32), float16] */, %p118: Tensor[(256, 49, 32), float16] /* ty=Tensor[(256, 49, 32), float16] */, Primitive=1) -> Tensor[(256, 100, 49), float16] {
    nn.batch_matmul(%p023, %p118, out_dtype="float16", transpose_b=True) /* ty=Tensor[(256, 100, 49), float16] */
  } /* ty=fn (Tensor[(256, 100, 32), float16], Tensor[(256, 49, 32), float16]) -> Tensor[(256, 100, 49), float16] */;
  %1086 = %1085(meta[relay.Constant][0] /* ty=Tensor[(256, 100, 32), float16] */, %1084) /* ty=Tensor[(256, 100, 49), float16] */;
  %1087 = fn (%p022: Tensor[(256, 100, 49), float16] /* ty=Tensor[(256, 100, 49), float16] */, %p117: Tensor[(256, 1, 49), float16] /* ty=Tensor[(256, 1, 49), float16] */, Primitive=1) -> Tensor[(256, 100, 49), float32] {
    %65 = reshape(%p022, newshape=[256, 100, 49]) /* ty=Tensor[(256, 100, 49), float16] */;
    %66 = add(%65, %p117) /* ty=Tensor[(256, 100, 49), float16] */;
    cast(%66, dtype="float32") /* ty=Tensor[(256, 100, 49), float32] */
  } /* ty=fn (Tensor[(256, 100, 49), float16], Tensor[(256, 1, 49), float16]) -> Tensor[(256, 100, 49), float32] */;
  %1088 = %1087(%1086, meta[relay.Constant][268] /* ty=Tensor[(256, 1, 49), float16] */) /* ty=Tensor[(256, 100, 49), float32] */;
  %1089 = fn (%p021: Tensor[(256, 100, 49), float32] /* ty=Tensor[(256, 100, 49), float32] */, Primitive=1) -> Tensor[(256, 100, 49), float16] {
    %64 = nn.softmax(%p021, axis=2) /* ty=Tensor[(256, 100, 49), float32] */;
    cast(%64, dtype="float16") /* ty=Tensor[(256, 100, 49), float16] */
  } /* ty=fn (Tensor[(256, 100, 49), float32]) -> Tensor[(256, 100, 49), float16] */;
  %1094 = fn (%p0268: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %1093 = reshape(%p0268, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float32] */;
    cast(%1093, dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(1568, 256), float16] */;
  %1095 = %1094(%1076) /* ty=Tensor[(1568, 256), float16] */;
  %1096 = fn (%p0267: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1200: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p0267, %p1200, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %1097 = %1096(%1095, meta[relay.Constant][269] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %1098 = fn (%p0266: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1199: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(256, 32, 49), float16] {
    %1090 = reshape(%p0266, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %1091 = add(%p1199, %1090) /* ty=Tensor[(49, 32, 256), float16] */;
    %1092 = reshape(%1091, newshape=[49, 256, 32]) /* ty=Tensor[(49, 256, 32), float16] */;
    transpose(%1092, axes=[1, 2, 0]) /* ty=Tensor[(256, 32, 49), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16]) -> Tensor[(256, 32, 49), float16] */;
  %1099 = %1089(%1088) /* ty=Tensor[(256, 100, 49), float16] */;
  %1100 = %1098(%1097, meta[relay.Constant][270] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(256, 32, 49), float16] */;
  %1101 = fn (%p020: Tensor[(256, 100, 49), float16] /* ty=Tensor[(256, 100, 49), float16] */, %p116: Tensor[(256, 32, 49), float16] /* ty=Tensor[(256, 32, 49), float16] */, Primitive=1) -> Tensor[(256, 100, 32), float16] {
    nn.batch_matmul(%p020, %p116, out_dtype="float16", transpose_b=True) /* ty=Tensor[(256, 100, 32), float16] */
  } /* ty=fn (Tensor[(256, 100, 49), float16], Tensor[(256, 32, 49), float16]) -> Tensor[(256, 100, 32), float16] */;
  %1102 = %1101(%1099, %1100) /* ty=Tensor[(256, 100, 32), float16] */;
  %1103 = fn (%p019: Tensor[(256, 100, 32), float16] /* ty=Tensor[(256, 100, 32), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %62 = reshape(%p019, newshape=[256, 100, 32]) /* ty=Tensor[(256, 100, 32), float16] */;
    %63 = transpose(%62, axes=[1, 0, 2]) /* ty=Tensor[(100, 256, 32), float16] */;
    reshape(%63, newshape=[3200, 256]) /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(256, 100, 32), float16]) -> Tensor[(3200, 256), float16] */;
  %1104 = %1103(%1102) /* ty=Tensor[(3200, 256), float16] */;
  %1105 = fn (%p018: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p115: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, %p24: Tensor[(1, 256), float16] /* ty=Tensor[(1, 256), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %61 = nn.dense(%p018, %p115, units=256, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */;
    add(%61, %p24) /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256, 256), float16], Tensor[(1, 256), float16]) -> Tensor[(3200, 256), float16] */;
  %1106 = %1105(%1104, meta[relay.Constant][271] /* ty=Tensor[(256, 256), float16] */, meta[relay.Constant][272] /* ty=Tensor[(1, 256), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1107 = fn (%p017: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p114: Tensor[(100, 32, 256), float16] /* ty=Tensor[(100, 32, 256), float16] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %59 = reshape(%p017, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %60 = add(%p114, %59) /* ty=Tensor[(100, 32, 256), float16] */;
    cast(%60, dtype="float32") /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(100, 32, 256), float16]) -> Tensor[(100, 32, 256), float32] */;
  %1108 = %1107(%1106, meta[relay.Constant][273] /* ty=Tensor[(100, 32, 256), float16] */) /* ty=Tensor[(100, 32, 256), float32] */;
  %1109 = fn (%p0269: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    mean(%p0269, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1110 = %1109(%1108) /* ty=Tensor[(100, 32, 1), float32] */;
  %1111 = fn (%p016: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p113: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    subtract(%p016, %p113) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32], Tensor[(100, 32, 1), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1112 = %1111(%1108, %1110) /* ty=Tensor[(100, 32, 256), float32] */;
  %1113 = fn (%p015: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    %58 = power(%p015, 2f /* ty=float32 span=/transformer/decoder/layers.0/norm2/Constant:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
    mean(%58, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1114 = %1113(%1112) /* ty=Tensor[(100, 32, 1), float32] */;
  %1115 = fn (%p014: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, %p112: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p23: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p32: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %54 = add(%p014, 1e-05f /* ty=float32 span=/transformer/decoder/layers.0/norm2/Constant_1:0:0 */) /* ty=Tensor[(100, 32, 1), float32] */;
    %55 = rsqrt(%54) /* ty=Tensor[(100, 32, 1), float32] */;
    %56 = multiply(%p112, %55) /* ty=Tensor[(100, 32, 256), float32] */;
    %57 = multiply(%56, %p23) /* ty=Tensor[(100, 32, 256), float32] */;
    add(%57, %p32) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 1), float32], Tensor[(100, 32, 256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1116 = %1115(%1114, %1112, meta[relay.Constant][274] /* ty=Tensor[(256), float32] span=/transformer/decoder/layers.0/norm2/Mul.transformer.decoder.layers.0.norm2.weight:0:0 */, meta[relay.Constant][275] /* ty=Tensor[(256), float32] span=/transformer/decoder/layers.0/norm2/Add_1.transformer.decoder.layers.0.norm2.bias:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
  %1117 = fn (%p013: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %53 = reshape(%p013, newshape=[-1, 256]) /* ty=Tensor[(3200, 256), float32] */;
    cast(%53, dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(3200, 256), float16] */;
  %1118 = %1117(%1116) /* ty=Tensor[(3200, 256), float16] */;
  %1119 = fn (%p012: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p110: Tensor[(2048, 256), float16] /* ty=Tensor[(2048, 256), float16] */, Primitive=1) -> Tensor[(3200, 2048), float16] {
    nn.dense(%p012, %p110, units=None, out_dtype="float16") /* ty=Tensor[(3200, 2048), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(2048, 256), float16]) -> Tensor[(3200, 2048), float16] */;
  %1120 = %1119(%1118, meta[relay.Constant][276] /* ty=Tensor[(2048, 256), float16] */) /* ty=Tensor[(3200, 2048), float16] */;
  %1121 = fn (%p011: Tensor[(3200, 2048), float16] /* ty=Tensor[(3200, 2048), float16] */, %p19: Tensor[(2048), float16] /* ty=Tensor[(2048), float16] */, Primitive=1) -> Tensor[(3200, 2048), float16] {
    %50 = reshape(%p011, newshape=[100, 32, 2048]) /* ty=Tensor[(100, 32, 2048), float16] */;
    %51 = add(%p19, %50) /* ty=Tensor[(100, 32, 2048), float16] */;
    %52 = nn.relu(%51) /* ty=Tensor[(100, 32, 2048), float16] */;
    reshape(%52, newshape=[-1, 2048]) /* ty=Tensor[(3200, 2048), float16] */
  } /* ty=fn (Tensor[(3200, 2048), float16], Tensor[(2048), float16]) -> Tensor[(3200, 2048), float16] */;
  %1122 = %1121(%1120, meta[relay.Constant][277] /* ty=Tensor[(2048), float16] */) /* ty=Tensor[(3200, 2048), float16] */;
  %1123 = fn (%p010: Tensor[(3200, 2048), float16] /* ty=Tensor[(3200, 2048), float16] */, %p18: Tensor[(256, 2048), float16] /* ty=Tensor[(256, 2048), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    nn.dense(%p010, %p18, units=None, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 2048), float16], Tensor[(256, 2048), float16]) -> Tensor[(3200, 256), float16] */;
  %1124 = %1123(%1122, meta[relay.Constant][278] /* ty=Tensor[(256, 2048), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1125 = fn (%p09: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p17: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, %p22: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %47 = reshape(%p09, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %48 = add(%p17, %47) /* ty=Tensor[(100, 32, 256), float16] */;
    %49 = cast(%48, dtype="float32") /* ty=Tensor[(100, 32, 256), float32] */;
    add(%p22, %49) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256), float16], Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1126 = %1125(%1124, meta[relay.Constant][279] /* ty=Tensor[(256), float16] */, %1116) /* ty=Tensor[(100, 32, 256), float32] */;
  %1127 = fn (%p0270: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    mean(%p0270, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1128 = %1127(%1126) /* ty=Tensor[(100, 32, 1), float32] */;
  %1129 = fn (%p08: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p16: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    subtract(%p08, %p16) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32], Tensor[(100, 32, 1), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1130 = %1129(%1126, %1128) /* ty=Tensor[(100, 32, 256), float32] */;
  %1131 = fn (%p07: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    %46 = power(%p07, 2f /* ty=float32 span=/transformer/decoder/layers.0/norm3/Constant:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
    mean(%46, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1132 = %1131(%1130) /* ty=Tensor[(100, 32, 1), float32] */;
  %1133 = fn (%p06: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, %p15: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p21: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p31: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %42 = add(%p06, 1e-05f /* ty=float32 span=/transformer/decoder/layers.0/norm3/Constant_1:0:0 */) /* ty=Tensor[(100, 32, 1), float32] */;
    %43 = rsqrt(%42) /* ty=Tensor[(100, 32, 1), float32] */;
    %44 = multiply(%p15, %43) /* ty=Tensor[(100, 32, 256), float32] */;
    %45 = multiply(%44, %p21) /* ty=Tensor[(100, 32, 256), float32] */;
    add(%45, %p31) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 1), float32], Tensor[(100, 32, 256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1134 = %1133(%1132, %1130, meta[relay.Constant][280] /* ty=Tensor[(256), float32] span=/transformer/decoder/layers.0/norm3/Mul.transformer.decoder.layers.0.norm3.weight:0:0 */, meta[relay.Constant][281] /* ty=Tensor[(256), float32] span=/transformer/decoder/layers.0/norm3/Add_1.transformer.decoder.layers.0.norm3.bias:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
  %1135 = fn (%p0271: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    mean(%p0271, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1136 = %1135(%1134) /* ty=Tensor[(100, 32, 1), float32] */;
  %1137 = fn (%p05: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p14: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    subtract(%p05, %p14) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32], Tensor[(100, 32, 1), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1138 = %1137(%1134, %1136) /* ty=Tensor[(100, 32, 256), float32] */;
  %1139 = fn (%p04: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p2: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p3: Tensor[(256), float32] /* ty=Tensor[(256), Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %41 = power(%p04, 2f /* ty=float32 span=/transformer/decoder/norm/Constant:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
    %42 = mean(%41, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
    %3 = add(%42, 1e-05f /* ty=float32 span=/transformer/decoder/norm/Constant_1:0:0 */) /* ty=Tensor[(100, 32, 1), float32] */;
    %4 = rsqrt(%3) /* ty=Tensor[(100, 32, 1), float32] */;
    %5 = multiply(%p04, %4) /* ty=Tensor[(100, 32, 256), float32] */;
    %6 = multiply(%5, %p2) /* ty=Tensor[(100, 32, 256), float32] */;
    %7 = add(%6, %p3) /* ty=Tensor[(100, 32, 256), float32] */;
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1189 = fn (%p0308: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p1227: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    add(%p0308, %p1227) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32], Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1190 = %1189(%1134, meta[relay.Constant][284] /* ty=Tensor[(100, 32, 256), float32] span=/transformer/Tile:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
  %1191 = fn (%p0307: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1188 = reshape(%p0307, newshape=[-1, 256]) /* ty=Tensor[(3200, 256), float32] */;
    cast(%1188, dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(3200, 256), float16] */;
  %1192 = %1191(%1190) /* ty=Tensor[(3200, 256), float16] */;
  %1193 = fn (%p0306: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1226: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    nn.dense(%p0306, %p1226, units=None, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(3200, 256), float16] */;
  %1194 = %1193(%1192, meta[relay.Constant][285] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1195 = fn (%p0305: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1225: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, %p299: float16 /* ty=float16 */, Primitive=1) -> Tensor[(256, 100, 32), float16] {
    %1184 = reshape(%p0305, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %1185 = add(%p1225, %1184) /* ty=Tensor[(100, 32, 256), float16] */;
    %1186 = reshape(%1185, newshape=[100, 256, 32]) /* ty=Tensor[(100, 256, 32), float16] */;
    %1187 = transpose(%1186, axes=[1, 0, 2]) /* ty=Tensor[(256, 100, 32), float16] */;
    divide(%1187, %p299) /* ty=Tensor[(256, 100, 32), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256), float16], float16) -> Tensor[(256, 100, 32), float16] */;
  %1200 = fn (%p0311: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1199 = reshape(%p0311, newshape=[-1, 256]) /* ty=Tensor[(3200, 256), float32] */;
    cast(%1199, dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(3200, 256), float16] */;
  %1201 = %1200(%1190) /* ty=Tensor[(3200, 256), float16] */;
  %1202 = fn (%p0310: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1229: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    nn.dense(%p0310, %p1229, units=None, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(3200, 256), float16] */;
  %1203 = %1202(%1201, meta[relay.Constant][287] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1204 = fn (%p0309: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1228: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(256, 100, 32), float16] {
    %1196 = reshape(%p0309, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %1197 = add(%p1228, %1196) /* ty=Tensor[(100, 32, 256), float16] */;
    %1198 = reshape(%1197, newshape=[100, 256, 32]) /* ty=Tensor[(100, 256, 32), float16] */;
    transpose(%1198, axes=[1, 0, 2]) /* ty=Tensor[(256, 100, 32), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256), float16]) -> Tensor[(256, 100, 32), float16] */;
  %1205 = %1195(%1194, meta[relay.Constant][286] /* ty=Tensor[(256), float16] */, 5.65625f16 /* ty=float16 */) /* ty=Tensor[(256, 100, 32), float16] */;
  %1206 = %1204(%1203, meta[relay.Constant][288] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(256, 100, 32), float16] */;
  %1207 = fn (%p0304: Tensor[(256, 100, 32), float16] /* ty=Tensor[(256, 100, 32), float16] */, %p1224: Tensor[(256, 100, 32), float16] /* ty=Tensor[(256, 100, 32), float16] */, Primitive=1) -> Tensor[(256, 100, 100), float16] {
    nn.batch_matmul(%p0304, %p1224, out_dtype="float16", transpose_b=True) /* ty=Tensor[(256, 100, 100), float16] */
  } /* ty=fn (Tensor[(256, 100, 32), float16], Tensor[(256, 100, 32), float16]) -> Tensor[(256, 100, 100), float16] */;
  %1208 = %1207(%1205, %1206) /* ty=Tensor[(256, 100, 100), float16] */;
  %1209 = fn (%p0303: Tensor[(256, 100, 100), float16] /* ty=Tensor[(256, 100, 100), float16] */, Primitive=1) -> Tensor[(256, 100, 100), float32] {
    %1183 = reshape(%p0303, newshape=[256, 100, 100]) /* ty=Tensor[(256, 100, 100), float16] */;
    cast(%1183, dtype="float32") /* ty=Tensor[(256, 100, 100), float32] */
  } /* ty=fn (Tensor[(256, 100, 100), float16]) -> Tensor[(256, 100, 100), float32] */;
  %1210 = %1209(%1208) /* ty=Tensor[(256, 100, 100), float32] */;
  %1211 = fn (%p0302: Tensor[(256, 100, 100), float32] /* ty=Tensor[(256, 100, 100), float32] */, Primitive=1) -> Tensor[(256, 100, 100), float16] {
    %1182 = nn.softmax(%p0302, axis=2) /* ty=Tensor[(256, 100, 100), float32] */;
    cast(%1182, dtype="float16") /* ty=Tensor[(256, 100, 100), float16] */
  } /* ty=fn (Tensor[(256, 100, 100), float32]) -> Tensor[(256, 100, 100), float16] */;
  %1216 = fn (%p0314: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1215 = reshape(%p0314, newshape=[-1, 256]) /* ty=Tensor[(3200, 256), float32] */;
    cast(%1215, dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(3200, 256), float16] */;
  %1217 = %1216(%1134) /* ty=Tensor[(3200, 256), float16] */;
  %1218 = fn (%p0313: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1231: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    nn.dense(%p0313, %p1231, units=None, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(3200, 256), float16] */;
  %1219 = %1218(%1217, meta[relay.Constant][289] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1220 = fn (%p0312: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1230: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(256, 32, 100), float16] {
    %1212 = reshape(%p0312, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %1213 = add(%p1230, %1212) /* ty=Tensor[(100, 32, 256), float16] */;
    %1214 = reshape(%1213, newshape=[100, 256, 32]) /* ty=Tensor[(100, 256, 32), float16] */;
    transpose(%1214, axes=[1, 2, 0]) /* ty=Tensor[(256, 32, 100), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256), float16]) -> Tensor[(256, 32, 100), float16] */;
  %1221 = %1211(%1210) /* ty=Tensor[(256, 100, 100), float16] */;
  %1222 = %1220(%1219, meta[relay.Constant][290] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(256, 32, 100), float16] */;
  %1223 = fn (%p0301: Tensor[(256, 100, 100), float16] /* ty=Tensor[(256, 100, 100), float16] */, %p1223: Tensor[(256, 32, 100), float16] /* ty=Tensor[(256, 32, 100), float16] */, Primitive=1) -> Tensor[(256, 100, 32), float16] {
    nn.batch_matmul(%p0301, %p1223, out_dtype="float16", transpose_b=True) /* ty=Tensor[(256, 100, 32), float16] */
  } /* ty=fn (Tensor[(256, 100, 100), float16], Tensor[(256, 32, 100), float16]) -> Tensor[(256, 100, 32), float16] */;
  %1224 = %1223(%1221, %1222) /* ty=Tensor[(256, 100, 32), float16] */;
  %1225 = fn (%p0300: Tensor[(256, 100, 32), float16] /* ty=Tensor[(256, 100, 32), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1180 = reshape(%p0300, newshape=[256, 100, 32]) /* ty=Tensor[(256, 100, 32), float16] */;
    %1181 = transpose(%1180, axes=[1, 0, 2]) /* ty=Tensor[(100, 256, 32), float16] */;
    reshape(%1181, newshape=[3200, 256]) /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(256, 100, 32), float16]) -> Tensor[(3200, 256), float16] */;
  %1226 = %1225(%1224) /* ty=Tensor[(3200, 256), float16] */;
  %1227 = fn (%p0299: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1222: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, %p298: Tensor[(1, 256), float16] /* ty=Tensor[(1, 256), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1179 = nn.dense(%p0299, %p1222, units=256, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */;
    add(%1179, %p298) /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256, 256), float16], Tensor[(1, 256), float16]) -> Tensor[(3200, 256), float16] */;
  %1228 = %1227(%1226, meta[relay.Constant][291] /* ty=Tensor[(256, 256), float16] */, meta[relay.Constant][292] /* ty=Tensor[(1, 256), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1229 = fn (%p0298: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1221: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %1177 = reshape(%p0298, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %1178 = cast(%1177, dtype="float32") /* ty=Tensor[(100, 32, 256), float32] */;
    add(%p1221, %1178) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1230 = %1229(%1228, %1134) /* ty=Tensor[(100, 32, 256), float32] */;
  %1231 = fn (%p0315: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    mean(%p0315, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1232 = %1231(%1230) /* ty=Tensor[(100, 32, 1), float32] */;
  %1233 = fn (%p0297: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p1220: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    subtract(%p0297, %p1220) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32], Tensor[(100, 32, 1), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1234 = %1233(%1230, %1232) /* ty=Tensor[(100, 32, 256), float32] */;
  %1235 = fn (%p0296: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    %1176 = power(%p0296, 2f /* ty=float32 span=/transformer/decoder/layers.1/norm1/Constant:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
    mean(%1176, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1236 = %1235(%1234) /* ty=Tensor[(100, 32, 1), float32] */;
  %1237 = fn (%p0295: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, %p1219: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p297: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p371: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %1172 = add(%p0295, 1e-05f /* ty=float32 span=/transformer/decoder/layers.1/norm1/Constant_1:0:0 */) /* ty=Tensor[(100, 32, 1), float32] */;
    %1173 = rsqrt(%1172) /* ty=Tensor[(100, 32, 1), float32] */;
    %1174 = multiply(%p1219, %1173) /* ty=Tensor[(100, 32, 256), float32] */;
    %1175 = multiply(%1174, %p297) /* ty=Tensor[(100, 32, 256), float32] */;
    add(%1175, %p371) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 1), float32], Tensor[(100, 32, 256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1238 = %1237(%1236, %1234, meta[relay.Constant][293] /* ty=Tensor[(256), float32] span=/transformer/decoder/layers.1/norm1/Mul.transformer.decoder.layers.1.norm1.weight:0:0 */, meta[relay.Constant][294] /* ty=Tensor[(256), float32] span=/transformer/decoder/layers.1/norm1/Add_1.transformer.decoder.layers.1.norm1.bias:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
  %1239 = fn (%p0294: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p1218: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1170 = add(%p0294, %p1218) /* ty=Tensor[(100, 32, 256), float32] */;
    %1171 = reshape(%1170, newshape=[-1, 256]) /* ty=Tensor[(3200, 256), float32] */;
    cast(%1171, dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(100, 32, 256), float32], Tensor[(100, 32, 256), float32]) -> Tensor[(3200, 256), float16] */;
  %1240 = %1239(%1238, meta[relay.Constant][284] /* ty=Tensor[(100, 32, 256), float32] span=/transformer/Tile:0:0 */) /* ty=Tensor[(3200, 256), float16] */;
  %1241 = fn (%p0293: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1217: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    nn.dense(%p0293, %p1217, units=None, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(3200, 256), float16] */;
  %1242 = %1241(%1240, meta[relay.Constant][295] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1243 = fn (%p0292: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1216: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, %p296: float16 /* ty=float16 */, Primitive=1) -> Tensor[(256, 100, 32), float16] {
    %1166 = reshape(%p0292, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %1167 = add(%p1216, %1166) /* ty=Tensor[(100, 32, 256), float16] */;
    %1168 = reshape(%1167, newshape=[100, 256, 32]) /* ty=Tensor[(100, 256, 32), float16] */;
    %1169 = transpose(%1168, axes=[1, 0, 2]) /* ty=Tensor[(256, 100, 32), float16] */;
    divide(%1169, %p296) /* ty=Tensor[(256, 100, 32), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256), float16], float16) -> Tensor[(256, 100, 32), float16] */;
  %1248 = fn (%p0318: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %1247 = reshape(%p0318, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float32] */;
    cast(%1247, dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(1568, 256), float16] */;
  %1249 = %1248(%1078) /* ty=Tensor[(1568, 256), float16] */;
  %1250 = fn (%p0317: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1233: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p0317, %p1233, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %1251 = %1250(%1249, meta[relay.Constant][297] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %1252 = fn (%p0316: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1232: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(256, 49, 32), float16] {
    %1244 = reshape(%p0316, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %1245 = add(%p1232, %1244) /* ty=Tensor[(49, 32, 256), float16] */;
    %1246 = reshape(%1245, newshape=[49, 256, 32]) /* ty=Tensor[(49, 256, 32), float16] */;
    transpose(%1246, axes=[1, 0, 2]) /* ty=Tensor[(256, 49, 32), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16]) -> Tensor[(256, 49, 32), float16] */;
  %1253 = %1243(%1242, meta[relay.Constant][296] /* ty=Tensor[(256), float16] */, 5.65625f16 /* ty=float16 */) /* ty=Tensor[(256, 100, 32), float16] */;
  %1254 = %1252(%1251, meta[relay.Constant][298] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(256, 49, 32), float16] */;
  %1255 = fn (%p0291: Tensor[(256, 100, 32), float16] /* ty=Tensor[(256, 100, 32), float16] */, %p1215: Tensor[(256, 49, 32), float16] /* ty=Tensor[(256, 49, 32), float16] */, Primitive=1) -> Tensor[(256, 100, 49), float16] {
    nn.batch_matmul(%p0291, %p1215, out_dtype="float16", transpose_b=True) /* ty=Tensor[(256, 100, 49), float16] */
  } /* ty=fn (Tensor[(256, 100, 32), float16], Tensor[(256, 49, 32), float16]) -> Tensor[(256, 100, 49), float16] */;
  %1256 = %1255(%1253, %1254) /* ty=Tensor[(256, 100, 49), float16] */;
  %1257 = fn (%p0290: Tensor[(256, 100, 49), float16] /* ty=Tensor[(256, 100, 49), float16] */, %p1214: Tensor[(256, 1, 49), float16] /* ty=Tensor[(256, 1, 49), float16] */, Primitive=1) -> Tensor[(256, 100, 49), float32] {
    %1164 = reshape(%p0290, newshape=[256, 100, 49]) /* ty=Tensor[(256, 100, 49), float16] */;
    %1165 = add(%1164, %p1214) /* ty=Tensor[(256, 100, 49), float16] */;
    cast(%1165, dtype="float32") /* ty=Tensor[(256, 100, 49), float32] */
  } /* ty=fn (Tensor[(256, 100, 49), float16], Tensor[(256, 1, 49), float16]) -> Tensor[(256, 100, 49), float32] */;
  %1258 = %1257(%1256, meta[relay.Constant][299] /* ty=Tensor[(256, 1, 49), float16] */) /* ty=Tensor[(256, 100, 49), float32] */;
  %1259 = fn (%p0289: Tensor[(256, 100, 49), float32] /* ty=Tensor[(256, 100, 49), float32] */, Primitive=1) -> Tensor[(256, 100, 49), float16] {
    %1163 = nn.softmax(%p0289, axis=2) /* ty=Tensor[(256, 100, 49), float32] */;
    cast(%1163, dtype="float16") /* ty=Tensor[(256, 100, 49), float16] */
  } /* ty=fn (Tensor[(256, 100, 49), float32]) -> Tensor[(256, 100, 49), float16] */;
  %1264 = fn (%p0321: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %1263 = reshape(%p0321, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float32] */;
    cast(%1263, dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(1568, 256), float16] */;
  %1265 = %1264(%1076) /* ty=Tensor[(1568, 256), float16] */;
  %1266 = fn (%p0320: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1235: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p0320, %p1235, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %1267 = %1266(%1265, meta[relay.Constant][300] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %1268 = fn (%p0319: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1234: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(256, 32, 49), float16] {
    %1260 = reshape(%p0319, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %1261 = add(%p1234, %1260) /* ty=Tensor[(49, 32, 256), float16] */;
    %1262 = reshape(%1261, newshape=[49, 256, 32]) /* ty=Tensor[(49, 256, 32), float16] */;
    transpose(%1262, axes=[1, 2, 0]) /* ty=Tensor[(256, 32, 49), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16]) -> Tensor[(256, 32, 49), float16] */;
  %1269 = %1259(%1258) /* ty=Tensor[(256, 100, 49), float16] */;
  %1270 = %1268(%1267, meta[relay.Constant][301] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(256, 32, 49), float16] */;
  %1271 = fn (%p0288: Tensor[(256, 100, 49), float16] /* ty=Tensor[(256, 100, 49), float16] */, %p1213: Tensor[(256, 32, 49), float16] /* ty=Tensor[(256, 32, 49), float16] */, Primitive=1) -> Tensor[(256, 100, 32), float16] {
    nn.batch_matmul(%p0288, %p1213, out_dtype="float16", transpose_b=True) /* ty=Tensor[(256, 100, 32), float16] */
  } /* ty=fn (Tensor[(256, 100, 49), float16], Tensor[(256, 32, 49), float16]) -> Tensor[(256, 100, 32), float16] */;
  %1272 = %1271(%1269, %1270) /* ty=Tensor[(256, 100, 32), float16] */;
  %1273 = fn (%p0287: Tensor[(256, 100, 32), float16] /* ty=Tensor[(256, 100, 32), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1161 = reshape(%p0287, newshape=[256, 100, 32]) /* ty=Tensor[(256, 100, 32), float16] */;
    %1162 = transpose(%1161, axes=[1, 0, 2]) /* ty=Tensor[(100, 256, 32), float16] */;
    reshape(%1162, newshape=[3200, 256]) /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(256, 100, 32), float16]) -> Tensor[(3200, 256), float16] */;
  %1274 = %1273(%1272) /* ty=Tensor[(3200, 256), float16] */;
  %1275 = fn (%p0286: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1212: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, %p295: Tensor[(1, 256), float16] /* ty=Tensor[(1, 256), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1160 = nn.dense(%p0286, %p1212, units=256, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */;
    add(%1160, %p295) /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256, 256), float16], Tensor[(1, 256), float16]) -> Tensor[(3200, 256), float16] */;
  %1276 = %1275(%1274, meta[relay.Constant][302] /* ty=Tensor[(256, 256), float16] */, meta[relay.Constant][303] /* ty=Tensor[(1, 256), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1277 = fn (%p0285: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1211: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %1158 = reshape(%p0285, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %1159 = cast(%1158, dtype="float32") /* ty=Tensor[(100, 32, 256), float32] */;
    add(%p1211, %1159) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1278 = %1277(%1276, %1238) /* ty=Tensor[(100, 32, 256), float32] */;
  %1279 = fn (%p0322: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    mean(%p0322, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1280 = %1279(%1278) /* ty=Tensor[(100, 32, 1), float32] */;
  %1281 = fn (%p0284: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p1209: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    subtract(%p0284, %p1209) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32], Tensor[(100, 32, 1), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1282 = %1281(%1278, %1280) /* ty=Tensor[(100, 32, 256), float32] */;
  %1283 = fn (%p0283: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    %1157 = power(%p0283, 2f /* ty=float32 span=/transformer/decoder/layers.1/norm2/Constant:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
    mean(%1157, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1284 = %1283(%1282) /* ty=Tensor[(100, 32, 1), float32] */;
  %1285 = fn (%p0282: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, %p1208: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p294: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p370: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %1153 = add(%p0282, 1e-05f /* ty=float32 span=/transformer/decoder/layers.1/norm2/Constant_1:0:0 */) /* ty=Tensor[(100, 32, 1), float32] */;
    %1154 = rsqrt(%1153) /* ty=Tensor[(100, 32, 1), float32] */;
    %1155 = multiply(%p1208, %1154) /* ty=Tensor[(100, 32, 256), float32] */;
    %1156 = multiply(%1155, %p294) /* ty=Tensor[(100, 32, 256), float32] */;
    add(%1156, %p370) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 1), float32], Tensor[(100, 32, 256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1286 = %1285(%1284, %1282, meta[relay.Constant][304] /* ty=Tensor[(256), float32] span=/transformer/decoder/layers.1/norm2/Mul.transformer.decoder.layers.1.norm2.weight:0:0 */, meta[relay.Constant][305] /* ty=Tensor[(256), float32] span=/transformer/decoder/layers.1/norm2/Add_1.transformer.decoder.layers.1.norm2.bias:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
  %1287 = fn (%p0281: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1152 = reshape(%p0281, newshape=[-1, 256]) /* ty=Tensor[(3200, 256), float32] */;
    cast(%1152, dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(3200, 256), float16] */;
  %1288 = %1287(%1286) /* ty=Tensor[(3200, 256), float16] */;
  %1289 = fn (%p0280: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1207: Tensor[(2048, 256), float16] /* ty=Tensor[(2048, 256), float16] */, Primitive=1) -> Tensor[(3200, 2048), float16] {
    nn.dense(%p0280, %p1207, units=None, out_dtype="float16") /* ty=Tensor[(3200, 2048), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(2048, 256), float16]) -> Tensor[(3200, 2048), float16] */;
  %1290 = %1289(%1288, meta[relay.Constant][306] /* ty=Tensor[(2048, 256), float16] */) /* ty=Tensor[(3200, 2048), float16] */;
  %1291 = fn (%p0279: Tensor[(3200, 2048), float16] /* ty=Tensor[(3200, 2048), float16] */, %p1206: Tensor[(2048), float16] /* ty=Tensor[(2048), float16] */, Primitive=1) -> Tensor[(3200, 2048), float16] {
    %1149 = reshape(%p0279, newshape=[100, 32, 2048]) /* ty=Tensor[(100, 32, 2048), float16] */;
    %1150 = add(%p1206, %1149) /* ty=Tensor[(100, 32, 2048), float16] */;
    %1151 = nn.relu(%1150) /* ty=Tensor[(100, 32, 2048), float16] */;
    reshape(%1151, newshape=[-1, 2048]) /* ty=Tensor[(3200, 2048), float16] */
  } /* ty=fn (Tensor[(3200, 2048), float16], Tensor[(2048), float16]) -> Tensor[(3200, 2048), float16] */;
  %1292 = %1291(%1290, meta[relay.Constant][307] /* ty=Tensor[(2048), float16] */) /* ty=Tensor[(3200, 2048), float16] */;
  %1293 = fn (%p0278: Tensor[(3200, 2048), float16] /* ty=Tensor[(3200, 2048), float16] */, %p1205: Tensor[(256, 2048), float16] /* ty=Tensor[(256, 2048), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    nn.dense(%p0278, %p1205, units=None, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 2048), float16], Tensor[(256, 2048), float16]) -> Tensor[(3200, 256), float16] */;
  %1294 = %1293(%1292, meta[relay.Constant][308] /* ty=Tensor[(256, 2048), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1295 = fn (%p0277: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1204: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, %p293: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %1146 = reshape(%p0277, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %1147 = add(%p1204, %1146) /* ty=Tensor[(100, 32, 256), float16] */;
    %1148 = cast(%1147, dtype="float32") /* ty=Tensor[(100, 32, 256), float32] */;
    add(%p293, %1148) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256), float16], Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1296 = %1295(%1294, meta[relay.Constant][309] /* ty=Tensor[(256), float16] */, %1286) /* ty=Tensor[(100, 32, 256), float32] */;
  %1297 = fn (%p0323: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    mean(%p0323, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1298 = %1297(%1296) /* ty=Tensor[(100, 32, 1), float32] */;
  %1299 = fn (%p0276: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p1203: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    subtract(%p0276, %p1203) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32], Tensor[(100, 32, 1), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1300 = %1299(%1296, %1298) /* ty=Tensor[(100, 32, 256), float32] */;
  %1301 = fn (%p0275: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    %1145 = power(%p0275, 2f /* ty=float32 span=/transformer/decoder/layers.1/norm3/Constant:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
    mean(%1145, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1302 = %1301(%1300) /* ty=Tensor[(100, 32, 1), float32] */;
  %1303 = fn (%p0274: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, %p1202: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p292: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p369: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %1141 = add(%p0274, 1e-05f /* ty=float32 span=/transformer/decoder/layers.1/norm3/Constant_1:0:0 */) /* ty=Tensor[(100, 32, 1), float32] */;
    %1142 = rsqrt(%1141) /* ty=Tensor[(100, 32, 1), float32] */;
    %1143 = multiply(%p1202, %1142) /* ty=Tensor[(100, 32, 256), float32] */;
    %1144 = multiply(%1143, %p292) /* ty=Tensor[(100, 32, 256), float32] */;
    add(%1144, %p369) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 1), float32], Tensor[(100, 32, 256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1304 = %1303(%1302, %1300, meta[relay.Constant][310] /* ty=Tensor[(256), float32] span=/transformer/decoder/layers.1/norm3/Mul.transformer.decoder.layers.1.norm3.weight:0:0 */, meta[relay.Constant][311] /* ty=Tensor[(256), float32] span=/transformer/decoder/layers.1/norm3/Add_1.transformer.decoder.layers.1.norm3.bias:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
  %1305 = fn (%p0324: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    mean(%p0324, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1306 = %1305(%1304) /* ty=Tensor[(100, 32, 1), float32] */;
  %1307 = fn (%p0273: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p1201: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    subtract(%p0273, %p1201) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32], Tensor[(100, 32, 1), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1308 = %1307(%1304, %1306) /* ty=Tensor[(100, 32, 256), float32] */;
  %1309 = fn (%p0272: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p2: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p3: Tensor[(256), float32] /* ty=Tensor[(256), Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %1140 = power(%p0272, 2f /* ty=float32 span=/transformer/decoder/norm_1/Constant:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
    %1141 = mean(%1140, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
    %3 = add(%1141, 1e-05f /* ty=float32 span=/transformer/decoder/norm/Constant_1:0:0 */) /* ty=Tensor[(100, 32, 1), float32] */;
    %4 = rsqrt(%3) /* ty=Tensor[(100, 32, 1), float32] */;
    %5 = multiply(%p0272, %4) /* ty=Tensor[(100, 32, 256), float32] */;
    %6 = multiply(%5, %p2) /* ty=Tensor[(100, 32, 256), float32] */;
    %7 = add(%6, %p3) /* ty=Tensor[(100, 32, 256), float32] */;
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1359 = fn (%p0361: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p1261: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    add(%p0361, %p1261) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32], Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1360 = %1359(%1304, meta[relay.Constant][284] /* ty=Tensor[(100, 32, 256), float32] span=/transformer/Tile:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
  %1361 = fn (%p0360: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1358 = reshape(%p0360, newshape=[-1, 256]) /* ty=Tensor[(3200, 256), float32] */;
    cast(%1358, dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(3200, 256), float16] */;
  %1362 = %1361(%1360) /* ty=Tensor[(3200, 256), float16] */;
  %1363 = fn (%p0359: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1260: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    nn.dense(%p0359, %p1260, units=None, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(3200, 256), float16] */;
  %1364 = %1363(%1362, meta[relay.Constant][312] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1365 = fn (%p0358: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1259: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, %p2107: float16 /* ty=float16 */, Primitive=1) -> Tensor[(256, 100, 32), float16] {
    %1354 = reshape(%p0358, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %1355 = add(%p1259, %1354) /* ty=Tensor[(100, 32, 256), float16] */;
    %1356 = reshape(%1355, newshape=[100, 256, 32]) /* ty=Tensor[(100, 256, 32), float16] */;
    %1357 = transpose(%1356, axes=[1, 0, 2]) /* ty=Tensor[(256, 100, 32), float16] */;
    divide(%1357, %p2107) /* ty=Tensor[(256, 100, 32), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256), float16], float16) -> Tensor[(256, 100, 32), float16] */;
  %1370 = fn (%p0364: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1369 = reshape(%p0364, newshape=[-1, 256]) /* ty=Tensor[(3200, 256), float32] */;
    cast(%1369, dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(3200, 256), float16] */;
  %1371 = %1370(%1360) /* ty=Tensor[(3200, 256), float16] */;
  %1372 = fn (%p0363: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1263: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    nn.dense(%p0363, %p1263, units=None, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(3200, 256), float16] */;
  %1373 = %1372(%1371, meta[relay.Constant][314] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1374 = fn (%p0362: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1262: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(256, 100, 32), float16] {
    %1366 = reshape(%p0362, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %1367 = add(%p1262, %1366) /* ty=Tensor[(100, 32, 256), float16] */;
    %1368 = reshape(%1367, newshape=[100, 256, 32]) /* ty=Tensor[(100, 256, 32), float16] */;
    transpose(%1368, axes=[1, 0, 2]) /* ty=Tensor[(256, 100, 32), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256), float16]) -> Tensor[(256, 100, 32), float16] */;
  %1375 = %1365(%1364, meta[relay.Constant][313] /* ty=Tensor[(256), float16] */, 5.65625f16 /* ty=float16 */) /* ty=Tensor[(256, 100, 32), float16] */;
  %1376 = %1374(%1373, meta[relay.Constant][315] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(256, 100, 32), float16] */;
  %1377 = fn (%p0357: Tensor[(256, 100, 32), float16] /* ty=Tensor[(256, 100, 32), float16] */, %p1258: Tensor[(256, 100, 32), float16] /* ty=Tensor[(256, 100, 32), float16] */, Primitive=1) -> Tensor[(256, 100, 100), float16] {
    nn.batch_matmul(%p0357, %p1258, out_dtype="float16", transpose_b=True) /* ty=Tensor[(256, 100, 100), float16] */
  } /* ty=fn (Tensor[(256, 100, 32), float16], Tensor[(256, 100, 32), float16]) -> Tensor[(256, 100, 100), float16] */;
  %1378 = %1377(%1375, %1376) /* ty=Tensor[(256, 100, 100), float16] */;
  %1379 = fn (%p0356: Tensor[(256, 100, 100), float16] /* ty=Tensor[(256, 100, 100), float16] */, Primitive=1) -> Tensor[(256, 100, 100), float32] {
    %1353 = reshape(%p0356, newshape=[256, 100, 100]) /* ty=Tensor[(256, 100, 100), float16] */;
    cast(%1353, dtype="float32") /* ty=Tensor[(256, 100, 100), float32] */
  } /* ty=fn (Tensor[(256, 100, 100), float16]) -> Tensor[(256, 100, 100), float32] */;
  %1380 = %1379(%1378) /* ty=Tensor[(256, 100, 100), float32] */;
  %1381 = fn (%p0355: Tensor[(256, 100, 100), float32] /* ty=Tensor[(256, 100, 100), float32] */, Primitive=1) -> Tensor[(256, 100, 100), float16] {
    %1352 = nn.softmax(%p0355, axis=2) /* ty=Tensor[(256, 100, 100), float32] */;
    cast(%1352, dtype="float16") /* ty=Tensor[(256, 100, 100), float16] */
  } /* ty=fn (Tensor[(256, 100, 100), float32]) -> Tensor[(256, 100, 100), float16] */;
  %1386 = fn (%p0367: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1385 = reshape(%p0367, newshape=[-1, 256]) /* ty=Tensor[(3200, 256), float32] */;
    cast(%1385, dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(3200, 256), float16] */;
  %1387 = %1386(%1304) /* ty=Tensor[(3200, 256), float16] */;
  %1388 = fn (%p0366: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1265: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    nn.dense(%p0366, %p1265, units=None, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(3200, 256), float16] */;
  %1389 = %1388(%1387, meta[relay.Constant][316] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1390 = fn (%p0365: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1264: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(256, 32, 100), float16] {
    %1382 = reshape(%p0365, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %1383 = add(%p1264, %1382) /* ty=Tensor[(100, 32, 256), float16] */;
    %1384 = reshape(%1383, newshape=[100, 256, 32]) /* ty=Tensor[(100, 256, 32), float16] */;
    transpose(%1384, axes=[1, 2, 0]) /* ty=Tensor[(256, 32, 100), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256), float16]) -> Tensor[(256, 32, 100), float16] */;
  %1391 = %1381(%1380) /* ty=Tensor[(256, 100, 100), float16] */;
  %1392 = %1390(%1389, meta[relay.Constant][317] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(256, 32, 100), float16] */;
  %1393 = fn (%p0354: Tensor[(256, 100, 100), float16] /* ty=Tensor[(256, 100, 100), float16] */, %p1257: Tensor[(256, 32, 100), float16] /* ty=Tensor[(256, 32, 100), float16] */, Primitive=1) -> Tensor[(256, 100, 32), float16] {
    nn.batch_matmul(%p0354, %p1257, out_dtype="float16", transpose_b=True) /* ty=Tensor[(256, 100, 32), float16] */
  } /* ty=fn (Tensor[(256, 100, 100), float16], Tensor[(256, 32, 100), float16]) -> Tensor[(256, 100, 32), float16] */;
  %1394 = %1393(%1391, %1392) /* ty=Tensor[(256, 100, 32), float16] */;
  %1395 = fn (%p0353: Tensor[(256, 100, 32), float16] /* ty=Tensor[(256, 100, 32), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1350 = reshape(%p0353, newshape=[256, 100, 32]) /* ty=Tensor[(256, 100, 32), float16] */;
    %1351 = transpose(%1350, axes=[1, 0, 2]) /* ty=Tensor[(100, 256, 32), float16] */;
    reshape(%1351, newshape=[3200, 256]) /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(256, 100, 32), float16]) -> Tensor[(3200, 256), float16] */;
  %1396 = %1395(%1394) /* ty=Tensor[(3200, 256), float16] */;
  %1397 = fn (%p0352: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1256: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, %p2106: Tensor[(1, 256), float16] /* ty=Tensor[(1, 256), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1349 = nn.dense(%p0352, %p1256, units=256, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */;
    add(%1349, %p2106) /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256, 256), float16], Tensor[(1, 256), float16]) -> Tensor[(3200, 256), float16] */;
  %1398 = %1397(%1396, meta[relay.Constant][318] /* ty=Tensor[(256, 256), float16] */, meta[relay.Constant][319] /* ty=Tensor[(1, 256), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1399 = fn (%p0351: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1255: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %1347 = reshape(%p0351, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %1348 = cast(%1347, dtype="float32") /* ty=Tensor[(100, 32, 256), float32] */;
    add(%p1255, %1348) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1400 = %1399(%1398, %1304) /* ty=Tensor[(100, 32, 256), float32] */;
  %1401 = fn (%p0368: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    mean(%p0368, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1402 = %1401(%1400) /* ty=Tensor[(100, 32, 1), float32] */;
  %1403 = fn (%p0350: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p1254: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    subtract(%p0350, %p1254) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32], Tensor[(100, 32, 1), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1404 = %1403(%1400, %1402) /* ty=Tensor[(100, 32, 256), float32] */;
  %1405 = fn (%p0349: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    %1346 = power(%p0349, 2f /* ty=float32 span=/transformer/decoder/layers.2/norm1/Constant:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
    mean(%1346, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1406 = %1405(%1404) /* ty=Tensor[(100, 32, 1), float32] */;
  %1407 = fn (%p0348: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, %p1253: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p2105: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p374: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %1342 = add(%p0348, 1e-05f /* ty=float32 span=/transformer/decoder/layers.2/norm1/Constant_1:0:0 */) /* ty=Tensor[(100, 32, 1), float32] */;
    %1343 = rsqrt(%1342) /* ty=Tensor[(100, 32, 1), float32] */;
    %1344 = multiply(%p1253, %1343) /* ty=Tensor[(100, 32, 256), float32] */;
    %1345 = multiply(%1344, %p2105) /* ty=Tensor[(100, 32, 256), float32] */;
    add(%1345, %p374) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 1), float32], Tensor[(100, 32, 256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1408 = %1407(%1406, %1404, meta[relay.Constant][320] /* ty=Tensor[(256), float32] span=/transformer/decoder/layers.2/norm1/Mul.transformer.decoder.layers.2.norm1.weight:0:0 */, meta[relay.Constant][321] /* ty=Tensor[(256), float32] span=/transformer/decoder/layers.2/norm1/Add_1.transformer.decoder.layers.2.norm1.bias:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
  %1409 = fn (%p0347: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p1252: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1340 = add(%p0347, %p1252) /* ty=Tensor[(100, 32, 256), float32] */;
    %1341 = reshape(%1340, newshape=[-1, 256]) /* ty=Tensor[(3200, 256), float32] */;
    cast(%1341, dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(100, 32, 256), float32], Tensor[(100, 32, 256), float32]) -> Tensor[(3200, 256), float16] */;
  %1410 = %1409(%1408, meta[relay.Constant][284] /* ty=Tensor[(100, 32, 256), float32] span=/transformer/Tile:0:0 */) /* ty=Tensor[(3200, 256), float16] */;
  %1411 = fn (%p0346: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1251: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    nn.dense(%p0346, %p1251, units=None, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(3200, 256), float16] */;
  %1412 = %1411(%1410, meta[relay.Constant][322] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1413 = fn (%p0345: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1250: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, %p2104: float16 /* ty=float16 */, Primitive=1) -> Tensor[(256, 100, 32), float16] {
    %1336 = reshape(%p0345, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %1337 = add(%p1250, %1336) /* ty=Tensor[(100, 32, 256), float16] */;
    %1338 = reshape(%1337, newshape=[100, 256, 32]) /* ty=Tensor[(100, 256, 32), float16] */;
    %1339 = transpose(%1338, axes=[1, 0, 2]) /* ty=Tensor[(256, 100, 32), float16] */;
    divide(%1339, %p2104) /* ty=Tensor[(256, 100, 32), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256), float16], float16) -> Tensor[(256, 100, 32), float16] */;
  %1418 = fn (%p0371: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %1417 = reshape(%p0371, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float32] */;
    cast(%1417, dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(1568, 256), float16] */;
  %1419 = %1418(%1078) /* ty=Tensor[(1568, 256), float16] */;
  %1420 = fn (%p0370: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1267: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p0370, %p1267, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %1421 = %1420(%1419, meta[relay.Constant][324] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %1422 = fn (%p0369: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1266: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(256, 49, 32), float16] {
    %1414 = reshape(%p0369, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %1415 = add(%p1266, %1414) /* ty=Tensor[(49, 32, 256), float16] */;
    %1416 = reshape(%1415, newshape=[49, 256, 32]) /* ty=Tensor[(49, 256, 32), float16] */;
    transpose(%1416, axes=[1, 0, 2]) /* ty=Tensor[(256, 49, 32), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16]) -> Tensor[(256, 49, 32), float16] */;
  %1423 = %1413(%1412, meta[relay.Constant][323] /* ty=Tensor[(256), float16] */, 5.65625f16 /* ty=float16 */) /* ty=Tensor[(256, 100, 32), float16] */;
  %1424 = %1422(%1421, meta[relay.Constant][325] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(256, 49, 32), float16] */;
  %1425 = fn (%p0344: Tensor[(256, 100, 32), float16] /* ty=Tensor[(256, 100, 32), float16] */, %p1249: Tensor[(256, 49, 32), float16] /* ty=Tensor[(256, 49, 32), float16] */, Primitive=1) -> Tensor[(256, 100, 49), float16] {
    nn.batch_matmul(%p0344, %p1249, out_dtype="float16", transpose_b=True) /* ty=Tensor[(256, 100, 49), float16] */
  } /* ty=fn (Tensor[(256, 100, 32), float16], Tensor[(256, 49, 32), float16]) -> Tensor[(256, 100, 49), float16] */;
  %1426 = %1425(%1423, %1424) /* ty=Tensor[(256, 100, 49), float16] */;
  %1427 = fn (%p0343: Tensor[(256, 100, 49), float16] /* ty=Tensor[(256, 100, 49), float16] */, %p1248: Tensor[(256, 1, 49), float16] /* ty=Tensor[(256, 1, 49), float16] */, Primitive=1) -> Tensor[(256, 100, 49), float32] {
    %1334 = reshape(%p0343, newshape=[256, 100, 49]) /* ty=Tensor[(256, 100, 49), float16] */;
    %1335 = add(%1334, %p1248) /* ty=Tensor[(256, 100, 49), float16] */;
    cast(%1335, dtype="float32") /* ty=Tensor[(256, 100, 49), float32] */
  } /* ty=fn (Tensor[(256, 100, 49), float16], Tensor[(256, 1, 49), float16]) -> Tensor[(256, 100, 49), float32] */;
  %1428 = %1427(%1426, meta[relay.Constant][326] /* ty=Tensor[(256, 1, 49), float16] */) /* ty=Tensor[(256, 100, 49), float32] */;
  %1429 = fn (%p0342: Tensor[(256, 100, 49), float32] /* ty=Tensor[(256, 100, 49), float32] */, Primitive=1) -> Tensor[(256, 100, 49), float16] {
    %1333 = nn.softmax(%p0342, axis=2) /* ty=Tensor[(256, 100, 49), float32] */;
    cast(%1333, dtype="float16") /* ty=Tensor[(256, 100, 49), float16] */
  } /* ty=fn (Tensor[(256, 100, 49), float32]) -> Tensor[(256, 100, 49), float16] */;
  %1434 = fn (%p0374: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %1433 = reshape(%p0374, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float32] */;
    cast(%1433, dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(1568, 256), float16] */;
  %1435 = %1434(%1076) /* ty=Tensor[(1568, 256), float16] */;
  %1436 = fn (%p0373: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1269: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p0373, %p1269, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %1437 = %1436(%1435, meta[relay.Constant][327] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %1438 = fn (%p0372: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1268: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(256, 32, 49), float16] {
    %1430 = reshape(%p0372, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %1431 = add(%p1268, %1430) /* ty=Tensor[(49, 32, 256), float16] */;
    %1432 = reshape(%1431, newshape=[49, 256, 32]) /* ty=Tensor[(49, 256, 32), float16] */;
    transpose(%1432, axes=[1, 2, 0]) /* ty=Tensor[(256, 32, 49), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16]) -> Tensor[(256, 32, 49), float16] */;
  %1439 = %1429(%1428) /* ty=Tensor[(256, 100, 49), float16] */;
  %1440 = %1438(%1437, meta[relay.Constant][328] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(256, 32, 49), float16] */;
  %1441 = fn (%p0341: Tensor[(256, 100, 49), float16] /* ty=Tensor[(256, 100, 49), float16] */, %p1247: Tensor[(256, 32, 49), float16] /* ty=Tensor[(256, 32, 49), float16] */, Primitive=1) -> Tensor[(256, 100, 32), float16] {
    nn.batch_matmul(%p0341, %p1247, out_dtype="float16", transpose_b=True) /* ty=Tensor[(256, 100, 32), float16] */
  } /* ty=fn (Tensor[(256, 100, 49), float16], Tensor[(256, 32, 49), float16]) -> Tensor[(256, 100, 32), float16] */;
  %1442 = %1441(%1439, %1440) /* ty=Tensor[(256, 100, 32), float16] */;
  %1443 = fn (%p0340: Tensor[(256, 100, 32), float16] /* ty=Tensor[(256, 100, 32), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1331 = reshape(%p0340, newshape=[256, 100, 32]) /* ty=Tensor[(256, 100, 32), float16] */;
    %1332 = transpose(%1331, axes=[1, 0, 2]) /* ty=Tensor[(100, 256, 32), float16] */;
    reshape(%1332, newshape=[3200, 256]) /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(256, 100, 32), float16]) -> Tensor[(3200, 256), float16] */;
  %1444 = %1443(%1442) /* ty=Tensor[(3200, 256), float16] */;
  %1445 = fn (%p0339: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1246: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, %p2103: Tensor[(1, 256), float16] /* ty=Tensor[(1, 256), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1330 = nn.dense(%p0339, %p1246, units=256, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */;
    add(%1330, %p2103) /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256, 256), float16], Tensor[(1, 256), float16]) -> Tensor[(3200, 256), float16] */;
  %1446 = %1445(%1444, meta[relay.Constant][329] /* ty=Tensor[(256, 256), float16] */, meta[relay.Constant][330] /* ty=Tensor[(1, 256), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1447 = fn (%p0338: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1245: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %1328 = reshape(%p0338, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %1329 = cast(%1328, dtype="float32") /* ty=Tensor[(100, 32, 256), float32] */;
    add(%p1245, %1329) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1448 = %1447(%1446, %1408) /* ty=Tensor[(100, 32, 256), float32] */;
  %1449 = fn (%p0375: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    mean(%p0375, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1450 = %1449(%1448) /* ty=Tensor[(100, 32, 1), float32] */;
  %1451 = fn (%p0337: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p1244: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    subtract(%p0337, %p1244) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32], Tensor[(100, 32, 1), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1452 = %1451(%1448, %1450) /* ty=Tensor[(100, 32, 256), float32] */;
  %1453 = fn (%p0336: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    %1327 = power(%p0336, 2f /* ty=float32 span=/transformer/decoder/layers.2/norm2/Constant:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
    mean(%1327, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1454 = %1453(%1452) /* ty=Tensor[(100, 32, 1), float32] */;
  %1455 = fn (%p0335: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, %p1243: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p2102: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p373: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %1323 = add(%p0335, 1e-05f /* ty=float32 span=/transformer/decoder/layers.2/norm2/Constant_1:0:0 */) /* ty=Tensor[(100, 32, 1), float32] */;
    %1324 = rsqrt(%1323) /* ty=Tensor[(100, 32, 1), float32] */;
    %1325 = multiply(%p1243, %1324) /* ty=Tensor[(100, 32, 256), float32] */;
    %1326 = multiply(%1325, %p2102) /* ty=Tensor[(100, 32, 256), float32] */;
    add(%1326, %p373) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 1), float32], Tensor[(100, 32, 256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1456 = %1455(%1454, %1452, meta[relay.Constant][331] /* ty=Tensor[(256), float32] span=/transformer/decoder/layers.2/norm2/Mul.transformer.decoder.layers.2.norm2.weight:0:0 */, meta[relay.Constant][332] /* ty=Tensor[(256), float32] span=/transformer/decoder/layers.2/norm2/Add_1.transformer.decoder.layers.2.norm2.bias:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
  %1457 = fn (%p0334: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1322 = reshape(%p0334, newshape=[-1, 256]) /* ty=Tensor[(3200, 256), float32] */;
    cast(%1322, dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(3200, 256), float16] */;
  %1458 = %1457(%1456) /* ty=Tensor[(3200, 256), float16] */;
  %1459 = fn (%p0333: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1242: Tensor[(2048, 256), float16] /* ty=Tensor[(2048, 256), float16] */, Primitive=1) -> Tensor[(3200, 2048), float16] {
    nn.dense(%p0333, %p1242, units=None, out_dtype="float16") /* ty=Tensor[(3200, 2048), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(2048, 256), float16]) -> Tensor[(3200, 2048), float16] */;
  %1460 = %1459(%1458, meta[relay.Constant][333] /* ty=Tensor[(2048, 256), float16] */) /* ty=Tensor[(3200, 2048), float16] */;
  %1461 = fn (%p0332: Tensor[(3200, 2048), float16] /* ty=Tensor[(3200, 2048), float16] */, %p1241: Tensor[(2048), float16] /* ty=Tensor[(2048), float16] */, Primitive=1) -> Tensor[(3200, 2048), float16] {
    %1319 = reshape(%p0332, newshape=[100, 32, 2048]) /* ty=Tensor[(100, 32, 2048), float16] */;
    %1320 = add(%p1241, %1319) /* ty=Tensor[(100, 32, 2048), float16] */;
    %1321 = nn.relu(%1320) /* ty=Tensor[(100, 32, 2048), float16] */;
    reshape(%1321, newshape=[-1, 2048]) /* ty=Tensor[(3200, 2048), float16] */
  } /* ty=fn (Tensor[(3200, 2048), float16], Tensor[(2048), float16]) -> Tensor[(3200, 2048), float16] */;
  %1462 = %1461(%1460, meta[relay.Constant][334] /* ty=Tensor[(2048), float16] */) /* ty=Tensor[(3200, 2048), float16] */;
  %1463 = fn (%p0331: Tensor[(3200, 2048), float16] /* ty=Tensor[(3200, 2048), float16] */, %p1240: Tensor[(256, 2048), float16] /* ty=Tensor[(256, 2048), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    nn.dense(%p0331, %p1240, units=None, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 2048), float16], Tensor[(256, 2048), float16]) -> Tensor[(3200, 256), float16] */;
  %1464 = %1463(%1462, meta[relay.Constant][335] /* ty=Tensor[(256, 2048), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1465 = fn (%p0330: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1239: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, %p2101: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %1316 = reshape(%p0330, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %1317 = add(%p1239, %1316) /* ty=Tensor[(100, 32, 256), float16] */;
    %1318 = cast(%1317, dtype="float32") /* ty=Tensor[(100, 32, 256), float32] */;
    add(%p2101, %1318) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256), float16], Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1466 = %1465(%1464, meta[relay.Constant][336] /* ty=Tensor[(256), float16] */, %1456) /* ty=Tensor[(100, 32, 256), float32] */;
  %1467 = fn (%p0376: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    mean(%p0376, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1468 = %1467(%1466) /* ty=Tensor[(100, 32, 1), float32] */;
  %1469 = fn (%p0329: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p1238: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    subtract(%p0329, %p1238) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32], Tensor[(100, 32, 1), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1470 = %1469(%1466, %1468) /* ty=Tensor[(100, 32, 256), float32] */;
  %1471 = fn (%p0328: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    %1315 = power(%p0328, 2f /* ty=float32 span=/transformer/decoder/layers.2/norm3/Constant:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
    mean(%1315, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1472 = %1471(%1470) /* ty=Tensor[(100, 32, 1), float32] */;
  %1473 = fn (%p0327: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, %p1237: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p2100: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p372: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %1311 = add(%p0327, 1e-05f /* ty=float32 span=/transformer/decoder/layers.2/norm3/Constant_1:0:0 */) /* ty=Tensor[(100, 32, 1), float32] */;
    %1312 = rsqrt(%1311) /* ty=Tensor[(100, 32, 1), float32] */;
    %1313 = multiply(%p1237, %1312) /* ty=Tensor[(100, 32, 256), float32] */;
    %1314 = multiply(%1313, %p2100) /* ty=Tensor[(100, 32, 256), float32] */;
    add(%1314, %p372) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 1), float32], Tensor[(100, 32, 256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1474 = %1473(%1472, %1470, meta[relay.Constant][337] /* ty=Tensor[(256), float32] span=/transformer/decoder/layers.2/norm3/Mul.transformer.decoder.layers.2.norm3.weight:0:0 */, meta[relay.Constant][338] /* ty=Tensor[(256), float32] span=/transformer/decoder/layers.2/norm3/Add_1.transformer.decoder.layers.2.norm3.bias:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
  %1475 = fn (%p0377: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    mean(%p0377, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1476 = %1475(%1474) /* ty=Tensor[(100, 32, 1), float32] */;
  %1477 = fn (%p0326: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p1236: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    subtract(%p0326, %p1236) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32], Tensor[(100, 32, 1), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1478 = %1477(%1474, %1476) /* ty=Tensor[(100, 32, 256), float32] */;
  %1479 = fn (%p0325: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */ %p2: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p3: Tensor[(256), float32] /* ty=Tensor[(256), Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %1310 = power(%p0325, 2f /* ty=float32 span=/transformer/decoder/norm_2/Constant:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
    %1311 = mean(%1310, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
    %8 = add(%1311, 1e-05f /* ty=float32 span=/transformer/decoder/norm_1/Constant_1:0:0 */) /* ty=Tensor[(100, 32, 1), float32] */;
    %9 = rsqrt(%8) /* ty=Tensor[(100, 32, 1), float32] */;
    %10 = multiply(%p0325, %9) /* ty=Tensor[(100, 32, 256), float32] */;
    %11 = multiply(%10, %p2) /* ty=Tensor[(100, 32, 256), float32] */;
    %12 = add(%11, %p3) /* ty=Tensor[(100, 32, 256), float32] */;
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1529 = fn (%p0414: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p1295: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    add(%p0414, %p1295) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32], Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1530 = %1529(%1474, meta[relay.Constant][284] /* ty=Tensor[(100, 32, 256), float32] span=/transformer/Tile:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
  %1531 = fn (%p0413: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1528 = reshape(%p0413, newshape=[-1, 256]) /* ty=Tensor[(3200, 256), float32] */;
    cast(%1528, dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(3200, 256), float16] */;
  %1532 = %1531(%1530) /* ty=Tensor[(3200, 256), float16] */;
  %1533 = fn (%p0412: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1294: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    nn.dense(%p0412, %p1294, units=None, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(3200, 256), float16] */;
  %1534 = %1533(%1532, meta[relay.Constant][339] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1535 = fn (%p0411: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1293: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, %p2116: float16 /* ty=float16 */, Primitive=1) -> Tensor[(256, 100, 32), float16] {
    %1524 = reshape(%p0411, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %1525 = add(%p1293, %1524) /* ty=Tensor[(100, 32, 256), float16] */;
    %1526 = reshape(%1525, newshape=[100, 256, 32]) /* ty=Tensor[(100, 256, 32), float16] */;
    %1527 = transpose(%1526, axes=[1, 0, 2]) /* ty=Tensor[(256, 100, 32), float16] */;
    divide(%1527, %p2116) /* ty=Tensor[(256, 100, 32), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256), float16], float16) -> Tensor[(256, 100, 32), float16] */;
  %1540 = fn (%p0417: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1539 = reshape(%p0417, newshape=[-1, 256]) /* ty=Tensor[(3200, 256), float32] */;
    cast(%1539, dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(3200, 256), float16] */;
  %1541 = %1540(%1530) /* ty=Tensor[(3200, 256), float16] */;
  %1542 = fn (%p0416: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1297: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    nn.dense(%p0416, %p1297, units=None, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(3200, 256), float16] */;
  %1543 = %1542(%1541, meta[relay.Constant][341] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1544 = fn (%p0415: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1296: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(256, 100, 32), float16] {
    %1536 = reshape(%p0415, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %1537 = add(%p1296, %1536) /* ty=Tensor[(100, 32, 256), float16] */;
    %1538 = reshape(%1537, newshape=[100, 256, 32]) /* ty=Tensor[(100, 256, 32), float16] */;
    transpose(%1538, axes=[1, 0, 2]) /* ty=Tensor[(256, 100, 32), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256), float16]) -> Tensor[(256, 100, 32), float16] */;
  %1545 = %1535(%1534, meta[relay.Constant][340] /* ty=Tensor[(256), float16] */, 5.65625f16 /* ty=float16 */) /* ty=Tensor[(256, 100, 32), float16] */;
  %1546 = %1544(%1543, meta[relay.Constant][342] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(256, 100, 32), float16] */;
  %1547 = fn (%p0410: Tensor[(256, 100, 32), float16] /* ty=Tensor[(256, 100, 32), float16] */, %p1292: Tensor[(256, 100, 32), float16] /* ty=Tensor[(256, 100, 32), float16] */, Primitive=1) -> Tensor[(256, 100, 100), float16] {
    nn.batch_matmul(%p0410, %p1292, out_dtype="float16", transpose_b=True) /* ty=Tensor[(256, 100, 100), float16] */
  } /* ty=fn (Tensor[(256, 100, 32), float16], Tensor[(256, 100, 32), float16]) -> Tensor[(256, 100, 100), float16] */;
  %1548 = %1547(%1545, %1546) /* ty=Tensor[(256, 100, 100), float16] */;
  %1549 = fn (%p0409: Tensor[(256, 100, 100), float16] /* ty=Tensor[(256, 100, 100), float16] */, Primitive=1) -> Tensor[(256, 100, 100), float32] {
    %1523 = reshape(%p0409, newshape=[256, 100, 100]) /* ty=Tensor[(256, 100, 100), float16] */;
    cast(%1523, dtype="float32") /* ty=Tensor[(256, 100, 100), float32] */
  } /* ty=fn (Tensor[(256, 100, 100), float16]) -> Tensor[(256, 100, 100), float32] */;
  %1550 = %1549(%1548) /* ty=Tensor[(256, 100, 100), float32] */;
  %1551 = fn (%p0408: Tensor[(256, 100, 100), float32] /* ty=Tensor[(256, 100, 100), float32] */, Primitive=1) -> Tensor[(256, 100, 100), float16] {
    %1522 = nn.softmax(%p0408, axis=2) /* ty=Tensor[(256, 100, 100), float32] */;
    cast(%1522, dtype="float16") /* ty=Tensor[(256, 100, 100), float16] */
  } /* ty=fn (Tensor[(256, 100, 100), float32]) -> Tensor[(256, 100, 100), float16] */;
  %1556 = fn (%p0420: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1555 = reshape(%p0420, newshape=[-1, 256]) /* ty=Tensor[(3200, 256), float32] */;
    cast(%1555, dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(3200, 256), float16] */;
  %1557 = %1556(%1474) /* ty=Tensor[(3200, 256), float16] */;
  %1558 = fn (%p0419: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1299: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    nn.dense(%p0419, %p1299, units=None, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(3200, 256), float16] */;
  %1559 = %1558(%1557, meta[relay.Constant][343] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1560 = fn (%p0418: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1298: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(256, 32, 100), float16] {
    %1552 = reshape(%p0418, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %1553 = add(%p1298, %1552) /* ty=Tensor[(100, 32, 256), float16] */;
    %1554 = reshape(%1553, newshape=[100, 256, 32]) /* ty=Tensor[(100, 256, 32), float16] */;
    transpose(%1554, axes=[1, 2, 0]) /* ty=Tensor[(256, 32, 100), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256), float16]) -> Tensor[(256, 32, 100), float16] */;
  %1561 = %1551(%1550) /* ty=Tensor[(256, 100, 100), float16] */;
  %1562 = %1560(%1559, meta[relay.Constant][344] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(256, 32, 100), float16] */;
  %1563 = fn (%p0407: Tensor[(256, 100, 100), float16] /* ty=Tensor[(256, 100, 100), float16] */, %p1291: Tensor[(256, 32, 100), float16] /* ty=Tensor[(256, 32, 100), float16] */, Primitive=1) -> Tensor[(256, 100, 32), float16] {
    nn.batch_matmul(%p0407, %p1291, out_dtype="float16", transpose_b=True) /* ty=Tensor[(256, 100, 32), float16] */
  } /* ty=fn (Tensor[(256, 100, 100), float16], Tensor[(256, 32, 100), float16]) -> Tensor[(256, 100, 32), float16] */;
  %1564 = %1563(%1561, %1562) /* ty=Tensor[(256, 100, 32), float16] */;
  %1565 = fn (%p0406: Tensor[(256, 100, 32), float16] /* ty=Tensor[(256, 100, 32), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1520 = reshape(%p0406, newshape=[256, 100, 32]) /* ty=Tensor[(256, 100, 32), float16] */;
    %1521 = transpose(%1520, axes=[1, 0, 2]) /* ty=Tensor[(100, 256, 32), float16] */;
    reshape(%1521, newshape=[3200, 256]) /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(256, 100, 32), float16]) -> Tensor[(3200, 256), float16] */;
  %1566 = %1565(%1564) /* ty=Tensor[(3200, 256), float16] */;
  %1567 = fn (%p0405: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1290: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, %p2115: Tensor[(1, 256), float16] /* ty=Tensor[(1, 256), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1519 = nn.dense(%p0405, %p1290, units=256, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */;
    add(%1519, %p2115) /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256, 256), float16], Tensor[(1, 256), float16]) -> Tensor[(3200, 256), float16] */;
  %1568 = %1567(%1566, meta[relay.Constant][345] /* ty=Tensor[(256, 256), float16] */, meta[relay.Constant][346] /* ty=Tensor[(1, 256), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1569 = fn (%p0404: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1289: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %1517 = reshape(%p0404, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %1518 = cast(%1517, dtype="float32") /* ty=Tensor[(100, 32, 256), float32] */;
    add(%p1289, %1518) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1570 = %1569(%1568, %1474) /* ty=Tensor[(100, 32, 256), float32] */;
  %1571 = fn (%p0421: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    mean(%p0421, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1572 = %1571(%1570) /* ty=Tensor[(100, 32, 1), float32] */;
  %1573 = fn (%p0403: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p1288: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    subtract(%p0403, %p1288) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32], Tensor[(100, 32, 1), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1574 = %1573(%1570, %1572) /* ty=Tensor[(100, 32, 256), float32] */;
  %1575 = fn (%p0402: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    %1516 = power(%p0402, 2f /* ty=float32 span=/transformer/decoder/layers.3/norm1/Constant:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
    mean(%1516, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1576 = %1575(%1574) /* ty=Tensor[(100, 32, 1), float32] */;
  %1577 = fn (%p0401: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, %p1287: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p2114: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p377: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %1512 = add(%p0401, 1e-05f /* ty=float32 span=/transformer/decoder/layers.3/norm1/Constant_1:0:0 */) /* ty=Tensor[(100, 32, 1), float32] */;
    %1513 = rsqrt(%1512) /* ty=Tensor[(100, 32, 1), float32] */;
    %1514 = multiply(%p1287, %1513) /* ty=Tensor[(100, 32, 256), float32] */;
    %1515 = multiply(%1514, %p2114) /* ty=Tensor[(100, 32, 256), float32] */;
    add(%1515, %p377) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 1), float32], Tensor[(100, 32, 256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1578 = %1577(%1576, %1574, meta[relay.Constant][347] /* ty=Tensor[(256), float32] span=/transformer/decoder/layers.3/norm1/Mul.transformer.decoder.layers.3.norm1.weight:0:0 */, meta[relay.Constant][348] /* ty=Tensor[(256), float32] span=/transformer/decoder/layers.3/norm1/Add_1.transformer.decoder.layers.3.norm1.bias:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
  %1579 = fn (%p0400: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p1286: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1510 = add(%p0400, %p1286) /* ty=Tensor[(100, 32, 256), float32] */;
    %1511 = reshape(%1510, newshape=[-1, 256]) /* ty=Tensor[(3200, 256), float32] */;
    cast(%1511, dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(100, 32, 256), float32], Tensor[(100, 32, 256), float32]) -> Tensor[(3200, 256), float16] */;
  %1580 = %1579(%1578, meta[relay.Constant][284] /* ty=Tensor[(100, 32, 256), float32] span=/transformer/Tile:0:0 */) /* ty=Tensor[(3200, 256), float16] */;
  %1581 = fn (%p0399: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1285: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    nn.dense(%p0399, %p1285, units=None, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(3200, 256), float16] */;
  %1582 = %1581(%1580, meta[relay.Constant][349] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1583 = fn (%p0398: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1284: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, %p2113: float16 /* ty=float16 */, Primitive=1) -> Tensor[(256, 100, 32), float16] {
    %1506 = reshape(%p0398, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %1507 = add(%p1284, %1506) /* ty=Tensor[(100, 32, 256), float16] */;
    %1508 = reshape(%1507, newshape=[100, 256, 32]) /* ty=Tensor[(100, 256, 32), float16] */;
    %1509 = transpose(%1508, axes=[1, 0, 2]) /* ty=Tensor[(256, 100, 32), float16] */;
    divide(%1509, %p2113) /* ty=Tensor[(256, 100, 32), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256), float16], float16) -> Tensor[(256, 100, 32), float16] */;
  %1588 = fn (%p0424: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %1587 = reshape(%p0424, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float32] */;
    cast(%1587, dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(1568, 256), float16] */;
  %1589 = %1588(%1078) /* ty=Tensor[(1568, 256), float16] */;
  %1590 = fn (%p0423: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1301: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p0423, %p1301, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %1591 = %1590(%1589, meta[relay.Constant][351] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %1592 = fn (%p0422: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1300: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(256, 49, 32), float16] {
    %1584 = reshape(%p0422, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %1585 = add(%p1300, %1584) /* ty=Tensor[(49, 32, 256), float16] */;
    %1586 = reshape(%1585, newshape=[49, 256, 32]) /* ty=Tensor[(49, 256, 32), float16] */;
    transpose(%1586, axes=[1, 0, 2]) /* ty=Tensor[(256, 49, 32), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16]) -> Tensor[(256, 49, 32), float16] */;
  %1593 = %1583(%1582, meta[relay.Constant][350] /* ty=Tensor[(256), float16] */, 5.65625f16 /* ty=float16 */) /* ty=Tensor[(256, 100, 32), float16] */;
  %1594 = %1592(%1591, meta[relay.Constant][352] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(256, 49, 32), float16] */;
  %1595 = fn (%p0397: Tensor[(256, 100, 32), float16] /* ty=Tensor[(256, 100, 32), float16] */, %p1283: Tensor[(256, 49, 32), float16] /* ty=Tensor[(256, 49, 32), float16] */, Primitive=1) -> Tensor[(256, 100, 49), float16] {
    nn.batch_matmul(%p0397, %p1283, out_dtype="float16", transpose_b=True) /* ty=Tensor[(256, 100, 49), float16] */
  } /* ty=fn (Tensor[(256, 100, 32), float16], Tensor[(256, 49, 32), float16]) -> Tensor[(256, 100, 49), float16] */;
  %1596 = %1595(%1593, %1594) /* ty=Tensor[(256, 100, 49), float16] */;
  %1597 = fn (%p0396: Tensor[(256, 100, 49), float16] /* ty=Tensor[(256, 100, 49), float16] */, %p1282: Tensor[(256, 1, 49), float16] /* ty=Tensor[(256, 1, 49), float16] */, Primitive=1) -> Tensor[(256, 100, 49), float32] {
    %1504 = reshape(%p0396, newshape=[256, 100, 49]) /* ty=Tensor[(256, 100, 49), float16] */;
    %1505 = add(%1504, %p1282) /* ty=Tensor[(256, 100, 49), float16] */;
    cast(%1505, dtype="float32") /* ty=Tensor[(256, 100, 49), float32] */
  } /* ty=fn (Tensor[(256, 100, 49), float16], Tensor[(256, 1, 49), float16]) -> Tensor[(256, 100, 49), float32] */;
  %1598 = %1597(%1596, meta[relay.Constant][353] /* ty=Tensor[(256, 1, 49), float16] */) /* ty=Tensor[(256, 100, 49), float32] */;
  %1599 = fn (%p0395: Tensor[(256, 100, 49), float32] /* ty=Tensor[(256, 100, 49), float32] */, Primitive=1) -> Tensor[(256, 100, 49), float16] {
    %1503 = nn.softmax(%p0395, axis=2) /* ty=Tensor[(256, 100, 49), float32] */;
    cast(%1503, dtype="float16") /* ty=Tensor[(256, 100, 49), float16] */
  } /* ty=fn (Tensor[(256, 100, 49), float32]) -> Tensor[(256, 100, 49), float16] */;
  %1604 = fn (%p0427: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %1603 = reshape(%p0427, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float32] */;
    cast(%1603, dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(1568, 256), float16] */;
  %1605 = %1604(%1076) /* ty=Tensor[(1568, 256), float16] */;
  %1606 = fn (%p0426: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1303: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p0426, %p1303, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %1607 = %1606(%1605, meta[relay.Constant][354] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %1608 = fn (%p0425: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1302: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(256, 32, 49), float16] {
    %1600 = reshape(%p0425, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %1601 = add(%p1302, %1600) /* ty=Tensor[(49, 32, 256), float16] */;
    %1602 = reshape(%1601, newshape=[49, 256, 32]) /* ty=Tensor[(49, 256, 32), float16] */;
    transpose(%1602, axes=[1, 2, 0]) /* ty=Tensor[(256, 32, 49), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16]) -> Tensor[(256, 32, 49), float16] */;
  %1609 = %1599(%1598) /* ty=Tensor[(256, 100, 49), float16] */;
  %1610 = %1608(%1607, meta[relay.Constant][355] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(256, 32, 49), float16] */;
  %1611 = fn (%p0394: Tensor[(256, 100, 49), float16] /* ty=Tensor[(256, 100, 49), float16] */, %p1281: Tensor[(256, 32, 49), float16] /* ty=Tensor[(256, 32, 49), float16] */, Primitive=1) -> Tensor[(256, 100, 32), float16] {
    nn.batch_matmul(%p0394, %p1281, out_dtype="float16", transpose_b=True) /* ty=Tensor[(256, 100, 32), float16] */
  } /* ty=fn (Tensor[(256, 100, 49), float16], Tensor[(256, 32, 49), float16]) -> Tensor[(256, 100, 32), float16] */;
  %1612 = %1611(%1609, %1610) /* ty=Tensor[(256, 100, 32), float16] */;
  %1613 = fn (%p0393: Tensor[(256, 100, 32), float16] /* ty=Tensor[(256, 100, 32), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1501 = reshape(%p0393, newshape=[256, 100, 32]) /* ty=Tensor[(256, 100, 32), float16] */;
    %1502 = transpose(%1501, axes=[1, 0, 2]) /* ty=Tensor[(100, 256, 32), float16] */;
    reshape(%1502, newshape=[3200, 256]) /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(256, 100, 32), float16]) -> Tensor[(3200, 256), float16] */;
  %1614 = %1613(%1612) /* ty=Tensor[(3200, 256), float16] */;
  %1615 = fn (%p0392: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1280: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, %p2112: Tensor[(1, 256), float16] /* ty=Tensor[(1, 256), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1500 = nn.dense(%p0392, %p1280, units=256, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */;
    add(%1500, %p2112) /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256, 256), float16], Tensor[(1, 256), float16]) -> Tensor[(3200, 256), float16] */;
  %1616 = %1615(%1614, meta[relay.Constant][356] /* ty=Tensor[(256, 256), float16] */, meta[relay.Constant][357] /* ty=Tensor[(1, 256), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1617 = fn (%p0391: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1279: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %1498 = reshape(%p0391, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %1499 = cast(%1498, dtype="float32") /* ty=Tensor[(100, 32, 256), float32] */;
    add(%p1279, %1499) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1618 = %1617(%1616, %1578) /* ty=Tensor[(100, 32, 256), float32] */;
  %1619 = fn (%p0428: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    mean(%p0428, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1620 = %1619(%1618) /* ty=Tensor[(100, 32, 1), float32] */;
  %1621 = fn (%p0390: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p1278: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    subtract(%p0390, %p1278) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32], Tensor[(100, 32, 1), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1622 = %1621(%1618, %1620) /* ty=Tensor[(100, 32, 256), float32] */;
  %1623 = fn (%p0389: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    %1497 = power(%p0389, 2f /* ty=float32 span=/transformer/decoder/layers.3/norm2/Constant:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
    mean(%1497, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1624 = %1623(%1622) /* ty=Tensor[(100, 32, 1), float32] */;
  %1625 = fn (%p0388: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, %p1277: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p2111: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p376: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %1493 = add(%p0388, 1e-05f /* ty=float32 span=/transformer/decoder/layers.3/norm2/Constant_1:0:0 */) /* ty=Tensor[(100, 32, 1), float32] */;
    %1494 = rsqrt(%1493) /* ty=Tensor[(100, 32, 1), float32] */;
    %1495 = multiply(%p1277, %1494) /* ty=Tensor[(100, 32, 256), float32] */;
    %1496 = multiply(%1495, %p2111) /* ty=Tensor[(100, 32, 256), float32] */;
    add(%1496, %p376) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 1), float32], Tensor[(100, 32, 256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1626 = %1625(%1624, %1622, meta[relay.Constant][358] /* ty=Tensor[(256), float32] span=/transformer/decoder/layers.3/norm2/Mul.transformer.decoder.layers.3.norm2.weight:0:0 */, meta[relay.Constant][359] /* ty=Tensor[(256), float32] span=/transformer/decoder/layers.3/norm2/Add_1.transformer.decoder.layers.3.norm2.bias:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
  %1627 = fn (%p0387: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1492 = reshape(%p0387, newshape=[-1, 256]) /* ty=Tensor[(3200, 256), float32] */;
    cast(%1492, dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(3200, 256), float16] */;
  %1628 = %1627(%1626) /* ty=Tensor[(3200, 256), float16] */;
  %1629 = fn (%p0386: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1276: Tensor[(2048, 256), float16] /* ty=Tensor[(2048, 256), float16] */, Primitive=1) -> Tensor[(3200, 2048), float16] {
    nn.dense(%p0386, %p1276, units=None, out_dtype="float16") /* ty=Tensor[(3200, 2048), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(2048, 256), float16]) -> Tensor[(3200, 2048), float16] */;
  %1630 = %1629(%1628, meta[relay.Constant][360] /* ty=Tensor[(2048, 256), float16] */) /* ty=Tensor[(3200, 2048), float16] */;
  %1631 = fn (%p0385: Tensor[(3200, 2048), float16] /* ty=Tensor[(3200, 2048), float16] */, %p1275: Tensor[(2048), float16] /* ty=Tensor[(2048), float16] */, Primitive=1) -> Tensor[(3200, 2048), float16] {
    %1489 = reshape(%p0385, newshape=[100, 32, 2048]) /* ty=Tensor[(100, 32, 2048), float16] */;
    %1490 = add(%p1275, %1489) /* ty=Tensor[(100, 32, 2048), float16] */;
    %1491 = nn.relu(%1490) /* ty=Tensor[(100, 32, 2048), float16] */;
    reshape(%1491, newshape=[-1, 2048]) /* ty=Tensor[(3200, 2048), float16] */
  } /* ty=fn (Tensor[(3200, 2048), float16], Tensor[(2048), float16]) -> Tensor[(3200, 2048), float16] */;
  %1632 = %1631(%1630, meta[relay.Constant][361] /* ty=Tensor[(2048), float16] */) /* ty=Tensor[(3200, 2048), float16] */;
  %1633 = fn (%p0384: Tensor[(3200, 2048), float16] /* ty=Tensor[(3200, 2048), float16] */, %p1274: Tensor[(256, 2048), float16] /* ty=Tensor[(256, 2048), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    nn.dense(%p0384, %p1274, units=None, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 2048), float16], Tensor[(256, 2048), float16]) -> Tensor[(3200, 256), float16] */;
  %1634 = %1633(%1632, meta[relay.Constant][362] /* ty=Tensor[(256, 2048), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1635 = fn (%p0383: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1273: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, %p2109: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %1486 = reshape(%p0383, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %1487 = add(%p1273, %1486) /* ty=Tensor[(100, 32, 256), float16] */;
    %1488 = cast(%1487, dtype="float32") /* ty=Tensor[(100, 32, 256), float32] */;
    add(%p2109, %1488) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256), float16], Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1636 = %1635(%1634, meta[relay.Constant][363] /* ty=Tensor[(256), float16] */, %1626) /* ty=Tensor[(100, 32, 256), float32] */;
  %1637 = fn (%p0429: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    mean(%p0429, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1638 = %1637(%1636) /* ty=Tensor[(100, 32, 1), float32] */;
  %1639 = fn (%p0382: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p1272: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    subtract(%p0382, %p1272) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32], Tensor[(100, 32, 1), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1640 = %1639(%1636, %1638) /* ty=Tensor[(100, 32, 256), float32] */;
  %1641 = fn (%p0381: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    %1485 = power(%p0381, 2f /* ty=float32 span=/transformer/decoder/layers.3/norm3/Constant:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
    mean(%1485, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1642 = %1641(%1640) /* ty=Tensor[(100, 32, 1), float32] */;
  %1643 = fn (%p0380: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, %p1271: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p2108: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p375: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %1481 = add(%p0380, 1e-05f /* ty=float32 span=/transformer/decoder/layers.3/norm3/Constant_1:0:0 */) /* ty=Tensor[(100, 32, 1), float32] */;
    %1482 = rsqrt(%1481) /* ty=Tensor[(100, 32, 1), float32] */;
    %1483 = multiply(%p1271, %1482) /* ty=Tensor[(100, 32, 256), float32] */;
    %1484 = multiply(%1483, %p2108) /* ty=Tensor[(100, 32, 256), float32] */;
    add(%1484, %p375) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 1), float32], Tensor[(100, 32, 256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1644 = %1643(%1642, %1640, meta[relay.Constant][364] /* ty=Tensor[(256), float32] span=/transformer/decoder/layers.3/norm3/Mul.transformer.decoder.layers.3.norm3.weight:0:0 */, meta[relay.Constant][365] /* ty=Tensor[(256), float32] span=/transformer/decoder/layers.3/norm3/Add_1.transformer.decoder.layers.3.norm3.bias:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
  %1645 = fn (%p0430: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    mean(%p0430, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1646 = %1645(%1644) /* ty=Tensor[(100, 32, 1), float32] */;
  %1647 = fn (%p0379: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p1270: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    subtract(%p0379, %p1270) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32], Tensor[(100, 32, 1), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1648 = %1647(%1644, %1646) /* ty=Tensor[(100, 32, 256), float32] */;
  %1649 = fn (%p0378: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p2: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p3: Tensor[(256), float32] /* ty=Tensor[(256), Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %1480 = power(%p0378, 2f /* ty=float32 span=/transformer/decoder/norm_3/Constant:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
    %1481 = mean(%1480, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
    %3 = add(%1481, 1e-05f /* ty=float32 span=/transformer/decoder/norm/Constant_1:0:0 */) /* ty=Tensor[(100, 32, 1), float32] */;
    %4 = rsqrt(%3) /* ty=Tensor[(100, 32, 1), float32] */;
    %5 = multiply(%p0378, %4) /* ty=Tensor[(100, 32, 256), float32] */;
    %6 = multiply(%5, %p2) /* ty=Tensor[(100, 32, 256), float32] */;
    %7 = add(%6, %p3) /* ty=Tensor[(100, 32, 256), float32] */;
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1699 = fn (%p0467: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p1330: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    add(%p0467, %p1330) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32], Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1700 = %1699(%1644, meta[relay.Constant][284] /* ty=Tensor[(100, 32, 256), float32] span=/transformer/Tile:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
  %1701 = fn (%p0466: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1698 = reshape(%p0466, newshape=[-1, 256]) /* ty=Tensor[(3200, 256), float32] */;
    cast(%1698, dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(3200, 256), float16] */;
  %1702 = %1701(%1700) /* ty=Tensor[(3200, 256), float16] */;
  %1703 = fn (%p0465: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1329: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    nn.dense(%p0465, %p1329, units=None, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(3200, 256), float16] */;
  %1704 = %1703(%1702, meta[relay.Constant][366] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1705 = fn (%p0464: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1328: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, %p2124: float16 /* ty=float16 */, Primitive=1) -> Tensor[(256, 100, 32), float16] {
    %1694 = reshape(%p0464, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %1695 = add(%p1328, %1694) /* ty=Tensor[(100, 32, 256), float16] */;
    %1696 = reshape(%1695, newshape=[100, 256, 32]) /* ty=Tensor[(100, 256, 32), float16] */;
    %1697 = transpose(%1696, axes=[1, 0, 2]) /* ty=Tensor[(256, 100, 32), float16] */;
    divide(%1697, %p2124) /* ty=Tensor[(256, 100, 32), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256), float16], float16) -> Tensor[(256, 100, 32), float16] */;
  %1710 = fn (%p0470: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1709 = reshape(%p0470, newshape=[-1, 256]) /* ty=Tensor[(3200, 256), float32] */;
    cast(%1709, dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(3200, 256), float16] */;
  %1711 = %1710(%1700) /* ty=Tensor[(3200, 256), float16] */;
  %1712 = fn (%p0469: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1332: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    nn.dense(%p0469, %p1332, units=None, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(3200, 256), float16] */;
  %1713 = %1712(%1711, meta[relay.Constant][368] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1714 = fn (%p0468: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1331: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(256, 100, 32), float16] {
    %1706 = reshape(%p0468, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %1707 = add(%p1331, %1706) /* ty=Tensor[(100, 32, 256), float16] */;
    %1708 = reshape(%1707, newshape=[100, 256, 32]) /* ty=Tensor[(100, 256, 32), float16] */;
    transpose(%1708, axes=[1, 0, 2]) /* ty=Tensor[(256, 100, 32), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256), float16]) -> Tensor[(256, 100, 32), float16] */;
  %1715 = %1705(%1704, meta[relay.Constant][367] /* ty=Tensor[(256), float16] */, 5.65625f16 /* ty=float16 */) /* ty=Tensor[(256, 100, 32), float16] */;
  %1716 = %1714(%1713, meta[relay.Constant][369] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(256, 100, 32), float16] */;
  %1717 = fn (%p0463: Tensor[(256, 100, 32), float16] /* ty=Tensor[(256, 100, 32), float16] */, %p1327: Tensor[(256, 100, 32), float16] /* ty=Tensor[(256, 100, 32), float16] */, Primitive=1) -> Tensor[(256, 100, 100), float16] {
    nn.batch_matmul(%p0463, %p1327, out_dtype="float16", transpose_b=True) /* ty=Tensor[(256, 100, 100), float16] */
  } /* ty=fn (Tensor[(256, 100, 32), float16], Tensor[(256, 100, 32), float16]) -> Tensor[(256, 100, 100), float16] */;
  %1718 = %1717(%1715, %1716) /* ty=Tensor[(256, 100, 100), float16] */;
  %1719 = fn (%p0462: Tensor[(256, 100, 100), float16] /* ty=Tensor[(256, 100, 100), float16] */, Primitive=1) -> Tensor[(256, 100, 100), float32] {
    %1693 = reshape(%p0462, newshape=[256, 100, 100]) /* ty=Tensor[(256, 100, 100), float16] */;
    cast(%1693, dtype="float32") /* ty=Tensor[(256, 100, 100), float32] */
  } /* ty=fn (Tensor[(256, 100, 100), float16]) -> Tensor[(256, 100, 100), float32] */;
  %1720 = %1719(%1718) /* ty=Tensor[(256, 100, 100), float32] */;
  %1721 = fn (%p0461: Tensor[(256, 100, 100), float32] /* ty=Tensor[(256, 100, 100), float32] */, Primitive=1) -> Tensor[(256, 100, 100), float16] {
    %1692 = nn.softmax(%p0461, axis=2) /* ty=Tensor[(256, 100, 100), float32] */;
    cast(%1692, dtype="float16") /* ty=Tensor[(256, 100, 100), float16] */
  } /* ty=fn (Tensor[(256, 100, 100), float32]) -> Tensor[(256, 100, 100), float16] */;
  %1726 = fn (%p0473: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1725 = reshape(%p0473, newshape=[-1, 256]) /* ty=Tensor[(3200, 256), float32] */;
    cast(%1725, dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(3200, 256), float16] */;
  %1727 = %1726(%1644) /* ty=Tensor[(3200, 256), float16] */;
  %1728 = fn (%p0472: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1334: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    nn.dense(%p0472, %p1334, units=None, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(3200, 256), float16] */;
  %1729 = %1728(%1727, meta[relay.Constant][370] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1730 = fn (%p0471: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1333: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(256, 32, 100), float16] {
    %1722 = reshape(%p0471, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %1723 = add(%p1333, %1722) /* ty=Tensor[(100, 32, 256), float16] */;
    %1724 = reshape(%1723, newshape=[100, 256, 32]) /* ty=Tensor[(100, 256, 32), float16] */;
    transpose(%1724, axes=[1, 2, 0]) /* ty=Tensor[(256, 32, 100), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256), float16]) -> Tensor[(256, 32, 100), float16] */;
  %1731 = %1721(%1720) /* ty=Tensor[(256, 100, 100), float16] */;
  %1732 = %1730(%1729, meta[relay.Constant][371] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(256, 32, 100), float16] */;
  %1733 = fn (%p0460: Tensor[(256, 100, 100), float16] /* ty=Tensor[(256, 100, 100), float16] */, %p1326: Tensor[(256, 32, 100), float16] /* ty=Tensor[(256, 32, 100), float16] */, Primitive=1) -> Tensor[(256, 100, 32), float16] {
    nn.batch_matmul(%p0460, %p1326, out_dtype="float16", transpose_b=True) /* ty=Tensor[(256, 100, 32), float16] */
  } /* ty=fn (Tensor[(256, 100, 100), float16], Tensor[(256, 32, 100), float16]) -> Tensor[(256, 100, 32), float16] */;
  %1734 = %1733(%1731, %1732) /* ty=Tensor[(256, 100, 32), float16] */;
  %1735 = fn (%p0459: Tensor[(256, 100, 32), float16] /* ty=Tensor[(256, 100, 32), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1690 = reshape(%p0459, newshape=[256, 100, 32]) /* ty=Tensor[(256, 100, 32), float16] */;
    %1691 = transpose(%1690, axes=[1, 0, 2]) /* ty=Tensor[(100, 256, 32), float16] */;
    reshape(%1691, newshape=[3200, 256]) /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(256, 100, 32), float16]) -> Tensor[(3200, 256), float16] */;
  %1736 = %1735(%1734) /* ty=Tensor[(3200, 256), float16] */;
  %1737 = fn (%p0458: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1325: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, %p2123: Tensor[(1, 256), float16] /* ty=Tensor[(1, 256), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1689 = nn.dense(%p0458, %p1325, units=256, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */;
    add(%1689, %p2123) /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256, 256), float16], Tensor[(1, 256), float16]) -> Tensor[(3200, 256), float16] */;
  %1738 = %1737(%1736, meta[relay.Constant][372] /* ty=Tensor[(256, 256), float16] */, meta[relay.Constant][373] /* ty=Tensor[(1, 256), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1739 = fn (%p0457: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1324: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %1687 = reshape(%p0457, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %1688 = cast(%1687, dtype="float32") /* ty=Tensor[(100, 32, 256), float32] */;
    add(%p1324, %1688) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1740 = %1739(%1738, %1644) /* ty=Tensor[(100, 32, 256), float32] */;
  %1741 = fn (%p0474: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    mean(%p0474, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1742 = %1741(%1740) /* ty=Tensor[(100, 32, 1), float32] */;
  %1743 = fn (%p0456: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p1323: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    subtract(%p0456, %p1323) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32], Tensor[(100, 32, 1), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1744 = %1743(%1740, %1742) /* ty=Tensor[(100, 32, 256), float32] */;
  %1745 = fn (%p0455: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    %1686 = power(%p0455, 2f /* ty=float32 span=/transformer/decoder/layers.4/norm1/Constant:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
    mean(%1686, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1746 = %1745(%1744) /* ty=Tensor[(100, 32, 1), float32] */;
  %1747 = fn (%p0454: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, %p1322: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p2122: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p380: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %1682 = add(%p0454, 1e-05f /* ty=float32 span=/transformer/decoder/layers.4/norm1/Constant_1:0:0 */) /* ty=Tensor[(100, 32, 1), float32] */;
    %1683 = rsqrt(%1682) /* ty=Tensor[(100, 32, 1), float32] */;
    %1684 = multiply(%p1322, %1683) /* ty=Tensor[(100, 32, 256), float32] */;
    %1685 = multiply(%1684, %p2122) /* ty=Tensor[(100, 32, 256), float32] */;
    add(%1685, %p380) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 1), float32], Tensor[(100, 32, 256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1748 = %1747(%1746, %1744, meta[relay.Constant][374] /* ty=Tensor[(256), float32] span=/transformer/decoder/layers.4/norm1/Mul.transformer.decoder.layers.4.norm1.weight:0:0 */, meta[relay.Constant][375] /* ty=Tensor[(256), float32] span=/transformer/decoder/layers.4/norm1/Add_1.transformer.decoder.layers.4.norm1.bias:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
  %1749 = fn (%p0453: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p1321: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1680 = add(%p0453, %p1321) /* ty=Tensor[(100, 32, 256), float32] */;
    %1681 = reshape(%1680, newshape=[-1, 256]) /* ty=Tensor[(3200, 256), float32] */;
    cast(%1681, dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(100, 32, 256), float32], Tensor[(100, 32, 256), float32]) -> Tensor[(3200, 256), float16] */;
  %1750 = %1749(%1748, meta[relay.Constant][284] /* ty=Tensor[(100, 32, 256), float32] span=/transformer/Tile:0:0 */) /* ty=Tensor[(3200, 256), float16] */;
  %1751 = fn (%p0452: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1320: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    nn.dense(%p0452, %p1320, units=None, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(3200, 256), float16] */;
  %1752 = %1751(%1750, meta[relay.Constant][376] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1753 = fn (%p0451: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1319: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, %p2121: float16 /* ty=float16 */, Primitive=1) -> Tensor[(256, 100, 32), float16] {
    %1676 = reshape(%p0451, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %1677 = add(%p1319, %1676) /* ty=Tensor[(100, 32, 256), float16] */;
    %1678 = reshape(%1677, newshape=[100, 256, 32]) /* ty=Tensor[(100, 256, 32), float16] */;
    %1679 = transpose(%1678, axes=[1, 0, 2]) /* ty=Tensor[(256, 100, 32), float16] */;
    divide(%1679, %p2121) /* ty=Tensor[(256, 100, 32), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256), float16], float16) -> Tensor[(256, 100, 32), float16] */;
  %1758 = fn (%p0477: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %1757 = reshape(%p0477, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float32] */;
    cast(%1757, dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(1568, 256), float16] */;
  %1759 = %1758(%1078) /* ty=Tensor[(1568, 256), float16] */;
  %1760 = fn (%p0476: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1336: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p0476, %p1336, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %1761 = %1760(%1759, meta[relay.Constant][378] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %1762 = fn (%p0475: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1335: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(256, 49, 32), float16] {
    %1754 = reshape(%p0475, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %1755 = add(%p1335, %1754) /* ty=Tensor[(49, 32, 256), float16] */;
    %1756 = reshape(%1755, newshape=[49, 256, 32]) /* ty=Tensor[(49, 256, 32), float16] */;
    transpose(%1756, axes=[1, 0, 2]) /* ty=Tensor[(256, 49, 32), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16]) -> Tensor[(256, 49, 32), float16] */;
  %1763 = %1753(%1752, meta[relay.Constant][377] /* ty=Tensor[(256), float16] */, 5.65625f16 /* ty=float16 */) /* ty=Tensor[(256, 100, 32), float16] */;
  %1764 = %1762(%1761, meta[relay.Constant][379] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(256, 49, 32), float16] */;
  %1765 = fn (%p0450: Tensor[(256, 100, 32), float16] /* ty=Tensor[(256, 100, 32), float16] */, %p1318: Tensor[(256, 49, 32), float16] /* ty=Tensor[(256, 49, 32), float16] */, Primitive=1) -> Tensor[(256, 100, 49), float16] {
    nn.batch_matmul(%p0450, %p1318, out_dtype="float16", transpose_b=True) /* ty=Tensor[(256, 100, 49), float16] */
  } /* ty=fn (Tensor[(256, 100, 32), float16], Tensor[(256, 49, 32), float16]) -> Tensor[(256, 100, 49), float16] */;
  %1766 = %1765(%1763, %1764) /* ty=Tensor[(256, 100, 49), float16] */;
  %1767 = fn (%p0449: Tensor[(256, 100, 49), float16] /* ty=Tensor[(256, 100, 49), float16] */, %p1317: Tensor[(256, 1, 49), float16] /* ty=Tensor[(256, 1, 49), float16] */, Primitive=1) -> Tensor[(256, 100, 49), float32] {
    %1674 = reshape(%p0449, newshape=[256, 100, 49]) /* ty=Tensor[(256, 100, 49), float16] */;
    %1675 = add(%1674, %p1317) /* ty=Tensor[(256, 100, 49), float16] */;
    cast(%1675, dtype="float32") /* ty=Tensor[(256, 100, 49), float32] */
  } /* ty=fn (Tensor[(256, 100, 49), float16], Tensor[(256, 1, 49), float16]) -> Tensor[(256, 100, 49), float32] */;
  %1768 = %1767(%1766, meta[relay.Constant][380] /* ty=Tensor[(256, 1, 49), float16] */) /* ty=Tensor[(256, 100, 49), float32] */;
  %1769 = fn (%p0448: Tensor[(256, 100, 49), float32] /* ty=Tensor[(256, 100, 49), float32] */, Primitive=1) -> Tensor[(256, 100, 49), float16] {
    %1673 = nn.softmax(%p0448, axis=2) /* ty=Tensor[(256, 100, 49), float32] */;
    cast(%1673, dtype="float16") /* ty=Tensor[(256, 100, 49), float16] */
  } /* ty=fn (Tensor[(256, 100, 49), float32]) -> Tensor[(256, 100, 49), float16] */;
  %1774 = fn (%p0480: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %1773 = reshape(%p0480, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float32] */;
    cast(%1773, dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(1568, 256), float16] */;
  %1775 = %1774(%1076) /* ty=Tensor[(1568, 256), float16] */;
  %1776 = fn (%p0479: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1338: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p0479, %p1338, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %1777 = %1776(%1775, meta[relay.Constant][381] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %1778 = fn (%p0478: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1337: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(256, 32, 49), float16] {
    %1770 = reshape(%p0478, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %1771 = add(%p1337, %1770) /* ty=Tensor[(49, 32, 256), float16] */;
    %1772 = reshape(%1771, newshape=[49, 256, 32]) /* ty=Tensor[(49, 256, 32), float16] */;
    transpose(%1772, axes=[1, 2, 0]) /* ty=Tensor[(256, 32, 49), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16]) -> Tensor[(256, 32, 49), float16] */;
  %1779 = %1769(%1768) /* ty=Tensor[(256, 100, 49), float16] */;
  %1780 = %1778(%1777, meta[relay.Constant][382] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(256, 32, 49), float16] */;
  %1781 = fn (%p0447: Tensor[(256, 100, 49), float16] /* ty=Tensor[(256, 100, 49), float16] */, %p1316: Tensor[(256, 32, 49), float16] /* ty=Tensor[(256, 32, 49), float16] */, Primitive=1) -> Tensor[(256, 100, 32), float16] {
    nn.batch_matmul(%p0447, %p1316, out_dtype="float16", transpose_b=True) /* ty=Tensor[(256, 100, 32), float16] */
  } /* ty=fn (Tensor[(256, 100, 49), float16], Tensor[(256, 32, 49), float16]) -> Tensor[(256, 100, 32), float16] */;
  %1782 = %1781(%1779, %1780) /* ty=Tensor[(256, 100, 32), float16] */;
  %1783 = fn (%p0446: Tensor[(256, 100, 32), float16] /* ty=Tensor[(256, 100, 32), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1671 = reshape(%p0446, newshape=[256, 100, 32]) /* ty=Tensor[(256, 100, 32), float16] */;
    %1672 = transpose(%1671, axes=[1, 0, 2]) /* ty=Tensor[(100, 256, 32), float16] */;
    reshape(%1672, newshape=[3200, 256]) /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(256, 100, 32), float16]) -> Tensor[(3200, 256), float16] */;
  %1784 = %1783(%1782) /* ty=Tensor[(3200, 256), float16] */;
  %1785 = fn (%p0445: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1315: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, %p2120: Tensor[(1, 256), float16] /* ty=Tensor[(1, 256), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1670 = nn.dense(%p0445, %p1315, units=256, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */;
    add(%1670, %p2120) /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256, 256), float16], Tensor[(1, 256), float16]) -> Tensor[(3200, 256), float16] */;
  %1786 = %1785(%1784, meta[relay.Constant][383] /* ty=Tensor[(256, 256), float16] */, meta[relay.Constant][384] /* ty=Tensor[(1, 256), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1787 = fn (%p0444: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1314: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %1668 = reshape(%p0444, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %1669 = cast(%1668, dtype="float32") /* ty=Tensor[(100, 32, 256), float32] */;
    add(%p1314, %1669) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1788 = %1787(%1786, %1748) /* ty=Tensor[(100, 32, 256), float32] */;
  %1789 = fn (%p0481: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    mean(%p0481, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1790 = %1789(%1788) /* ty=Tensor[(100, 32, 1), float32] */;
  %1791 = fn (%p0443: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p1313: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    subtract(%p0443, %p1313) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32], Tensor[(100, 32, 1), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1792 = %1791(%1788, %1790) /* ty=Tensor[(100, 32, 256), float32] */;
  %1793 = fn (%p0442: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    %1667 = power(%p0442, 2f /* ty=float32 span=/transformer/decoder/layers.4/norm2/Constant:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
    mean(%1667, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1794 = %1793(%1792) /* ty=Tensor[(100, 32, 1), float32] */;
  %1795 = fn (%p0441: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, %p1312: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p2119: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p379: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %1663 = add(%p0441, 1e-05f /* ty=float32 span=/transformer/decoder/layers.4/norm2/Constant_1:0:0 */) /* ty=Tensor[(100, 32, 1), float32] */;
    %1664 = rsqrt(%1663) /* ty=Tensor[(100, 32, 1), float32] */;
    %1665 = multiply(%p1312, %1664) /* ty=Tensor[(100, 32, 256), float32] */;
    %1666 = multiply(%1665, %p2119) /* ty=Tensor[(100, 32, 256), float32] */;
    add(%1666, %p379) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 1), float32], Tensor[(100, 32, 256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1796 = %1795(%1794, %1792, meta[relay.Constant][385] /* ty=Tensor[(256), float32] span=/transformer/decoder/layers.4/norm2/Mul.transformer.decoder.layers.4.norm2.weight:0:0 */, meta[relay.Constant][386] /* ty=Tensor[(256), float32] span=/transformer/decoder/layers.4/norm2/Add_1.transformer.decoder.layers.4.norm2.bias:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
  %1797 = fn (%p0440: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1662 = reshape(%p0440, newshape=[-1, 256]) /* ty=Tensor[(3200, 256), float32] */;
    cast(%1662, dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(3200, 256), float16] */;
  %1798 = %1797(%1796) /* ty=Tensor[(3200, 256), float16] */;
  %1799 = fn (%p0439: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1311: Tensor[(2048, 256), float16] /* ty=Tensor[(2048, 256), float16] */, Primitive=1) -> Tensor[(3200, 2048), float16] {
    nn.dense(%p0439, %p1311, units=None, out_dtype="float16") /* ty=Tensor[(3200, 2048), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(2048, 256), float16]) -> Tensor[(3200, 2048), float16] */;
  %1800 = %1799(%1798, meta[relay.Constant][387] /* ty=Tensor[(2048, 256), float16] */) /* ty=Tensor[(3200, 2048), float16] */;
  %1801 = fn (%p0438: Tensor[(3200, 2048), float16] /* ty=Tensor[(3200, 2048), float16] */, %p1309: Tensor[(2048), float16] /* ty=Tensor[(2048), float16] */, Primitive=1) -> Tensor[(3200, 2048), float16] {
    %1659 = reshape(%p0438, newshape=[100, 32, 2048]) /* ty=Tensor[(100, 32, 2048), float16] */;
    %1660 = add(%p1309, %1659) /* ty=Tensor[(100, 32, 2048), float16] */;
    %1661 = nn.relu(%1660) /* ty=Tensor[(100, 32, 2048), float16] */;
    reshape(%1661, newshape=[-1, 2048]) /* ty=Tensor[(3200, 2048), float16] */
  } /* ty=fn (Tensor[(3200, 2048), float16], Tensor[(2048), float16]) -> Tensor[(3200, 2048), float16] */;
  %1802 = %1801(%1800, meta[relay.Constant][388] /* ty=Tensor[(2048), float16] */) /* ty=Tensor[(3200, 2048), float16] */;
  %1803 = fn (%p0437: Tensor[(3200, 2048), float16] /* ty=Tensor[(3200, 2048), float16] */, %p1308: Tensor[(256, 2048), float16] /* ty=Tensor[(256, 2048), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    nn.dense(%p0437, %p1308, units=None, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 2048), float16], Tensor[(256, 2048), float16]) -> Tensor[(3200, 256), float16] */;
  %1804 = %1803(%1802, meta[relay.Constant][389] /* ty=Tensor[(256, 2048), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1805 = fn (%p0436: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1307: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, %p2118: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %1656 = reshape(%p0436, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %1657 = add(%p1307, %1656) /* ty=Tensor[(100, 32, 256), float16] */;
    %1658 = cast(%1657, dtype="float32") /* ty=Tensor[(100, 32, 256), float32] */;
    add(%p2118, %1658) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256), float16], Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1806 = %1805(%1804, meta[relay.Constant][390] /* ty=Tensor[(256), float16] */, %1796) /* ty=Tensor[(100, 32, 256), float32] */;
  %1807 = fn (%p0482: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    mean(%p0482, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1808 = %1807(%1806) /* ty=Tensor[(100, 32, 1), float32] */;
  %1809 = fn (%p0435: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p1306: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    subtract(%p0435, %p1306) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32], Tensor[(100, 32, 1), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1810 = %1809(%1806, %1808) /* ty=Tensor[(100, 32, 256), float32] */;
  %1811 = fn (%p0434: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    %1655 = power(%p0434, 2f /* ty=float32 span=/transformer/decoder/layers.4/norm3/Constant:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
    mean(%1655, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1812 = %1811(%1810) /* ty=Tensor[(100, 32, 1), float32] */;
  %1813 = fn (%p0433: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, %p1305: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p2117: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p378: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %1651 = add(%p0433, 1e-05f /* ty=float32 span=/transformer/decoder/layers.4/norm3/Constant_1:0:0 */) /* ty=Tensor[(100, 32, 1), float32] */;
    %1652 = rsqrt(%1651) /* ty=Tensor[(100, 32, 1), float32] */;
    %1653 = multiply(%p1305, %1652) /* ty=Tensor[(100, 32, 256), float32] */;
    %1654 = multiply(%1653, %p2117) /* ty=Tensor[(100, 32, 256), float32] */;
    add(%1654, %p378) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 1), float32], Tensor[(100, 32, 256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1814 = %1813(%1812, %1810, meta[relay.Constant][391] /* ty=Tensor[(256), float32] span=/transformer/decoder/layers.4/norm3/Mul.transformer.decoder.layers.4.norm3.weight:0:0 */, meta[relay.Constant][392] /* ty=Tensor[(256), float32] span=/transformer/decoder/layers.4/norm3/Add_1.transformer.decoder.layers.4.norm3.bias:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
  %1815 = fn (%p0483: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    mean(%p0483, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1816 = %1815(%1814) /* ty=Tensor[(100, 32, 1), float32] */;
  %1817 = fn (%p0432: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p1304: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    subtract(%p0432, %p1304) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32], Tensor[(100, 32, 1), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1818 = %1817(%1814, %1816) /* ty=Tensor[(100, 32, 256), float32] */;
  %1819 = fn (%p0431: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p2: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p3: Tensor[(256), float32] /* ty=Tensor[(256), Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %1650 = power(%p0431, 2f /* ty=float32 span=/transformer/decoder/norm_4/Constant:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
    %1651 = mean(%1650, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
    %3 = add(%1651, 1e-05f /* ty=float32 span=/transformer/decoder/norm/Constant_1:0:0 */) /* ty=Tensor[(100, 32, 1), float32] */;
    %4 = rsqrt(%3) /* ty=Tensor[(100, 32, 1), float32] */;
    %5 = multiply(%p0431, %4) /* ty=Tensor[(100, 32, 256), float32] */;
    %6 = multiply(%5, %p2) /* ty=Tensor[(100, 32, 256), float32] */;
    %7 = add(%6, %p3) /* ty=Tensor[(100, 32, 256), float32] */;
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1869 = fn (%p0520: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p1364: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    add(%p0520, %p1364) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32], Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1870 = %1869(%1814, meta[relay.Constant][284] /* ty=Tensor[(100, 32, 256), float32] span=/transformer/Tile:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
  %1871 = fn (%p0519: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1868 = reshape(%p0519, newshape=[-1, 256]) /* ty=Tensor[(3200, 256), float32] */;
    cast(%1868, dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(3200, 256), float16] */;
  %1872 = %1871(%1870) /* ty=Tensor[(3200, 256), float16] */;
  %1873 = fn (%p0518: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1363: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    nn.dense(%p0518, %p1363, units=None, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(3200, 256), float16] */;
  %1874 = %1873(%1872, meta[relay.Constant][393] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1875 = fn (%p0517: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1362: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, %p2132: float16 /* ty=float16 */, Primitive=1) -> Tensor[(256, 100, 32), float16] {
    %1864 = reshape(%p0517, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %1865 = add(%p1362, %1864) /* ty=Tensor[(100, 32, 256), float16] */;
    %1866 = reshape(%1865, newshape=[100, 256, 32]) /* ty=Tensor[(100, 256, 32), float16] */;
    %1867 = transpose(%1866, axes=[1, 0, 2]) /* ty=Tensor[(256, 100, 32), float16] */;
    divide(%1867, %p2132) /* ty=Tensor[(256, 100, 32), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256), float16], float16) -> Tensor[(256, 100, 32), float16] */;
  %1880 = fn (%p0523: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1879 = reshape(%p0523, newshape=[-1, 256]) /* ty=Tensor[(3200, 256), float32] */;
    cast(%1879, dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(3200, 256), float16] */;
  %1881 = %1880(%1870) /* ty=Tensor[(3200, 256), float16] */;
  %1882 = fn (%p0522: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1366: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    nn.dense(%p0522, %p1366, units=None, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(3200, 256), float16] */;
  %1883 = %1882(%1881, meta[relay.Constant][395] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1884 = fn (%p0521: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1365: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(256, 100, 32), float16] {
    %1876 = reshape(%p0521, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %1877 = add(%p1365, %1876) /* ty=Tensor[(100, 32, 256), float16] */;
    %1878 = reshape(%1877, newshape=[100, 256, 32]) /* ty=Tensor[(100, 256, 32), float16] */;
    transpose(%1878, axes=[1, 0, 2]) /* ty=Tensor[(256, 100, 32), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256), float16]) -> Tensor[(256, 100, 32), float16] */;
  %1885 = %1875(%1874, meta[relay.Constant][394] /* ty=Tensor[(256), float16] */, 5.65625f16 /* ty=float16 */) /* ty=Tensor[(256, 100, 32), float16] */;
  %1886 = %1884(%1883, meta[relay.Constant][396] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(256, 100, 32), float16] */;
  %1887 = fn (%p0516: Tensor[(256, 100, 32), float16] /* ty=Tensor[(256, 100, 32), float16] */, %p1361: Tensor[(256, 100, 32), float16] /* ty=Tensor[(256, 100, 32), float16] */, Primitive=1) -> Tensor[(256, 100, 100), float16] {
    nn.batch_matmul(%p0516, %p1361, out_dtype="float16", transpose_b=True) /* ty=Tensor[(256, 100, 100), float16] */
  } /* ty=fn (Tensor[(256, 100, 32), float16], Tensor[(256, 100, 32), float16]) -> Tensor[(256, 100, 100), float16] */;
  %1888 = %1887(%1885, %1886) /* ty=Tensor[(256, 100, 100), float16] */;
  %1889 = fn (%p0515: Tensor[(256, 100, 100), float16] /* ty=Tensor[(256, 100, 100), float16] */, Primitive=1) -> Tensor[(256, 100, 100), float32] {
    %1863 = reshape(%p0515, newshape=[256, 100, 100]) /* ty=Tensor[(256, 100, 100), float16] */;
    cast(%1863, dtype="float32") /* ty=Tensor[(256, 100, 100), float32] */
  } /* ty=fn (Tensor[(256, 100, 100), float16]) -> Tensor[(256, 100, 100), float32] */;
  %1890 = %1889(%1888) /* ty=Tensor[(256, 100, 100), float32] */;
  %1891 = fn (%p0514: Tensor[(256, 100, 100), float32] /* ty=Tensor[(256, 100, 100), float32] */, Primitive=1) -> Tensor[(256, 100, 100), float16] {
    %1862 = nn.softmax(%p0514, axis=2) /* ty=Tensor[(256, 100, 100), float32] */;
    cast(%1862, dtype="float16") /* ty=Tensor[(256, 100, 100), float16] */
  } /* ty=fn (Tensor[(256, 100, 100), float32]) -> Tensor[(256, 100, 100), float16] */;
  %1896 = fn (%p0526: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1895 = reshape(%p0526, newshape=[-1, 256]) /* ty=Tensor[(3200, 256), float32] */;
    cast(%1895, dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(3200, 256), float16] */;
  %1897 = %1896(%1814) /* ty=Tensor[(3200, 256), float16] */;
  %1898 = fn (%p0525: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1368: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    nn.dense(%p0525, %p1368, units=None, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(3200, 256), float16] */;
  %1899 = %1898(%1897, meta[relay.Constant][397] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1900 = fn (%p0524: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1367: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(256, 32, 100), float16] {
    %1892 = reshape(%p0524, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %1893 = add(%p1367, %1892) /* ty=Tensor[(100, 32, 256), float16] */;
    %1894 = reshape(%1893, newshape=[100, 256, 32]) /* ty=Tensor[(100, 256, 32), float16] */;
    transpose(%1894, axes=[1, 2, 0]) /* ty=Tensor[(256, 32, 100), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256), float16]) -> Tensor[(256, 32, 100), float16] */;
  %1901 = %1891(%1890) /* ty=Tensor[(256, 100, 100), float16] */;
  %1902 = %1900(%1899, meta[relay.Constant][398] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(256, 32, 100), float16] */;
  %1903 = fn (%p0513: Tensor[(256, 100, 100), float16] /* ty=Tensor[(256, 100, 100), float16] */, %p1360: Tensor[(256, 32, 100), float16] /* ty=Tensor[(256, 32, 100), float16] */, Primitive=1) -> Tensor[(256, 100, 32), float16] {
    nn.batch_matmul(%p0513, %p1360, out_dtype="float16", transpose_b=True) /* ty=Tensor[(256, 100, 32), float16] */
  } /* ty=fn (Tensor[(256, 100, 100), float16], Tensor[(256, 32, 100), float16]) -> Tensor[(256, 100, 32), float16] */;
  %1904 = %1903(%1901, %1902) /* ty=Tensor[(256, 100, 32), float16] */;
  %1905 = fn (%p0512: Tensor[(256, 100, 32), float16] /* ty=Tensor[(256, 100, 32), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1860 = reshape(%p0512, newshape=[256, 100, 32]) /* ty=Tensor[(256, 100, 32), float16] */;
    %1861 = transpose(%1860, axes=[1, 0, 2]) /* ty=Tensor[(100, 256, 32), float16] */;
    reshape(%1861, newshape=[3200, 256]) /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(256, 100, 32), float16]) -> Tensor[(3200, 256), float16] */;
  %1906 = %1905(%1904) /* ty=Tensor[(3200, 256), float16] */;
  %1907 = fn (%p0511: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1359: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, %p2131: Tensor[(1, 256), float16] /* ty=Tensor[(1, 256), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1859 = nn.dense(%p0511, %p1359, units=256, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */;
    add(%1859, %p2131) /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256, 256), float16], Tensor[(1, 256), float16]) -> Tensor[(3200, 256), float16] */;
  %1908 = %1907(%1906, meta[relay.Constant][399] /* ty=Tensor[(256, 256), float16] */, meta[relay.Constant][400] /* ty=Tensor[(1, 256), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1909 = fn (%p0510: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1358: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %1857 = reshape(%p0510, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %1858 = cast(%1857, dtype="float32") /* ty=Tensor[(100, 32, 256), float32] */;
    add(%p1358, %1858) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1910 = %1909(%1908, %1814) /* ty=Tensor[(100, 32, 256), float32] */;
  %1911 = fn (%p0527: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    mean(%p0527, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1912 = %1911(%1910) /* ty=Tensor[(100, 32, 1), float32] */;
  %1913 = fn (%p0509: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p1357: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    subtract(%p0509, %p1357) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32], Tensor[(100, 32, 1), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1914 = %1913(%1910, %1912) /* ty=Tensor[(100, 32, 256), float32] */;
  %1915 = fn (%p0508: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    %1856 = power(%p0508, 2f /* ty=float32 span=/transformer/decoder/layers.5/norm1/Constant:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
    mean(%1856, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1916 = %1915(%1914) /* ty=Tensor[(100, 32, 1), float32] */;
  %1917 = fn (%p0507: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, %p1356: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p2130: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p383: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %1852 = add(%p0507, 1e-05f /* ty=float32 span=/transformer/decoder/layers.5/norm1/Constant_1:0:0 */) /* ty=Tensor[(100, 32, 1), float32] */;
    %1853 = rsqrt(%1852) /* ty=Tensor[(100, 32, 1), float32] */;
    %1854 = multiply(%p1356, %1853) /* ty=Tensor[(100, 32, 256), float32] */;
    %1855 = multiply(%1854, %p2130) /* ty=Tensor[(100, 32, 256), float32] */;
    add(%1855, %p383) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 1), float32], Tensor[(100, 32, 256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1918 = %1917(%1916, %1914, meta[relay.Constant][401] /* ty=Tensor[(256), float32] span=/transformer/decoder/layers.5/norm1/Mul.transformer.decoder.layers.5.norm1.weight:0:0 */, meta[relay.Constant][402] /* ty=Tensor[(256), float32] span=/transformer/decoder/layers.5/norm1/Add_1.transformer.decoder.layers.5.norm1.bias:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
  %1919 = fn (%p0506: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p1355: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1850 = add(%p0506, %p1355) /* ty=Tensor[(100, 32, 256), float32] */;
    %1851 = reshape(%1850, newshape=[-1, 256]) /* ty=Tensor[(3200, 256), float32] */;
    cast(%1851, dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(100, 32, 256), float32], Tensor[(100, 32, 256), float32]) -> Tensor[(3200, 256), float16] */;
  %1920 = %1919(%1918, meta[relay.Constant][284] /* ty=Tensor[(100, 32, 256), float32] span=/transformer/Tile:0:0 */) /* ty=Tensor[(3200, 256), float16] */;
  %1921 = fn (%p0505: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1354: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    nn.dense(%p0505, %p1354, units=None, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(3200, 256), float16] */;
  %1922 = %1921(%1920, meta[relay.Constant][403] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1923 = fn (%p0504: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1353: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, %p2129: float16 /* ty=float16 */, Primitive=1) -> Tensor[(256, 100, 32), float16] {
    %1846 = reshape(%p0504, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %1847 = add(%p1353, %1846) /* ty=Tensor[(100, 32, 256), float16] */;
    %1848 = reshape(%1847, newshape=[100, 256, 32]) /* ty=Tensor[(100, 256, 32), float16] */;
    %1849 = transpose(%1848, axes=[1, 0, 2]) /* ty=Tensor[(256, 100, 32), float16] */;
    divide(%1849, %p2129) /* ty=Tensor[(256, 100, 32), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256), float16], float16) -> Tensor[(256, 100, 32), float16] */;
  %1928 = fn (%p0530: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %1927 = reshape(%p0530, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float32] */;
    cast(%1927, dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(1568, 256), float16] */;
  %1929 = %1928(%1078) /* ty=Tensor[(1568, 256), float16] */;
  %1930 = fn (%p0529: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1370: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p0529, %p1370, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %1931 = %1930(%1929, meta[relay.Constant][405] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %1932 = fn (%p0528: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1369: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(256, 49, 32), float16] {
    %1924 = reshape(%p0528, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %1925 = add(%p1369, %1924) /* ty=Tensor[(49, 32, 256), float16] */;
    %1926 = reshape(%1925, newshape=[49, 256, 32]) /* ty=Tensor[(49, 256, 32), float16] */;
    transpose(%1926, axes=[1, 0, 2]) /* ty=Tensor[(256, 49, 32), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16]) -> Tensor[(256, 49, 32), float16] */;
  %1933 = %1923(%1922, meta[relay.Constant][404] /* ty=Tensor[(256), float16] */, 5.65625f16 /* ty=float16 */) /* ty=Tensor[(256, 100, 32), float16] */;
  %1934 = %1932(%1931, meta[relay.Constant][406] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(256, 49, 32), float16] */;
  %1935 = fn (%p0503: Tensor[(256, 100, 32), float16] /* ty=Tensor[(256, 100, 32), float16] */, %p1352: Tensor[(256, 49, 32), float16] /* ty=Tensor[(256, 49, 32), float16] */, Primitive=1) -> Tensor[(256, 100, 49), float16] {
    nn.batch_matmul(%p0503, %p1352, out_dtype="float16", transpose_b=True) /* ty=Tensor[(256, 100, 49), float16] */
  } /* ty=fn (Tensor[(256, 100, 32), float16], Tensor[(256, 49, 32), float16]) -> Tensor[(256, 100, 49), float16] */;
  %1936 = %1935(%1933, %1934) /* ty=Tensor[(256, 100, 49), float16] */;
  %1937 = fn (%p0502: Tensor[(256, 100, 49), float16] /* ty=Tensor[(256, 100, 49), float16] */, %p1351: Tensor[(256, 1, 49), float16] /* ty=Tensor[(256, 1, 49), float16] */, Primitive=1) -> Tensor[(256, 100, 49), float32] {
    %1844 = reshape(%p0502, newshape=[256, 100, 49]) /* ty=Tensor[(256, 100, 49), float16] */;
    %1845 = add(%1844, %p1351) /* ty=Tensor[(256, 100, 49), float16] */;
    cast(%1845, dtype="float32") /* ty=Tensor[(256, 100, 49), float32] */
  } /* ty=fn (Tensor[(256, 100, 49), float16], Tensor[(256, 1, 49), float16]) -> Tensor[(256, 100, 49), float32] */;
  %1938 = %1937(%1936, meta[relay.Constant][407] /* ty=Tensor[(256, 1, 49), float16] */) /* ty=Tensor[(256, 100, 49), float32] */;
  %1939 = fn (%p0501: Tensor[(256, 100, 49), float32] /* ty=Tensor[(256, 100, 49), float32] */, Primitive=1) -> Tensor[(256, 100, 49), float16] {
    %1843 = nn.softmax(%p0501, axis=2) /* ty=Tensor[(256, 100, 49), float32] */;
    cast(%1843, dtype="float16") /* ty=Tensor[(256, 100, 49), float16] */
  } /* ty=fn (Tensor[(256, 100, 49), float32]) -> Tensor[(256, 100, 49), float16] */;
  %1944 = fn (%p0533: Tensor[(49, 32, 256), float32] /* ty=Tensor[(49, 32, 256), float32] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    %1943 = reshape(%p0533, newshape=[-1, 256]) /* ty=Tensor[(1568, 256), float32] */;
    cast(%1943, dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(49, 32, 256), float32]) -> Tensor[(1568, 256), float16] */;
  %1945 = %1944(%1076) /* ty=Tensor[(1568, 256), float16] */;
  %1946 = fn (%p0532: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1372: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(1568, 256), float16] {
    nn.dense(%p0532, %p1372, units=None, out_dtype="float16") /* ty=Tensor[(1568, 256), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(1568, 256), float16] */;
  %1947 = %1946(%1945, meta[relay.Constant][408] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(1568, 256), float16] */;
  %1948 = fn (%p0531: Tensor[(1568, 256), float16] /* ty=Tensor[(1568, 256), float16] */, %p1371: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(256, 32, 49), float16] {
    %1940 = reshape(%p0531, newshape=[49, 32, 256]) /* ty=Tensor[(49, 32, 256), float16] */;
    %1941 = add(%p1371, %1940) /* ty=Tensor[(49, 32, 256), float16] */;
    %1942 = reshape(%1941, newshape=[49, 256, 32]) /* ty=Tensor[(49, 256, 32), float16] */;
    transpose(%1942, axes=[1, 2, 0]) /* ty=Tensor[(256, 32, 49), float16] */
  } /* ty=fn (Tensor[(1568, 256), float16], Tensor[(256), float16]) -> Tensor[(256, 32, 49), float16] */;
  %1949 = %1939(%1938) /* ty=Tensor[(256, 100, 49), float16] */;
  %1950 = %1948(%1947, meta[relay.Constant][409] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(256, 32, 49), float16] */;
  %1951 = fn (%p0500: Tensor[(256, 100, 49), float16] /* ty=Tensor[(256, 100, 49), float16] */, %p1350: Tensor[(256, 32, 49), float16] /* ty=Tensor[(256, 32, 49), float16] */, Primitive=1) -> Tensor[(256, 100, 32), float16] {
    nn.batch_matmul(%p0500, %p1350, out_dtype="float16", transpose_b=True) /* ty=Tensor[(256, 100, 32), float16] */
  } /* ty=fn (Tensor[(256, 100, 49), float16], Tensor[(256, 32, 49), float16]) -> Tensor[(256, 100, 32), float16] */;
  %1952 = %1951(%1949, %1950) /* ty=Tensor[(256, 100, 32), float16] */;
  %1953 = fn (%p0499: Tensor[(256, 100, 32), float16] /* ty=Tensor[(256, 100, 32), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1841 = reshape(%p0499, newshape=[256, 100, 32]) /* ty=Tensor[(256, 100, 32), float16] */;
    %1842 = transpose(%1841, axes=[1, 0, 2]) /* ty=Tensor[(100, 256, 32), float16] */;
    reshape(%1842, newshape=[3200, 256]) /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(256, 100, 32), float16]) -> Tensor[(3200, 256), float16] */;
  %1954 = %1953(%1952) /* ty=Tensor[(3200, 256), float16] */;
  %1955 = fn (%p0498: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1349: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, %p2128: Tensor[(1, 256), float16] /* ty=Tensor[(1, 256), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1840 = nn.dense(%p0498, %p1349, units=256, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */;
    add(%1840, %p2128) /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256, 256), float16], Tensor[(1, 256), float16]) -> Tensor[(3200, 256), float16] */;
  %1956 = %1955(%1954, meta[relay.Constant][410] /* ty=Tensor[(256, 256), float16] */, meta[relay.Constant][411] /* ty=Tensor[(1, 256), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1957 = fn (%p0497: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1348: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %1838 = reshape(%p0497, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %1839 = cast(%1838, dtype="float32") /* ty=Tensor[(100, 32, 256), float32] */;
    add(%p1348, %1839) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1958 = %1957(%1956, %1918) /* ty=Tensor[(100, 32, 256), float32] */;
  %1959 = fn (%p0534: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    mean(%p0534, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1960 = %1959(%1958) /* ty=Tensor[(100, 32, 1), float32] */;
  %1961 = fn (%p0496: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p1347: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    subtract(%p0496, %p1347) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32], Tensor[(100, 32, 1), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1962 = %1961(%1958, %1960) /* ty=Tensor[(100, 32, 256), float32] */;
  %1963 = fn (%p0495: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    %1837 = power(%p0495, 2f /* ty=float32 span=/transformer/decoder/layers.5/norm2/Constant:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
    mean(%1837, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1964 = %1963(%1962) /* ty=Tensor[(100, 32, 1), float32] */;
  %1965 = fn (%p0494: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, %p1346: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p2127: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p382: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %1833 = add(%p0494, 1e-05f /* ty=float32 span=/transformer/decoder/layers.5/norm2/Constant_1:0:0 */) /* ty=Tensor[(100, 32, 1), float32] */;
    %1834 = rsqrt(%1833) /* ty=Tensor[(100, 32, 1), float32] */;
    %1835 = multiply(%p1346, %1834) /* ty=Tensor[(100, 32, 256), float32] */;
    %1836 = multiply(%1835, %p2127) /* ty=Tensor[(100, 32, 256), float32] */;
    add(%1836, %p382) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 1), float32], Tensor[(100, 32, 256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1966 = %1965(%1964, %1962, meta[relay.Constant][412] /* ty=Tensor[(256), float32] span=/transformer/decoder/layers.5/norm2/Mul.transformer.decoder.layers.5.norm2.weight:0:0 */, meta[relay.Constant][413] /* ty=Tensor[(256), float32] span=/transformer/decoder/layers.5/norm2/Add_1.transformer.decoder.layers.5.norm2.bias:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
  %1967 = fn (%p0493: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    %1832 = reshape(%p0493, newshape=[-1, 256]) /* ty=Tensor[(3200, 256), float32] */;
    cast(%1832, dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(3200, 256), float16] */;
  %1968 = %1967(%1966) /* ty=Tensor[(3200, 256), float16] */;
  %1969 = fn (%p0492: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1345: Tensor[(2048, 256), float16] /* ty=Tensor[(2048, 256), float16] */, Primitive=1) -> Tensor[(3200, 2048), float16] {
    nn.dense(%p0492, %p1345, units=None, out_dtype="float16") /* ty=Tensor[(3200, 2048), float16] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(2048, 256), float16]) -> Tensor[(3200, 2048), float16] */;
  %1970 = %1969(%1968, meta[relay.Constant][414] /* ty=Tensor[(2048, 256), float16] */) /* ty=Tensor[(3200, 2048), float16] */;
  %1971 = fn (%p0491: Tensor[(3200, 2048), float16] /* ty=Tensor[(3200, 2048), float16] */, %p1344: Tensor[(2048), float16] /* ty=Tensor[(2048), float16] */, Primitive=1) -> Tensor[(3200, 2048), float16] {
    %1829 = reshape(%p0491, newshape=[100, 32, 2048]) /* ty=Tensor[(100, 32, 2048), float16] */;
    %1830 = add(%p1344, %1829) /* ty=Tensor[(100, 32, 2048), float16] */;
    %1831 = nn.relu(%1830) /* ty=Tensor[(100, 32, 2048), float16] */;
    reshape(%1831, newshape=[-1, 2048]) /* ty=Tensor[(3200, 2048), float16] */
  } /* ty=fn (Tensor[(3200, 2048), float16], Tensor[(2048), float16]) -> Tensor[(3200, 2048), float16] */;
  %1972 = %1971(%1970, meta[relay.Constant][415] /* ty=Tensor[(2048), float16] */) /* ty=Tensor[(3200, 2048), float16] */;
  %1973 = fn (%p0490: Tensor[(3200, 2048), float16] /* ty=Tensor[(3200, 2048), float16] */, %p1343: Tensor[(256, 2048), float16] /* ty=Tensor[(256, 2048), float16] */, Primitive=1) -> Tensor[(3200, 256), float16] {
    nn.dense(%p0490, %p1343, units=None, out_dtype="float16") /* ty=Tensor[(3200, 256), float16] */
  } /* ty=fn (Tensor[(3200, 2048), float16], Tensor[(256, 2048), float16]) -> Tensor[(3200, 256), float16] */;
  %1974 = %1973(%1972, meta[relay.Constant][416] /* ty=Tensor[(256, 2048), float16] */) /* ty=Tensor[(3200, 256), float16] */;
  %1975 = fn (%p0489: Tensor[(3200, 256), float16] /* ty=Tensor[(3200, 256), float16] */, %p1342: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, %p2126: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %1826 = reshape(%p0489, newshape=[100, 32, 256]) /* ty=Tensor[(100, 32, 256), float16] */;
    %1827 = add(%p1342, %1826) /* ty=Tensor[(100, 32, 256), float16] */;
    %1828 = cast(%1827, dtype="float32") /* ty=Tensor[(100, 32, 256), float32] */;
    add(%p2126, %1828) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(3200, 256), float16], Tensor[(256), float16], Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1976 = %1975(%1974, meta[relay.Constant][417] /* ty=Tensor[(256), float16] */, %1966) /* ty=Tensor[(100, 32, 256), float32] */;
  %1977 = fn (%p0535: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    mean(%p0535, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1978 = %1977(%1976) /* ty=Tensor[(100, 32, 1), float32] */;
  %1979 = fn (%p0488: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p1341: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    subtract(%p0488, %p1341) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32], Tensor[(100, 32, 1), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1980 = %1979(%1976, %1978) /* ty=Tensor[(100, 32, 256), float32] */;
  %1981 = fn (%p0487: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    %1825 = power(%p0487, 2f /* ty=float32 span=/transformer/decoder/layers.5/norm3/Constant:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
    mean(%1825, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1982 = %1981(%1980) /* ty=Tensor[(100, 32, 1), float32] */;
  %1983 = fn (%p0486: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, %p1340: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p2125: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p381: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %1821 = add(%p0486, 1e-05f /* ty=float32 span=/transformer/decoder/layers.5/norm3/Constant_1:0:0 */) /* ty=Tensor[(100, 32, 1), float32] */;
    %1822 = rsqrt(%1821) /* ty=Tensor[(100, 32, 1), float32] */;
    %1823 = multiply(%p1340, %1822) /* ty=Tensor[(100, 32, 256), float32] */;
    %1824 = multiply(%1823, %p2125) /* ty=Tensor[(100, 32, 256), float32] */;
    add(%1824, %p381) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 1), float32], Tensor[(100, 32, 256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1984 = %1983(%1982, %1980, meta[relay.Constant][418] /* ty=Tensor[(256), float32] span=/transformer/decoder/layers.5/norm3/Mul.transformer.decoder.layers.5.norm3.weight:0:0 */, meta[relay.Constant][419] /* ty=Tensor[(256), float32] span=/transformer/decoder/layers.5/norm3/Add_1.transformer.decoder.layers.5.norm3.bias:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
  %1985 = fn (%p0536: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(100, 32, 1), float32] {
    mean(%p0536, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1986 = %1985(%1984) /* ty=Tensor[(100, 32, 1), float32] */;
  %1987 = fn (%p0485: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p1339: Tensor[(100, 32, 1), float32] /* ty=Tensor[(100, 32, 1), float32] */, Primitive=1) -> Tensor[(100, 32, 256), float32] {
    subtract(%p0485, %p1339) /* ty=Tensor[(100, 32, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 256), float32], Tensor[(100, 32, 1), float32]) -> Tensor[(100, 32, 256), float32] */;
  %1988 = %1987(%1984, %1986) /* ty=Tensor[(100, 32, 256), float32] */;
  %1989 = fn (%p0484: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p2: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p3: Tensor[(256), float32] /* ty=Tensor[(256), Primitive=1) -> Tensor[(100, 32, 256), float32] {
    %1820 = power(%p0484, 2f /* ty=float32 span=/transformer/decoder/norm_5/Constant:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
    %1821 = mean(%1820, axis=[-1], keepdims=True) /* ty=Tensor[(100, 32, 1), float32] */
    %3 = add(%1821, 1e-05f /* ty=float32 span=/transformer/decoder/norm/Constant_1:0:0 */) /* ty=Tensor[(100, 32, 1), float32] */;
    %4 = rsqrt(%3) /* ty=Tensor[(100, 32, 1), float32] */;
    %5 = multiply(%p0484, %4) /* ty=Tensor[(100, 32, 256), float32] */;
    %6 = multiply(%5, %p2) /* ty=Tensor[(100, 32, 256), float32] */;
    %7 = add(%6, %p3) /* ty=Tensor[(100, 32, 256), float32] */;
  } /* ty=fn (Tensor[(100, 32, 256), float32]) -> Tensor[(100, 32, 1), float32] */;
  %1990 = %1139(%1138, meta[relay.Constant][282] /* ty=Tensor[(256), float32] span=/transformer/decoder/norm/Mul.transformer.decoder.norm.weight:0:0 */, meta[relay.Constant][283] /* ty=Tensor[(256), float32] span=/transformer/decoder/norm/Add_1.transformer.decoder.norm.bias:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
  %1991 = %1309(%1308, meta[relay.Constant][282] /* ty=Tensor[(256), float32] span=/transformer/decoder/norm/Mul.transformer.decoder.norm.weight:0:0 */, meta[relay.Constant][283] /* ty=Tensor[(256), float32] span=/transformer/decoder/norm/Add_1.transformer.decoder.norm.bias:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
  %1992 = %1479(%1478, meta[relay.Constant][282] /* ty=Tensor[(256), float32] span=/transformer/decoder/norm/Mul.transformer.decoder.norm.weight:0:0 */, meta[relay.Constant][283] /* ty=Tensor[(256), float32] span=/transformer/decoder/norm/Add_1.transformer.decoder.norm.bias:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
  %1993 = %1649(%1648, meta[relay.Constant][282] /* ty=Tensor[(256), float32] span=/transformer/decoder/norm/Mul.transformer.decoder.norm.weight:0:0 */, meta[relay.Constant][283] /* ty=Tensor[(256), float32] span=/transformer/decoder/norm/Add_1.transformer.decoder.norm.bias:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
  %1994 = %1819(%1818, meta[relay.Constant][282] /* ty=Tensor[(256), float32] span=/transformer/decoder/norm/Mul.transformer.decoder.norm.weight:0:0 */, meta[relay.Constant][283] /* ty=Tensor[(256), float32] span=/transformer/decoder/norm/Add_1.transformer.decoder.norm.bias:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
  %1995 = %1989(%1988, meta[relay.Constant][282] /* ty=Tensor[(256), float32] span=/transformer/decoder/norm/Mul.transformer.decoder.norm.weight:0:0 */, meta[relay.Constant][283] /* ty=Tensor[(256), float32] span=/transformer/decoder/norm/Add_1.transformer.decoder.norm.bias:0:0 */) /* ty=Tensor[(100, 32, 256), float32] */;
  %1996 = fn (%p03: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p5: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p7: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p9: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p111: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, %p13: Tensor[(100, 32, 256), float32] /* ty=Tensor[(100, 32, 256), float32] */, Primitive=1) -> Tensor[(6, 32, 100, 256), float32] {
    %33 = expand_dims(%p03, axis=0) /* ty=Tensor[(1, 100, 32, 256), float32] */;
    %34 = expand_dims(%p5, axis=0) /* ty=Tensor[(1, 100, 32, 256), float32] */;
    %35 = expand_dims(%p7, axis=0) /* ty=Tensor[(1, 100, 32, 256), float32] */;
    %36 = expand_dims(%p9, axis=0) /* ty=Tensor[(1, 100, 32, 256), float32] */;
    %37 = expand_dims(%p111, axis=0) /* ty=Tensor[(1, 100, 32, 256), float32] */;
    %38 = expand_dims(%p13, axis=0) /* ty=Tensor[(1, 100, 32, 256), float32] */;
    %39 = (%33, %34, %35, %36, %37, %38) /* ty=(Tensor[(1, 100, 32, 256), float32], Tensor[(1, 100, 32, 256), float32], Tensor[(1, 100, 32, 256), float32], Tensor[(1, 100, 32, 256), float32], Tensor[(1, 100, 32, 256), float32], Tensor[(1, 100, 32, 256), float32]) span=/transformer/decoder/Concat:0:0 */;
    %40 = concatenate(%39, axis=0) /* ty=Tensor[(6, 100, 32, 256), float32] */;
    transpose(%40, axes=[0, 2, 1, 3]) /* ty=Tensor[(6, 32, 100, 256), float32] */
  } /* ty=fn (Tensor[(100, 32, 1), float32], Tensor[(100, 32, 256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(100, 32, 1), float32], Tensor[(100, 32, 256), float32], Tensor[(100, 32, 1), float32], Tensor[(100, 32, 256), float32], Tensor[(100, 32, 1), float32], Tensor[(100, 32, 256), float32], Tensor[(100, 32, 1), float32], Tensor[(100, 32, 256), float32], Tensor[(100, 32, 1), float32], Tensor[(100, 32, 256), float32]) -> Tensor[(6, 32, 100, 256), float32] */;
  %1997 = %1996(%1990, %1991, %1992, %1993, %1994, %1995) /* ty=Tensor[(6, 32, 100, 256), float32] */;
  %1998 = fn (%p02: Tensor[(6, 32, 100, 256), float32] /* ty=Tensor[(6, 32, 100, 256), float32] */, Primitive=1) -> Tensor[(19200, 256), float16] {
    %2 = reshape(%p02, newshape=[-1, 256]) /* ty=Tensor[(19200, 256), float32] */;
    cast(%2, dtype="float16") /* ty=Tensor[(19200, 256), float16] */
  } /* ty=fn (Tensor[(6, 32, 100, 256), float32]) -> Tensor[(19200, 256), float16] */;
  %1999 = %1998(%1997) /* ty=Tensor[(19200, 256), float16] */;
  %2000 = fn (%p01: Tensor[(19200, 256), float16] /* ty=Tensor[(19200, 256), float16] */, %p11: Tensor[(92, 256), float16] /* ty=Tensor[(92, 256), float16] */, Primitive=1) -> Tensor[(19200, 92), float16] {
    nn.dense(%p01, %p11, units=None, out_dtype="float16") /* ty=Tensor[(19200, 92), float16] */
  } /* ty=fn (Tensor[(19200, 256), float16], Tensor[(92, 256), float16]) -> Tensor[(19200, 92), float16] */;
  %2001 = %2000(%1999, meta[relay.Constant][420] /* ty=Tensor[(92, 256), float16] */) /* ty=Tensor[(19200, 92), float16] */;
  %2002 = fn (%p0: Tensor[(19200, 92), float16] /* ty=Tensor[(19200, 92), float16] */, %p1: Tensor[(92), float16] /* ty=Tensor[(92), float16] */, Primitive=1) -> Tensor[(32, 100, 92), float16] {
    %0 = reshape(%p0, newshape=[6, 32, 100, 92]) /* ty=Tensor[(6, 32, 100, 92), float16] */;
    %1 = add(%p1, %0) /* ty=Tensor[(6, 32, 100, 92), float16] */;
    take(%1, 5i64 /* ty=int64 */, axis=0) /* ty=Tensor[(32, 100, 92), float16] */
  } /* ty=fn (Tensor[(19200, 92), float16], Tensor[(92), float16]) -> Tensor[(32, 100, 92), float16] */;
  %2013 = fn (%p0543: Tensor[(6, 32, 100, 256), float32] /* ty=Tensor[(6, 32, 100, 256), float32] */, Primitive=1) -> Tensor[(19200, 256), float16] {
    %2012 = reshape(%p0543, newshape=[-1, 256]) /* ty=Tensor[(19200, 256), float32] */;
    cast(%2012, dtype="float16") /* ty=Tensor[(19200, 256), float16] */
  } /* ty=fn (Tensor[(6, 32, 100, 256), float32]) -> Tensor[(19200, 256), float16] */;
  %2014 = %2013(%1997) /* ty=Tensor[(19200, 256), float16] */;
  %2015 = fn (%p0542: Tensor[(19200, 256), float16] /* ty=Tensor[(19200, 256), float16] */, %p1378: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(19200, 256), float16] {
    nn.dense(%p0542, %p1378, units=None, out_dtype="float16") /* ty=Tensor[(19200, 256), float16] */
  } /* ty=fn (Tensor[(19200, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(19200, 256), float16] */;
  %2016 = %2015(%2014, meta[relay.Constant][422] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(19200, 256), float16] */;
  %2017 = fn (%p0541: Tensor[(19200, 256), float16] /* ty=Tensor[(19200, 256), float16] */, %p1377: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(19200, 256), float16] {
    %2009 = reshape(%p0541, newshape=[6, 32, 100, 256]) /* ty=Tensor[(6, 32, 100, 256), float16] */;
    %2010 = add(%p1377, %2009) /* ty=Tensor[(6, 32, 100, 256), float16] */;
    %2011 = nn.relu(%2010) /* ty=Tensor[(6, 32, 100, 256), float16] */;
    reshape(%2011, newshape=[-1, 256]) /* ty=Tensor[(19200, 256), float16] */
  } /* ty=fn (Tensor[(19200, 256), float16], Tensor[(256), float16]) -> Tensor[(19200, 256), float16] */;
  %2018 = %2017(%2016, meta[relay.Constant][423] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(19200, 256), float16] */;
  %2019 = fn (%p0540: Tensor[(19200, 256), float16] /* ty=Tensor[(19200, 256), float16] */, %p1376: Tensor[(256, 256), float16] /* ty=Tensor[(256, 256), float16] */, Primitive=1) -> Tensor[(19200, 256), float16] {
    nn.dense(%p0540, %p1376, units=None, out_dtype="float16") /* ty=Tensor[(19200, 256), float16] */
  } /* ty=fn (Tensor[(19200, 256), float16], Tensor[(256, 256), float16]) -> Tensor[(19200, 256), float16] */;
  %2020 = %2019(%2018, meta[relay.Constant][424] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(19200, 256), float16] */;
  %2021 = fn (%p0539: Tensor[(19200, 256), float16] /* ty=Tensor[(19200, 256), float16] */, %p1375: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(19200, 256), float16] {
    %2006 = reshape(%p0539, newshape=[6, 32, 100, 256]) /* ty=Tensor[(6, 32, 100, 256), float16] */;
    %2007 = add(%p1375, %2006) /* ty=Tensor[(6, 32, 100, 256), float16] */;
    %2008 = nn.relu(%2007) /* ty=Tensor[(6, 32, 100, 256), float16] */;
    reshape(%2008, newshape=[-1, 256]) /* ty=Tensor[(19200, 256), float16] */
  } /* ty=fn (Tensor[(19200, 256), float16], Tensor[(256), float16]) -> Tensor[(19200, 256), float16] */;
  %2022 = %2021(%2020, meta[relay.Constant][425] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(19200, 256), float16] */;
  %2023 = fn (%p0538: Tensor[(19200, 256), float16] /* ty=Tensor[(19200, 256), float16] */, %p1374: Tensor[(4, 256), float16] /* ty=Tensor[(4, 256), float16] */, Primitive=1) -> Tensor[(19200, 4), float16] {
    nn.dense(%p0538, %p1374, units=None, out_dtype="float16") /* ty=Tensor[(19200, 4), float16] */
  } /* ty=fn (Tensor[(19200, 256), float16], Tensor[(4, 256), float16]) -> Tensor[(19200, 4), float16] */;
  %2024 = %2023(%2022, meta[relay.Constant][426] /* ty=Tensor[(4, 256), float16] */) /* ty=Tensor[(19200, 4), float16] */;
  %2025 = fn (%p0537: Tensor[(19200, 4), float16] /* ty=Tensor[(19200, 4), float16] */, %p1373: Tensor[(4), float16] /* ty=Tensor[(4), float16] */, Primitive=1) -> Tensor[(32, 100, 4), float16] {
    %2003 = reshape(%p0537, newshape=[6, 32, 100, 4]) /* ty=Tensor[(6, 32, 100, 4), float16] */;
    %2004 = add(%p1373, %2003) /* ty=Tensor[(6, 32, 100, 4), float16] */;
    %2005 = sigmoid(%2004) /* ty=Tensor[(6, 32, 100, 4), float16] */;
    take(%2005, 5i64 /* ty=int64 */, axis=0) /* ty=Tensor[(32, 100, 4), float16] */
  } /* ty=fn (Tensor[(19200, 4), float16], Tensor[(4), float16]) -> Tensor[(32, 100, 4), float16] */;
  %2026 = %2002(%2001, meta[relay.Constant][421] /* ty=Tensor[(92), float16] */) /* ty=Tensor[(32, 100, 92), float16] */;
  %2027 = %2025(%2024, meta[relay.Constant][427] /* ty=Tensor[(4), float16] */) /* ty=Tensor[(32, 100, 4), float16] */;
  (%2026, %2027) /* ty=(Tensor[(32, 100, 92), float16], Tensor[(32, 100, 4), float16]) */
}


