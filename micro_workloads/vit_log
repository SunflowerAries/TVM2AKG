def @main(%input0: Tensor[(32, 3, 224, 224), float16] /* ty=Tensor[(32, 3, 224, 224), float16] span=/conv_proj/Conv.input0:0:0 */) -> Tensor[(32, 1000), float16] {
  %927 = fn (%p0534: Tensor[(32, 3, 224, 224), float16] /* ty=Tensor[(32, 3, 224, 224), float16] */, Primitive=1) -> Tensor[(32, 224, 224, 3), float16] {
    layout_transform(%p0534, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(32, 224, 224, 3), float16] */
  } /* ty=fn (Tensor[(32, 3, 224, 224), float16]) -> Tensor[(32, 224, 224, 3), float16] */;
  %928 = %927(%input0) /* ty=Tensor[(32, 224, 224, 3), float16] */;
  %929 = fn (%p0533: Tensor[(32, 224, 224, 3), float16] /* ty=Tensor[(32, 224, 224, 3), float16] */, %p1364: Tensor[(1024, 32, 32, 3), float16] /* ty=Tensor[(1024, 32, 32, 3), float16] */, %p2123: Tensor[(1, 1, 1, 1024), float16] /* ty=Tensor[(1, 1, 1, 1024), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 1024), float16] {
    %926 = nn.conv2d(%p0533, %p1364, strides=[32, 32], padding=[0, 0, 0, 0], channels=1024, kernel_size=[32, 32], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 1024), float16] */;
    add(%926, %p2123) /* ty=Tensor[(32, 7, 7, 1024), float16] */
  } /* ty=fn (Tensor[(32, 224, 224, 3), float16], Tensor[(1024, 32, 32, 3), float16], Tensor[(1, 1, 1, 1024), float16]) -> Tensor[(32, 7, 7, 1024), float16] */;
  %930 = %929(%928, meta[relay.Constant][0] /* ty=Tensor[(1024, 32, 32, 3), float16] */, meta[relay.Constant][1] /* ty=Tensor[(1, 1, 1, 1024), float16] */) /* ty=Tensor[(32, 7, 7, 1024), float16] */;
  %931 = fn (%p0532: Tensor[(32, 7, 7, 1024), float16] /* ty=Tensor[(32, 7, 7, 1024), float16] */, %p1363: Tensor[(32, 1, 1024), float16] /* ty=Tensor[(32, 1, 1024), float16] */, %p2122: Tensor[(1, 50, 1024), float16] /* ty=Tensor[(1, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %921 = layout_transform(%p0532, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(32, 1024, 7, 7), float16] */;
    %922 = reshape(%921, newshape=[32, 1024, 49]) /* ty=Tensor[(32, 1024, 49), float16] */;
    %923 = transpose(%922, axes=[0, 2, 1]) /* ty=Tensor[(32, 49, 1024), float16] */;
    %924 = (%p1363, %923) /* ty=(Tensor[(32, 1, 1024), float16], Tensor[(32, 49, 1024), float16]) span=/Concat_2:0:0 */;
    %925 = concatenate(%924, axis=1) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%925, %p2122) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 1024), float16], Tensor[(32, 1, 1024), float16], Tensor[(1, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %932 = %931(%930, meta[relay.Constant][2] /* ty=Tensor[(32, 1, 1024), float16] span=/Expand:0:0 */, meta[relay.Constant][3] /* ty=Tensor[(1, 50, 1024), float16] span=/encoder/Add.encoder.pos_embedding:0:0 */) /* ty=Tensor[(32, 50, 1024), float16] */;
  %933 = fn (%p0531: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0531, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %934 = %933(%932) /* ty=Tensor[(32, 50, 1024), float32] */;
  %935 = fn (%p0535: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0535, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %936 = %935(%934) /* ty=Tensor[(32, 50, 1), float32] */;
  %937 = fn (%p0530: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p1362: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0530, %p1362) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %938 = %937(%934, %936) /* ty=Tensor[(32, 50, 1024), float32] */;
  %939 = fn (%p0529: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %920 = power(%p0529, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%920, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %940 = %939(%938) /* ty=Tensor[(32, 50, 1), float32] */;
  %941 = fn (%p0528: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p1361: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p2121: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p348: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %913 = add(%p0528, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %914 = rsqrt(%913) /* ty=Tensor[(32, 50, 1), float32] */;
    %915 = multiply(%p1361, %914) /* ty=Tensor[(32, 50, 1024), float32] */;
    %916 = multiply(%915, %p2121) /* ty=Tensor[(32, 50, 1024), float32] */;
    %917 = add(%916, %p348) /* ty=Tensor[(32, 50, 1024), float32] */;
    %918 = transpose(%917, axes=[1, 0, 2]) /* ty=Tensor[(50, 32, 1024), float32] */;
    %919 = reshape(%918, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%919, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %942 = %941(%940, %938, meta[relay.Constant][4] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][5] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %943 = fn (%p0527: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1360: Tensor[(3072, 1024), float16] /* ty=Tensor[(3072, 1024), float16] */, Primitive=1) -> Tensor[(1600, 3072), float16] {
    nn.dense(%p0527, %p1360, units=None, out_dtype="float16") /* ty=Tensor[(1600, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(3072, 1024), float16]) -> Tensor[(1600, 3072), float16] */;
  %944 = %943(%942, meta[relay.Constant][6] /* ty=Tensor[(3072, 1024), float16] span=/encoder/layers/encoder_layer_0/self_attention/MatMul:0:0 */) /* ty=Tensor[(1600, 3072), float16] */;
  %945 = fn (%p0526: Tensor[(1600, 3072), float16] /* ty=Tensor[(1600, 3072), float16] */, %p1359: Tensor[(3072), float16] /* ty=Tensor[(3072), float16] */, Primitive=1) -> Tensor[(50, 32, 3072), float16] {
    %912 = reshape(%p0526, newshape=[50, 32, 3072]) /* ty=Tensor[(50, 32, 3072), float16] */;
    add(%p1359, %912) /* ty=Tensor[(50, 32, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 3072), float16], Tensor[(3072), float16]) -> Tensor[(50, 32, 3072), float16] */;
  %946 = %945(%944, meta[relay.Constant][7] /* ty=Tensor[(3072), float16] span=Identity_5.encoder.layers.encoder_layer_0.self_attention.in_proj_bias:0:0 */) /* ty=Tensor[(50, 32, 3072), float16] */;
  %947 = fn (%p0525: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, %p1358: float16 /* ty=float16 */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %909 = strided_slice(%p0525, begin=[0i64], end=[1024i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %910 = reshape(%909, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    %911 = transpose(%910, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */;
    divide(%911, %p1358) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16], float16) -> Tensor[(512, 50, 64), float16] */;
  %950 = fn (%p0536: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %948 = strided_slice(%p0536, begin=[1024i64], end=[2048i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %949 = reshape(%948, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%949, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 50, 64), float16] */;
  %951 = %947(%946, 8f16 /* ty=float16 span=/encoder/layers/encoder_layer_0/self_attention/Constant_14:0:0 */) /* ty=Tensor[(512, 50, 64), float16] */;
  %952 = %950(%946) /* ty=Tensor[(512, 50, 64), float16] */;
  %953 = fn (%p0524: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, %p1357: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    nn.batch_matmul(%p0524, %p1357, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16], Tensor[(512, 50, 64), float16]) -> Tensor[(512, 50, 50), float16] */;
  %954 = %953(%951, %952) /* ty=Tensor[(512, 50, 50), float16] */;
  %955 = fn (%p0523: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float32] {
    %908 = reshape(%p0523, newshape=[512, 50, 50]) /* ty=Tensor[(512, 50, 50), float16] */;
    cast(%908, dtype="float32") /* ty=Tensor[(512, 50, 50), float32] */
  } /* ty=fn (Tensor[(512, 50, 50), float16]) -> Tensor[(512, 50, 50), float32] */;
  %956 = %955(%954) /* ty=Tensor[(512, 50, 50), float32] */;
  %957 = fn (%p0522: Tensor[(512, 50, 50), float32] /* ty=Tensor[(512, 50, 50), float32] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    %907 = nn.softmax(%p0522, axis=2) /* ty=Tensor[(512, 50, 50), float32] */;
    cast(%907, dtype="float16") /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float32]) -> Tensor[(512, 50, 50), float16] */;
  %960 = fn (%p0537: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 64, 50), float16] {
    %958 = strided_slice(%p0537, begin=[2048i64], end=[3072i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %959 = reshape(%958, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%959, axes=[1, 2, 0]) /* ty=Tensor[(512, 64, 50), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 64, 50), float16] */;
  %961 = %957(%956) /* ty=Tensor[(512, 50, 50), float16] */;
  %962 = %960(%946) /* ty=Tensor[(512, 64, 50), float16] */;
  %963 = fn (%p0521: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, %p1356: Tensor[(512, 64, 50), float16] /* ty=Tensor[(512, 64, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    nn.batch_matmul(%p0521, %p1356, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float16], Tensor[(512, 64, 50), float16]) -> Tensor[(512, 50, 64), float16] */;
  %964 = %963(%961, %962) /* ty=Tensor[(512, 50, 64), float16] */;
  %965 = fn (%p0520: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %905 = reshape(%p0520, newshape=[512, 50, 64]) /* ty=Tensor[(512, 50, 64), float16] */;
    %906 = transpose(%905, axes=[1, 0, 2]) /* ty=Tensor[(50, 512, 64), float16] */;
    reshape(%906, newshape=[1600, 1024]) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16]) -> Tensor[(1600, 1024), float16] */;
  %966 = %965(%964) /* ty=Tensor[(1600, 1024), float16] */;
  %967 = fn (%p0519: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1355: Tensor[(1024, 1024), float16] /* ty=Tensor[(1024, 1024), float16] */, %p2120: Tensor[(1, 1024), float16] /* ty=Tensor[(1, 1024), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %904 = nn.dense(%p0519, %p1355, units=1024, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */;
    add(%904, %p2120) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024, 1024), float16], Tensor[(1, 1024), float16]) -> Tensor[(1600, 1024), float16] */;
  %968 = %967(%966, meta[relay.Constant][8] /* ty=Tensor[(1024, 1024), float16] span=/encoder/layers/encoder_layer_0/self_attention/Gemm.encoder.layers.encoder_layer_0.self_attention.out_proj.weight:0:0 */, meta[relay.Constant][9] /* ty=Tensor[(1, 1024), float16] */) /* ty=Tensor[(1600, 1024), float16] */;
  %969 = fn (%p0518: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1354: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %902 = reshape(%p0518, newshape=[50, 32, 1024]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %903 = transpose(%902, axes=[1, 0, 2]) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%903, %p1354) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %970 = %969(%968, %932) /* ty=Tensor[(32, 50, 1024), float16] */;
  %971 = fn (%p0517: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0517, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %972 = %971(%970) /* ty=Tensor[(32, 50, 1024), float32] */;
  %973 = fn (%p0538: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0538, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %974 = %973(%972) /* ty=Tensor[(32, 50, 1), float32] */;
  %975 = fn (%p0516: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p1353: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0516, %p1353) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %976 = %975(%972, %974) /* ty=Tensor[(32, 50, 1024), float32] */;
  %977 = fn (%p0515: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %901 = power(%p0515, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%901, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %978 = %977(%976) /* ty=Tensor[(32, 50, 1), float32] */;
  %979 = fn (%p0514: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p1352: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p2119: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p347: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %895 = add(%p0514, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %896 = rsqrt(%895) /* ty=Tensor[(32, 50, 1), float32] */;
    %897 = multiply(%p1352, %896) /* ty=Tensor[(32, 50, 1024), float32] */;
    %898 = multiply(%897, %p2119) /* ty=Tensor[(32, 50, 1024), float32] */;
    %899 = add(%898, %p347) /* ty=Tensor[(32, 50, 1024), float32] */;
    %900 = reshape(%899, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%900, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %980 = %979(%978, %976, meta[relay.Constant][10] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][11] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %981 = fn (%p0513: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1351: Tensor[(4096, 1024), float16] /* ty=Tensor[(4096, 1024), float16] */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    nn.dense(%p0513, %p1351, units=None, out_dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(4096, 1024), float16]) -> Tensor[(1600, 4096), float16] */;
  %982 = %981(%980, meta[relay.Constant][12] /* ty=Tensor[(4096, 1024), float16] span=/encoder/layers/encoder_layer_0/mlp/mlp.0/MatMul:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %983 = fn (%p0512: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p1350: Tensor[(4096), float16] /* ty=Tensor[(4096), float16] */, %p2118: float16 /* ty=float16 */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    %885 = reshape(%p0512, newshape=[32, 50, 4096]) /* ty=Tensor[(32, 50, 4096), float16] */;
    %886 = add(%p1350, %885) /* ty=Tensor[(32, 50, 4096), float16] */;
    %887 = divide(%886, %p2118) /* ty=Tensor[(32, 50, 4096), float16] */;
    %888 = cast(%887, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %889 = erf(%888) /* ty=Tensor[(32, 50, 4096), float32] */;
    %890 = cast(%886, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %891 = add(%889, 1f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %892 = multiply(%890, %891) /* ty=Tensor[(32, 50, 4096), float32] */;
    %893 = multiply(%892, 0.5f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %894 = reshape(%893, newshape=[-1, 4096]) /* ty=Tensor[(1600, 4096), float32] */;
    cast(%894, dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(4096), float16], float16) -> Tensor[(1600, 4096), float16] */;
  %984 = %983(%982, meta[relay.Constant][13] /* ty=Tensor[(4096), float16] span=/encoder/layers/encoder_layer_0/mlp/mlp.0/Add.encoder.layers.encoder_layer_0.mlp.0.bias:0:0 */, 1.41406f16 /* ty=float16 span=/encoder/layers/encoder_layer_0/mlp/mlp.1/Constant:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %985 = fn (%p0511: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p1349: Tensor[(1024, 4096), float16] /* ty=Tensor[(1024, 4096), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    nn.dense(%p0511, %p1349, units=None, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(1024, 4096), float16]) -> Tensor[(1600, 1024), float16] */;
  %986 = %985(%984, meta[relay.Constant][14] /* ty=Tensor[(1024, 4096), float16] span=/encoder/layers/encoder_layer_0/mlp/mlp.3/MatMul:0:0 */) /* ty=Tensor[(1600, 1024), float16] */;
  %987 = fn (%p0510: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1348: Tensor[(1024), float16] /* ty=Tensor[(1024), float16] */, %p2117: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %883 = reshape(%p0510, newshape=[32, 50, 1024]) /* ty=Tensor[(32, 50, 1024), float16] */;
    %884 = add(%p1348, %883) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%p2117, %884) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %988 = %987(%986, meta[relay.Constant][15] /* ty=Tensor[(1024), float16] span=/encoder/layers/encoder_layer_0/mlp/mlp.3/Add.encoder.layers.encoder_layer_0.mlp.3.bias:0:0 */, %970) /* ty=Tensor[(32, 50, 1024), float16] */;
  %989 = fn (%p0509: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0509, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %990 = %989(%988) /* ty=Tensor[(32, 50, 1024), float32] */;
  %991 = fn (%p0539: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0539, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %992 = %991(%990) /* ty=Tensor[(32, 50, 1), float32] */;
  %993 = fn (%p0508: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p1347: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0508, %p1347) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %994 = %993(%990, %992) /* ty=Tensor[(32, 50, 1024), float32] */;
  %995 = fn (%p0507: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %882 = power(%p0507, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%882, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %996 = %995(%994) /* ty=Tensor[(32, 50, 1), float32] */;
  %997 = fn (%p0506: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p1346: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p2116: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p346: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %875 = add(%p0506, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %876 = rsqrt(%875) /* ty=Tensor[(32, 50, 1), float32] */;
    %877 = multiply(%p1346, %876) /* ty=Tensor[(32, 50, 1024), float32] */;
    %878 = multiply(%877, %p2116) /* ty=Tensor[(32, 50, 1024), float32] */;
    %879 = add(%878, %p346) /* ty=Tensor[(32, 50, 1024), float32] */;
    %880 = transpose(%879, axes=[1, 0, 2]) /* ty=Tensor[(50, 32, 1024), float32] */;
    %881 = reshape(%880, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%881, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %998 = %997(%996, %994, meta[relay.Constant][16] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][17] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %999 = fn (%p0505: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1345: Tensor[(3072, 1024), float16] /* ty=Tensor[(3072, 1024), float16] */, Primitive=1) -> Tensor[(1600, 3072), float16] {
    nn.dense(%p0505, %p1345, units=None, out_dtype="float16") /* ty=Tensor[(1600, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(3072, 1024), float16]) -> Tensor[(1600, 3072), float16] */;
  %1000 = %999(%998, meta[relay.Constant][18] /* ty=Tensor[(3072, 1024), float16] span=/encoder/layers/encoder_layer_1/self_attention/MatMul:0:0 */) /* ty=Tensor[(1600, 3072), float16] */;
  %1001 = fn (%p0504: Tensor[(1600, 3072), float16] /* ty=Tensor[(1600, 3072), float16] */, %p1344: Tensor[(3072), float16] /* ty=Tensor[(3072), float16] */, Primitive=1) -> Tensor[(50, 32, 3072), float16] {
    %874 = reshape(%p0504, newshape=[50, 32, 3072]) /* ty=Tensor[(50, 32, 3072), float16] */;
    add(%p1344, %874) /* ty=Tensor[(50, 32, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 3072), float16], Tensor[(3072), float16]) -> Tensor[(50, 32, 3072), float16] */;
  %1002 = %1001(%1000, meta[relay.Constant][19] /* ty=Tensor[(3072), float16] span=Identity_137:0:0 */) /* ty=Tensor[(50, 32, 3072), float16] */;
  %1003 = fn (%p0503: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, %p1343: float16 /* ty=float16 */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %871 = strided_slice(%p0503, begin=[0i64], end=[1024i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %872 = reshape(%871, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    %873 = transpose(%872, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */;
    divide(%873, %p1343) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16], float16) -> Tensor[(512, 50, 64), float16] */;
  %1006 = fn (%p0540: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %1004 = strided_slice(%p0540, begin=[1024i64], end=[2048i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1005 = reshape(%1004, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1005, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1007 = %1003(%1002, 8f16 /* ty=float16 span=/encoder/layers/encoder_layer_1/self_attention/Constant_14:0:0 */) /* ty=Tensor[(512, 50, 64), float16] */;
  %1008 = %1006(%1002) /* ty=Tensor[(512, 50, 64), float16] */;
  %1009 = fn (%p0502: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, %p1342: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    nn.batch_matmul(%p0502, %p1342, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16], Tensor[(512, 50, 64), float16]) -> Tensor[(512, 50, 50), float16] */;
  %1010 = %1009(%1007, %1008) /* ty=Tensor[(512, 50, 50), float16] */;
  %1011 = fn (%p0501: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float32] {
    %870 = reshape(%p0501, newshape=[512, 50, 50]) /* ty=Tensor[(512, 50, 50), float16] */;
    cast(%870, dtype="float32") /* ty=Tensor[(512, 50, 50), float32] */
  } /* ty=fn (Tensor[(512, 50, 50), float16]) -> Tensor[(512, 50, 50), float32] */;
  %1012 = %1011(%1010) /* ty=Tensor[(512, 50, 50), float32] */;
  %1013 = fn (%p0500: Tensor[(512, 50, 50), float32] /* ty=Tensor[(512, 50, 50), float32] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    %869 = nn.softmax(%p0500, axis=2) /* ty=Tensor[(512, 50, 50), float32] */;
    cast(%869, dtype="float16") /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float32]) -> Tensor[(512, 50, 50), float16] */;
  %1016 = fn (%p0541: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 64, 50), float16] {
    %1014 = strided_slice(%p0541, begin=[2048i64], end=[3072i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1015 = reshape(%1014, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1015, axes=[1, 2, 0]) /* ty=Tensor[(512, 64, 50), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 64, 50), float16] */;
  %1017 = %1013(%1012) /* ty=Tensor[(512, 50, 50), float16] */;
  %1018 = %1016(%1002) /* ty=Tensor[(512, 64, 50), float16] */;
  %1019 = fn (%p0499: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, %p1341: Tensor[(512, 64, 50), float16] /* ty=Tensor[(512, 64, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    nn.batch_matmul(%p0499, %p1341, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float16], Tensor[(512, 64, 50), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1020 = %1019(%1017, %1018) /* ty=Tensor[(512, 50, 64), float16] */;
  %1021 = fn (%p0498: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %867 = reshape(%p0498, newshape=[512, 50, 64]) /* ty=Tensor[(512, 50, 64), float16] */;
    %868 = transpose(%867, axes=[1, 0, 2]) /* ty=Tensor[(50, 512, 64), float16] */;
    reshape(%868, newshape=[1600, 1024]) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16]) -> Tensor[(1600, 1024), float16] */;
  %1022 = %1021(%1020) /* ty=Tensor[(1600, 1024), float16] */;
  %1023 = fn (%p0497: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1340: Tensor[(1024, 1024), float16] /* ty=Tensor[(1024, 1024), float16] */, %p2115: Tensor[(1, 1024), float16] /* ty=Tensor[(1, 1024), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %866 = nn.dense(%p0497, %p1340, units=1024, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */;
    add(%866, %p2115) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024, 1024), float16], Tensor[(1, 1024), float16]) -> Tensor[(1600, 1024), float16] */;
  %1024 = %1023(%1022, meta[relay.Constant][20] /* ty=Tensor[(1024, 1024), float16] span=/encoder/layers/encoder_layer_1/self_attention/Gemm.encoder.layers.encoder_layer_1.self_attention.out_proj.weight:0:0 */, meta[relay.Constant][21] /* ty=Tensor[(1, 1024), float16] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1025 = fn (%p0496: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1339: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %864 = reshape(%p0496, newshape=[50, 32, 1024]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %865 = transpose(%864, axes=[1, 0, 2]) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%865, %p1339) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1026 = %1025(%1024, %988) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1027 = fn (%p0495: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0495, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1028 = %1027(%1026) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1029 = fn (%p0542: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0542, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1030 = %1029(%1028) /* ty=Tensor[(32, 50, 1), float32] */;
  %1031 = fn (%p0494: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p1338: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0494, %p1338) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %1032 = %1031(%1028, %1030) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1033 = fn (%p0493: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %863 = power(%p0493, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%863, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1034 = %1033(%1032) /* ty=Tensor[(32, 50, 1), float32] */;
  %1035 = fn (%p0492: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p1337: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p2114: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p345: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %857 = add(%p0492, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %858 = rsqrt(%857) /* ty=Tensor[(32, 50, 1), float32] */;
    %859 = multiply(%p1337, %858) /* ty=Tensor[(32, 50, 1024), float32] */;
    %860 = multiply(%859, %p2114) /* ty=Tensor[(32, 50, 1024), float32] */;
    %861 = add(%860, %p345) /* ty=Tensor[(32, 50, 1024), float32] */;
    %862 = reshape(%861, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%862, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %1036 = %1035(%1034, %1032, meta[relay.Constant][22] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][23] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1037 = fn (%p0491: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1336: Tensor[(4096, 1024), float16] /* ty=Tensor[(4096, 1024), float16] */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    nn.dense(%p0491, %p1336, units=None, out_dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(4096, 1024), float16]) -> Tensor[(1600, 4096), float16] */;
  %1038 = %1037(%1036, meta[relay.Constant][24] /* ty=Tensor[(4096, 1024), float16] span=/encoder/layers/encoder_layer_1/mlp/mlp.0/MatMul:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1039 = fn (%p0490: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p1335: Tensor[(4096), float16] /* ty=Tensor[(4096), float16] */, %p2113: float16 /* ty=float16 */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    %847 = reshape(%p0490, newshape=[32, 50, 4096]) /* ty=Tensor[(32, 50, 4096), float16] */;
    %848 = add(%p1335, %847) /* ty=Tensor[(32, 50, 4096), float16] */;
    %849 = divide(%848, %p2113) /* ty=Tensor[(32, 50, 4096), float16] */;
    %850 = cast(%849, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %851 = erf(%850) /* ty=Tensor[(32, 50, 4096), float32] */;
    %852 = cast(%848, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %853 = add(%851, 1f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %854 = multiply(%852, %853) /* ty=Tensor[(32, 50, 4096), float32] */;
    %855 = multiply(%854, 0.5f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %856 = reshape(%855, newshape=[-1, 4096]) /* ty=Tensor[(1600, 4096), float32] */;
    cast(%856, dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(4096), float16], float16) -> Tensor[(1600, 4096), float16] */;
  %1040 = %1039(%1038, meta[relay.Constant][25] /* ty=Tensor[(4096), float16] span=/encoder/layers/encoder_layer_1/mlp/mlp.0/Add.encoder.layers.encoder_layer_1.mlp.0.bias:0:0 */, 1.41406f16 /* ty=float16 span=/encoder/layers/encoder_layer_1/mlp/mlp.1/Constant:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1041 = fn (%p0489: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p1334: Tensor[(1024, 4096), float16] /* ty=Tensor[(1024, 4096), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    nn.dense(%p0489, %p1334, units=None, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(1024, 4096), float16]) -> Tensor[(1600, 1024), float16] */;
  %1042 = %1041(%1040, meta[relay.Constant][26] /* ty=Tensor[(1024, 4096), float16] span=/encoder/layers/encoder_layer_1/mlp/mlp.3/MatMul:0:0 */) /* ty=Tensor[(1600, 1024), float16] */;
  %1043 = fn (%p0488: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1333: Tensor[(1024), float16] /* ty=Tensor[(1024), float16] */, %p2112: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %845 = reshape(%p0488, newshape=[32, 50, 1024]) /* ty=Tensor[(32, 50, 1024), float16] */;
    %846 = add(%p1333, %845) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%p2112, %846) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1044 = %1043(%1042, meta[relay.Constant][27] /* ty=Tensor[(1024), float16] span=/encoder/layers/encoder_layer_1/mlp/mlp.3/Add.encoder.layers.encoder_layer_1.mlp.3.bias:0:0 */, %1026) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1045 = fn (%p0487: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0487, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1046 = %1045(%1044) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1047 = fn (%p0543: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0543, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1048 = %1047(%1046) /* ty=Tensor[(32, 50, 1), float32] */;
  %1049 = fn (%p0486: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p1332: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0486, %p1332) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %1050 = %1049(%1046, %1048) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1051 = fn (%p0485: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %844 = power(%p0485, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%844, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1052 = %1051(%1050) /* ty=Tensor[(32, 50, 1), float32] */;
  %1053 = fn (%p0484: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p1331: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p2111: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p344: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %837 = add(%p0484, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %838 = rsqrt(%837) /* ty=Tensor[(32, 50, 1), float32] */;
    %839 = multiply(%p1331, %838) /* ty=Tensor[(32, 50, 1024), float32] */;
    %840 = multiply(%839, %p2111) /* ty=Tensor[(32, 50, 1024), float32] */;
    %841 = add(%840, %p344) /* ty=Tensor[(32, 50, 1024), float32] */;
    %842 = transpose(%841, axes=[1, 0, 2]) /* ty=Tensor[(50, 32, 1024), float32] */;
    %843 = reshape(%842, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%843, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %1054 = %1053(%1052, %1050, meta[relay.Constant][28] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][29] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1055 = fn (%p0483: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1330: Tensor[(3072, 1024), float16] /* ty=Tensor[(3072, 1024), float16] */, Primitive=1) -> Tensor[(1600, 3072), float16] {
    nn.dense(%p0483, %p1330, units=None, out_dtype="float16") /* ty=Tensor[(1600, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(3072, 1024), float16]) -> Tensor[(1600, 3072), float16] */;
  %1056 = %1055(%1054, meta[relay.Constant][30] /* ty=Tensor[(3072, 1024), float16] span=/encoder/layers/encoder_layer_2/self_attention/MatMul:0:0 */) /* ty=Tensor[(1600, 3072), float16] */;
  %1057 = fn (%p0482: Tensor[(1600, 3072), float16] /* ty=Tensor[(1600, 3072), float16] */, %p1329: Tensor[(3072), float16] /* ty=Tensor[(3072), float16] */, Primitive=1) -> Tensor[(50, 32, 3072), float16] {
    %836 = reshape(%p0482, newshape=[50, 32, 3072]) /* ty=Tensor[(50, 32, 3072), float16] */;
    add(%p1329, %836) /* ty=Tensor[(50, 32, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 3072), float16], Tensor[(3072), float16]) -> Tensor[(50, 32, 3072), float16] */;
  %1058 = %1057(%1056, meta[relay.Constant][31] /* ty=Tensor[(3072), float16] span=Identity_131:0:0 */) /* ty=Tensor[(50, 32, 3072), float16] */;
  %1059 = fn (%p0481: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, %p1328: float16 /* ty=float16 */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %833 = strided_slice(%p0481, begin=[0i64], end=[1024i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %834 = reshape(%833, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    %835 = transpose(%834, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */;
    divide(%835, %p1328) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16], float16) -> Tensor[(512, 50, 64), float16] */;
  %1062 = fn (%p0544: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %1060 = strided_slice(%p0544, begin=[1024i64], end=[2048i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1061 = reshape(%1060, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1061, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1063 = %1059(%1058, 8f16 /* ty=float16 span=/encoder/layers/encoder_layer_2/self_attention/Constant_14:0:0 */) /* ty=Tensor[(512, 50, 64), float16] */;
  %1064 = %1062(%1058) /* ty=Tensor[(512, 50, 64), float16] */;
  %1065 = fn (%p0480: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, %p1327: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    nn.batch_matmul(%p0480, %p1327, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16], Tensor[(512, 50, 64), float16]) -> Tensor[(512, 50, 50), float16] */;
  %1066 = %1065(%1063, %1064) /* ty=Tensor[(512, 50, 50), float16] */;
  %1067 = fn (%p0479: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float32] {
    %832 = reshape(%p0479, newshape=[512, 50, 50]) /* ty=Tensor[(512, 50, 50), float16] */;
    cast(%832, dtype="float32") /* ty=Tensor[(512, 50, 50), float32] */
  } /* ty=fn (Tensor[(512, 50, 50), float16]) -> Tensor[(512, 50, 50), float32] */;
  %1068 = %1067(%1066) /* ty=Tensor[(512, 50, 50), float32] */;
  %1069 = fn (%p0478: Tensor[(512, 50, 50), float32] /* ty=Tensor[(512, 50, 50), float32] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    %831 = nn.softmax(%p0478, axis=2) /* ty=Tensor[(512, 50, 50), float32] */;
    cast(%831, dtype="float16") /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float32]) -> Tensor[(512, 50, 50), float16] */;
  %1072 = fn (%p0545: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 64, 50), float16] {
    %1070 = strided_slice(%p0545, begin=[2048i64], end=[3072i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1071 = reshape(%1070, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1071, axes=[1, 2, 0]) /* ty=Tensor[(512, 64, 50), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 64, 50), float16] */;
  %1073 = %1069(%1068) /* ty=Tensor[(512, 50, 50), float16] */;
  %1074 = %1072(%1058) /* ty=Tensor[(512, 64, 50), float16] */;
  %1075 = fn (%p0477: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, %p1326: Tensor[(512, 64, 50), float16] /* ty=Tensor[(512, 64, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    nn.batch_matmul(%p0477, %p1326, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float16], Tensor[(512, 64, 50), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1076 = %1075(%1073, %1074) /* ty=Tensor[(512, 50, 64), float16] */;
  %1077 = fn (%p0476: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %829 = reshape(%p0476, newshape=[512, 50, 64]) /* ty=Tensor[(512, 50, 64), float16] */;
    %830 = transpose(%829, axes=[1, 0, 2]) /* ty=Tensor[(50, 512, 64), float16] */;
    reshape(%830, newshape=[1600, 1024]) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16]) -> Tensor[(1600, 1024), float16] */;
  %1078 = %1077(%1076) /* ty=Tensor[(1600, 1024), float16] */;
  %1079 = fn (%p0475: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1325: Tensor[(1024, 1024), float16] /* ty=Tensor[(1024, 1024), float16] */, %p2110: Tensor[(1, 1024), float16] /* ty=Tensor[(1, 1024), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %828 = nn.dense(%p0475, %p1325, units=1024, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */;
    add(%828, %p2110) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024, 1024), float16], Tensor[(1, 1024), float16]) -> Tensor[(1600, 1024), float16] */;
  %1080 = %1079(%1078, meta[relay.Constant][32] /* ty=Tensor[(1024, 1024), float16] span=/encoder/layers/encoder_layer_2/self_attention/Gemm.encoder.layers.encoder_layer_2.self_attention.out_proj.weight:0:0 */, meta[relay.Constant][33] /* ty=Tensor[(1, 1024), float16] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1081 = fn (%p0474: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1324: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %826 = reshape(%p0474, newshape=[50, 32, 1024]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %827 = transpose(%826, axes=[1, 0, 2]) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%827, %p1324) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1082 = %1081(%1080, %1044) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1083 = fn (%p0473: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0473, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1084 = %1083(%1082) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1085 = fn (%p0546: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0546, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1086 = %1085(%1084) /* ty=Tensor[(32, 50, 1), float32] */;
  %1087 = fn (%p0472: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p1323: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0472, %p1323) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %1088 = %1087(%1084, %1086) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1089 = fn (%p0471: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %825 = power(%p0471, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%825, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1090 = %1089(%1088) /* ty=Tensor[(32, 50, 1), float32] */;
  %1091 = fn (%p0470: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p1322: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p2109: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p343: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %819 = add(%p0470, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %820 = rsqrt(%819) /* ty=Tensor[(32, 50, 1), float32] */;
    %821 = multiply(%p1322, %820) /* ty=Tensor[(32, 50, 1024), float32] */;
    %822 = multiply(%821, %p2109) /* ty=Tensor[(32, 50, 1024), float32] */;
    %823 = add(%822, %p343) /* ty=Tensor[(32, 50, 1024), float32] */;
    %824 = reshape(%823, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%824, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %1092 = %1091(%1090, %1088, meta[relay.Constant][34] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][35] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1093 = fn (%p0469: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1321: Tensor[(4096, 1024), float16] /* ty=Tensor[(4096, 1024), float16] */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    nn.dense(%p0469, %p1321, units=None, out_dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(4096, 1024), float16]) -> Tensor[(1600, 4096), float16] */;
  %1094 = %1093(%1092, meta[relay.Constant][36] /* ty=Tensor[(4096, 1024), float16] span=/encoder/layers/encoder_layer_2/mlp/mlp.0/MatMul:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1095 = fn (%p0468: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p1320: Tensor[(4096), float16] /* ty=Tensor[(4096), float16] */, %p2108: float16 /* ty=float16 */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    %809 = reshape(%p0468, newshape=[32, 50, 4096]) /* ty=Tensor[(32, 50, 4096), float16] */;
    %810 = add(%p1320, %809) /* ty=Tensor[(32, 50, 4096), float16] */;
    %811 = divide(%810, %p2108) /* ty=Tensor[(32, 50, 4096), float16] */;
    %812 = cast(%811, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %813 = erf(%812) /* ty=Tensor[(32, 50, 4096), float32] */;
    %814 = cast(%810, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %815 = add(%813, 1f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %816 = multiply(%814, %815) /* ty=Tensor[(32, 50, 4096), float32] */;
    %817 = multiply(%816, 0.5f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %818 = reshape(%817, newshape=[-1, 4096]) /* ty=Tensor[(1600, 4096), float32] */;
    cast(%818, dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(4096), float16], float16) -> Tensor[(1600, 4096), float16] */;
  %1096 = %1095(%1094, meta[relay.Constant][37] /* ty=Tensor[(4096), float16] span=/encoder/layers/encoder_layer_2/mlp/mlp.0/Add.encoder.layers.encoder_layer_2.mlp.0.bias:0:0 */, 1.41406f16 /* ty=float16 span=/encoder/layers/encoder_layer_2/mlp/mlp.1/Constant:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1097 = fn (%p0467: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p1319: Tensor[(1024, 4096), float16] /* ty=Tensor[(1024, 4096), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    nn.dense(%p0467, %p1319, units=None, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(1024, 4096), float16]) -> Tensor[(1600, 1024), float16] */;
  %1098 = %1097(%1096, meta[relay.Constant][38] /* ty=Tensor[(1024, 4096), float16] span=/encoder/layers/encoder_layer_2/mlp/mlp.3/MatMul:0:0 */) /* ty=Tensor[(1600, 1024), float16] */;
  %1099 = fn (%p0466: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1318: Tensor[(1024), float16] /* ty=Tensor[(1024), float16] */, %p2107: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %807 = reshape(%p0466, newshape=[32, 50, 1024]) /* ty=Tensor[(32, 50, 1024), float16] */;
    %808 = add(%p1318, %807) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%p2107, %808) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1100 = %1099(%1098, meta[relay.Constant][39] /* ty=Tensor[(1024), float16] span=/encoder/layers/encoder_layer_2/mlp/mlp.3/Add.encoder.layers.encoder_layer_2.mlp.3.bias:0:0 */, %1082) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1101 = fn (%p0465: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0465, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1102 = %1101(%1100) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1103 = fn (%p0547: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0547, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1104 = %1103(%1102) /* ty=Tensor[(32, 50, 1), float32] */;
  %1105 = fn (%p0464: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p1317: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0464, %p1317) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %1106 = %1105(%1102, %1104) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1107 = fn (%p0463: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %806 = power(%p0463, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%806, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1108 = %1107(%1106) /* ty=Tensor[(32, 50, 1), float32] */;
  %1109 = fn (%p0462: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p1316: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p2106: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p342: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %799 = add(%p0462, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %800 = rsqrt(%799) /* ty=Tensor[(32, 50, 1), float32] */;
    %801 = multiply(%p1316, %800) /* ty=Tensor[(32, 50, 1024), float32] */;
    %802 = multiply(%801, %p2106) /* ty=Tensor[(32, 50, 1024), float32] */;
    %803 = add(%802, %p342) /* ty=Tensor[(32, 50, 1024), float32] */;
    %804 = transpose(%803, axes=[1, 0, 2]) /* ty=Tensor[(50, 32, 1024), float32] */;
    %805 = reshape(%804, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%805, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %1110 = %1109(%1108, %1106, meta[relay.Constant][40] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][41] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1111 = fn (%p0461: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1315: Tensor[(3072, 1024), float16] /* ty=Tensor[(3072, 1024), float16] */, Primitive=1) -> Tensor[(1600, 3072), float16] {
    nn.dense(%p0461, %p1315, units=None, out_dtype="float16") /* ty=Tensor[(1600, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(3072, 1024), float16]) -> Tensor[(1600, 3072), float16] */;
  %1112 = %1111(%1110, meta[relay.Constant][42] /* ty=Tensor[(3072, 1024), float16] span=/encoder/layers/encoder_layer_3/self_attention/MatMul:0:0 */) /* ty=Tensor[(1600, 3072), float16] */;
  %1113 = fn (%p0460: Tensor[(1600, 3072), float16] /* ty=Tensor[(1600, 3072), float16] */, %p1314: Tensor[(3072), float16] /* ty=Tensor[(3072), float16] */, Primitive=1) -> Tensor[(50, 32, 3072), float16] {
    %798 = reshape(%p0460, newshape=[50, 32, 3072]) /* ty=Tensor[(50, 32, 3072), float16] */;
    add(%p1314, %798) /* ty=Tensor[(50, 32, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 3072), float16], Tensor[(3072), float16]) -> Tensor[(50, 32, 3072), float16] */;
  %1114 = %1113(%1112, meta[relay.Constant][43] /* ty=Tensor[(3072), float16] span=Identity_125:0:0 */) /* ty=Tensor[(50, 32, 3072), float16] */;
  %1115 = fn (%p0459: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, %p1313: float16 /* ty=float16 */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %795 = strided_slice(%p0459, begin=[0i64], end=[1024i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %796 = reshape(%795, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    %797 = transpose(%796, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */;
    divide(%797, %p1313) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16], float16) -> Tensor[(512, 50, 64), float16] */;
  %1118 = fn (%p0548: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %1116 = strided_slice(%p0548, begin=[1024i64], end=[2048i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1117 = reshape(%1116, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1117, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1119 = %1115(%1114, 8f16 /* ty=float16 span=/encoder/layers/encoder_layer_3/self_attention/Constant_14:0:0 */) /* ty=Tensor[(512, 50, 64), float16] */;
  %1120 = %1118(%1114) /* ty=Tensor[(512, 50, 64), float16] */;
  %1121 = fn (%p0458: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, %p1312: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    nn.batch_matmul(%p0458, %p1312, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16], Tensor[(512, 50, 64), float16]) -> Tensor[(512, 50, 50), float16] */;
  %1122 = %1121(%1119, %1120) /* ty=Tensor[(512, 50, 50), float16] */;
  %1123 = fn (%p0457: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float32] {
    %794 = reshape(%p0457, newshape=[512, 50, 50]) /* ty=Tensor[(512, 50, 50), float16] */;
    cast(%794, dtype="float32") /* ty=Tensor[(512, 50, 50), float32] */
  } /* ty=fn (Tensor[(512, 50, 50), float16]) -> Tensor[(512, 50, 50), float32] */;
  %1124 = %1123(%1122) /* ty=Tensor[(512, 50, 50), float32] */;
  %1125 = fn (%p0456: Tensor[(512, 50, 50), float32] /* ty=Tensor[(512, 50, 50), float32] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    %793 = nn.softmax(%p0456, axis=2) /* ty=Tensor[(512, 50, 50), float32] */;
    cast(%793, dtype="float16") /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float32]) -> Tensor[(512, 50, 50), float16] */;
  %1128 = fn (%p0549: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 64, 50), float16] {
    %1126 = strided_slice(%p0549, begin=[2048i64], end=[3072i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1127 = reshape(%1126, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1127, axes=[1, 2, 0]) /* ty=Tensor[(512, 64, 50), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 64, 50), float16] */;
  %1129 = %1125(%1124) /* ty=Tensor[(512, 50, 50), float16] */;
  %1130 = %1128(%1114) /* ty=Tensor[(512, 64, 50), float16] */;
  %1131 = fn (%p0455: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, %p1311: Tensor[(512, 64, 50), float16] /* ty=Tensor[(512, 64, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    nn.batch_matmul(%p0455, %p1311, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float16], Tensor[(512, 64, 50), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1132 = %1131(%1129, %1130) /* ty=Tensor[(512, 50, 64), float16] */;
  %1133 = fn (%p0454: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %791 = reshape(%p0454, newshape=[512, 50, 64]) /* ty=Tensor[(512, 50, 64), float16] */;
    %792 = transpose(%791, axes=[1, 0, 2]) /* ty=Tensor[(50, 512, 64), float16] */;
    reshape(%792, newshape=[1600, 1024]) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16]) -> Tensor[(1600, 1024), float16] */;
  %1134 = %1133(%1132) /* ty=Tensor[(1600, 1024), float16] */;
  %1135 = fn (%p0453: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1310: Tensor[(1024, 1024), float16] /* ty=Tensor[(1024, 1024), float16] */, %p2105: Tensor[(1, 1024), float16] /* ty=Tensor[(1, 1024), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %790 = nn.dense(%p0453, %p1310, units=1024, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */;
    add(%790, %p2105) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024, 1024), float16], Tensor[(1, 1024), float16]) -> Tensor[(1600, 1024), float16] */;
  %1136 = %1135(%1134, meta[relay.Constant][44] /* ty=Tensor[(1024, 1024), float16] span=/encoder/layers/encoder_layer_3/self_attention/Gemm.encoder.layers.encoder_layer_3.self_attention.out_proj.weight:0:0 */, meta[relay.Constant][45] /* ty=Tensor[(1, 1024), float16] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1137 = fn (%p0452: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1309: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %788 = reshape(%p0452, newshape=[50, 32, 1024]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %789 = transpose(%788, axes=[1, 0, 2]) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%789, %p1309) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1138 = %1137(%1136, %1100) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1139 = fn (%p0451: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0451, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1140 = %1139(%1138) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1141 = fn (%p0550: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0550, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1142 = %1141(%1140) /* ty=Tensor[(32, 50, 1), float32] */;
  %1143 = fn (%p0450: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p1308: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0450, %p1308) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %1144 = %1143(%1140, %1142) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1145 = fn (%p0449: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %787 = power(%p0449, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%787, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1146 = %1145(%1144) /* ty=Tensor[(32, 50, 1), float32] */;
  %1147 = fn (%p0448: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p1307: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p2104: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p341: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %781 = add(%p0448, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %782 = rsqrt(%781) /* ty=Tensor[(32, 50, 1), float32] */;
    %783 = multiply(%p1307, %782) /* ty=Tensor[(32, 50, 1024), float32] */;
    %784 = multiply(%783, %p2104) /* ty=Tensor[(32, 50, 1024), float32] */;
    %785 = add(%784, %p341) /* ty=Tensor[(32, 50, 1024), float32] */;
    %786 = reshape(%785, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%786, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %1148 = %1147(%1146, %1144, meta[relay.Constant][46] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][47] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1149 = fn (%p0447: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1306: Tensor[(4096, 1024), float16] /* ty=Tensor[(4096, 1024), float16] */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    nn.dense(%p0447, %p1306, units=None, out_dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(4096, 1024), float16]) -> Tensor[(1600, 4096), float16] */;
  %1150 = %1149(%1148, meta[relay.Constant][48] /* ty=Tensor[(4096, 1024), float16] span=/encoder/layers/encoder_layer_3/mlp/mlp.0/MatMul:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1151 = fn (%p0446: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p1305: Tensor[(4096), float16] /* ty=Tensor[(4096), float16] */, %p2103: float16 /* ty=float16 */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    %771 = reshape(%p0446, newshape=[32, 50, 4096]) /* ty=Tensor[(32, 50, 4096), float16] */;
    %772 = add(%p1305, %771) /* ty=Tensor[(32, 50, 4096), float16] */;
    %773 = divide(%772, %p2103) /* ty=Tensor[(32, 50, 4096), float16] */;
    %774 = cast(%773, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %775 = erf(%774) /* ty=Tensor[(32, 50, 4096), float32] */;
    %776 = cast(%772, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %777 = add(%775, 1f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %778 = multiply(%776, %777) /* ty=Tensor[(32, 50, 4096), float32] */;
    %779 = multiply(%778, 0.5f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %780 = reshape(%779, newshape=[-1, 4096]) /* ty=Tensor[(1600, 4096), float32] */;
    cast(%780, dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(4096), float16], float16) -> Tensor[(1600, 4096), float16] */;
  %1152 = %1151(%1150, meta[relay.Constant][49] /* ty=Tensor[(4096), float16] span=/encoder/layers/encoder_layer_3/mlp/mlp.0/Add.encoder.layers.encoder_layer_3.mlp.0.bias:0:0 */, 1.41406f16 /* ty=float16 span=/encoder/layers/encoder_layer_3/mlp/mlp.1/Constant:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1153 = fn (%p0445: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p1304: Tensor[(1024, 4096), float16] /* ty=Tensor[(1024, 4096), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    nn.dense(%p0445, %p1304, units=None, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(1024, 4096), float16]) -> Tensor[(1600, 1024), float16] */;
  %1154 = %1153(%1152, meta[relay.Constant][50] /* ty=Tensor[(1024, 4096), float16] span=/encoder/layers/encoder_layer_3/mlp/mlp.3/MatMul:0:0 */) /* ty=Tensor[(1600, 1024), float16] */;
  %1155 = fn (%p0444: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1303: Tensor[(1024), float16] /* ty=Tensor[(1024), float16] */, %p2102: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %769 = reshape(%p0444, newshape=[32, 50, 1024]) /* ty=Tensor[(32, 50, 1024), float16] */;
    %770 = add(%p1303, %769) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%p2102, %770) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1156 = %1155(%1154, meta[relay.Constant][51] /* ty=Tensor[(1024), float16] span=/encoder/layers/encoder_layer_3/mlp/mlp.3/Add.encoder.layers.encoder_layer_3.mlp.3.bias:0:0 */, %1138) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1157 = fn (%p0443: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0443, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1158 = %1157(%1156) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1159 = fn (%p0551: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0551, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1160 = %1159(%1158) /* ty=Tensor[(32, 50, 1), float32] */;
  %1161 = fn (%p0442: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p1302: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0442, %p1302) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %1162 = %1161(%1158, %1160) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1163 = fn (%p0441: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %768 = power(%p0441, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%768, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1164 = %1163(%1162) /* ty=Tensor[(32, 50, 1), float32] */;
  %1165 = fn (%p0440: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p1301: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p2101: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p340: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %761 = add(%p0440, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %762 = rsqrt(%761) /* ty=Tensor[(32, 50, 1), float32] */;
    %763 = multiply(%p1301, %762) /* ty=Tensor[(32, 50, 1024), float32] */;
    %764 = multiply(%763, %p2101) /* ty=Tensor[(32, 50, 1024), float32] */;
    %765 = add(%764, %p340) /* ty=Tensor[(32, 50, 1024), float32] */;
    %766 = transpose(%765, axes=[1, 0, 2]) /* ty=Tensor[(50, 32, 1024), float32] */;
    %767 = reshape(%766, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%767, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %1166 = %1165(%1164, %1162, meta[relay.Constant][52] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][53] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1167 = fn (%p0439: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1300: Tensor[(3072, 1024), float16] /* ty=Tensor[(3072, 1024), float16] */, Primitive=1) -> Tensor[(1600, 3072), float16] {
    nn.dense(%p0439, %p1300, units=None, out_dtype="float16") /* ty=Tensor[(1600, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(3072, 1024), float16]) -> Tensor[(1600, 3072), float16] */;
  %1168 = %1167(%1166, meta[relay.Constant][54] /* ty=Tensor[(3072, 1024), float16] span=/encoder/layers/encoder_layer_4/self_attention/MatMul:0:0 */) /* ty=Tensor[(1600, 3072), float16] */;
  %1169 = fn (%p0438: Tensor[(1600, 3072), float16] /* ty=Tensor[(1600, 3072), float16] */, %p1299: Tensor[(3072), float16] /* ty=Tensor[(3072), float16] */, Primitive=1) -> Tensor[(50, 32, 3072), float16] {
    %760 = reshape(%p0438, newshape=[50, 32, 3072]) /* ty=Tensor[(50, 32, 3072), float16] */;
    add(%p1299, %760) /* ty=Tensor[(50, 32, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 3072), float16], Tensor[(3072), float16]) -> Tensor[(50, 32, 3072), float16] */;
  %1170 = %1169(%1168, meta[relay.Constant][55] /* ty=Tensor[(3072), float16] span=Identity_119:0:0 */) /* ty=Tensor[(50, 32, 3072), float16] */;
  %1171 = fn (%p0437: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, %p1298: float16 /* ty=float16 */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %757 = strided_slice(%p0437, begin=[0i64], end=[1024i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %758 = reshape(%757, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    %759 = transpose(%758, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */;
    divide(%759, %p1298) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16], float16) -> Tensor[(512, 50, 64), float16] */;
  %1174 = fn (%p0552: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %1172 = strided_slice(%p0552, begin=[1024i64], end=[2048i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1173 = reshape(%1172, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1173, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1175 = %1171(%1170, 8f16 /* ty=float16 span=/encoder/layers/encoder_layer_4/self_attention/Constant_14:0:0 */) /* ty=Tensor[(512, 50, 64), float16] */;
  %1176 = %1174(%1170) /* ty=Tensor[(512, 50, 64), float16] */;
  %1177 = fn (%p0436: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, %p1297: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    nn.batch_matmul(%p0436, %p1297, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16], Tensor[(512, 50, 64), float16]) -> Tensor[(512, 50, 50), float16] */;
  %1178 = %1177(%1175, %1176) /* ty=Tensor[(512, 50, 50), float16] */;
  %1179 = fn (%p0435: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float32] {
    %756 = reshape(%p0435, newshape=[512, 50, 50]) /* ty=Tensor[(512, 50, 50), float16] */;
    cast(%756, dtype="float32") /* ty=Tensor[(512, 50, 50), float32] */
  } /* ty=fn (Tensor[(512, 50, 50), float16]) -> Tensor[(512, 50, 50), float32] */;
  %1180 = %1179(%1178) /* ty=Tensor[(512, 50, 50), float32] */;
  %1181 = fn (%p0434: Tensor[(512, 50, 50), float32] /* ty=Tensor[(512, 50, 50), float32] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    %755 = nn.softmax(%p0434, axis=2) /* ty=Tensor[(512, 50, 50), float32] */;
    cast(%755, dtype="float16") /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float32]) -> Tensor[(512, 50, 50), float16] */;
  %1184 = fn (%p0553: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 64, 50), float16] {
    %1182 = strided_slice(%p0553, begin=[2048i64], end=[3072i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1183 = reshape(%1182, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1183, axes=[1, 2, 0]) /* ty=Tensor[(512, 64, 50), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 64, 50), float16] */;
  %1185 = %1181(%1180) /* ty=Tensor[(512, 50, 50), float16] */;
  %1186 = %1184(%1170) /* ty=Tensor[(512, 64, 50), float16] */;
  %1187 = fn (%p0433: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, %p1296: Tensor[(512, 64, 50), float16] /* ty=Tensor[(512, 64, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    nn.batch_matmul(%p0433, %p1296, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float16], Tensor[(512, 64, 50), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1188 = %1187(%1185, %1186) /* ty=Tensor[(512, 50, 64), float16] */;
  %1189 = fn (%p0432: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %753 = reshape(%p0432, newshape=[512, 50, 64]) /* ty=Tensor[(512, 50, 64), float16] */;
    %754 = transpose(%753, axes=[1, 0, 2]) /* ty=Tensor[(50, 512, 64), float16] */;
    reshape(%754, newshape=[1600, 1024]) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16]) -> Tensor[(1600, 1024), float16] */;
  %1190 = %1189(%1188) /* ty=Tensor[(1600, 1024), float16] */;
  %1191 = fn (%p0431: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1295: Tensor[(1024, 1024), float16] /* ty=Tensor[(1024, 1024), float16] */, %p2100: Tensor[(1, 1024), float16] /* ty=Tensor[(1, 1024), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %752 = nn.dense(%p0431, %p1295, units=1024, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */;
    add(%752, %p2100) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024, 1024), float16], Tensor[(1, 1024), float16]) -> Tensor[(1600, 1024), float16] */;
  %1192 = %1191(%1190, meta[relay.Constant][56] /* ty=Tensor[(1024, 1024), float16] span=/encoder/layers/encoder_layer_4/self_attention/Gemm.encoder.layers.encoder_layer_4.self_attention.out_proj.weight:0:0 */, meta[relay.Constant][57] /* ty=Tensor[(1, 1024), float16] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1193 = fn (%p0430: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1294: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %750 = reshape(%p0430, newshape=[50, 32, 1024]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %751 = transpose(%750, axes=[1, 0, 2]) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%751, %p1294) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1194 = %1193(%1192, %1156) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1195 = fn (%p0429: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0429, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1196 = %1195(%1194) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1197 = fn (%p0554: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0554, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1198 = %1197(%1196) /* ty=Tensor[(32, 50, 1), float32] */;
  %1199 = fn (%p0428: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p1293: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0428, %p1293) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %1200 = %1199(%1196, %1198) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1201 = fn (%p0427: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %749 = power(%p0427, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%749, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1202 = %1201(%1200) /* ty=Tensor[(32, 50, 1), float32] */;
  %1203 = fn (%p0426: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p1292: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p299: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p339: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %743 = add(%p0426, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %744 = rsqrt(%743) /* ty=Tensor[(32, 50, 1), float32] */;
    %745 = multiply(%p1292, %744) /* ty=Tensor[(32, 50, 1024), float32] */;
    %746 = multiply(%745, %p299) /* ty=Tensor[(32, 50, 1024), float32] */;
    %747 = add(%746, %p339) /* ty=Tensor[(32, 50, 1024), float32] */;
    %748 = reshape(%747, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%748, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %1204 = %1203(%1202, %1200, meta[relay.Constant][58] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][59] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1205 = fn (%p0425: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1291: Tensor[(4096, 1024), float16] /* ty=Tensor[(4096, 1024), float16] */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    nn.dense(%p0425, %p1291, units=None, out_dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(4096, 1024), float16]) -> Tensor[(1600, 4096), float16] */;
  %1206 = %1205(%1204, meta[relay.Constant][60] /* ty=Tensor[(4096, 1024), float16] span=/encoder/layers/encoder_layer_4/mlp/mlp.0/MatMul:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1207 = fn (%p0424: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p1290: Tensor[(4096), float16] /* ty=Tensor[(4096), float16] */, %p298: float16 /* ty=float16 */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    %733 = reshape(%p0424, newshape=[32, 50, 4096]) /* ty=Tensor[(32, 50, 4096), float16] */;
    %734 = add(%p1290, %733) /* ty=Tensor[(32, 50, 4096), float16] */;
    %735 = divide(%734, %p298) /* ty=Tensor[(32, 50, 4096), float16] */;
    %736 = cast(%735, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %737 = erf(%736) /* ty=Tensor[(32, 50, 4096), float32] */;
    %738 = cast(%734, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %739 = add(%737, 1f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %740 = multiply(%738, %739) /* ty=Tensor[(32, 50, 4096), float32] */;
    %741 = multiply(%740, 0.5f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %742 = reshape(%741, newshape=[-1, 4096]) /* ty=Tensor[(1600, 4096), float32] */;
    cast(%742, dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(4096), float16], float16) -> Tensor[(1600, 4096), float16] */;
  %1208 = %1207(%1206, meta[relay.Constant][61] /* ty=Tensor[(4096), float16] span=/encoder/layers/encoder_layer_4/mlp/mlp.0/Add.encoder.layers.encoder_layer_4.mlp.0.bias:0:0 */, 1.41406f16 /* ty=float16 span=/encoder/layers/encoder_layer_4/mlp/mlp.1/Constant:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1209 = fn (%p0423: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p1289: Tensor[(1024, 4096), float16] /* ty=Tensor[(1024, 4096), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    nn.dense(%p0423, %p1289, units=None, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(1024, 4096), float16]) -> Tensor[(1600, 1024), float16] */;
  %1210 = %1209(%1208, meta[relay.Constant][62] /* ty=Tensor[(1024, 4096), float16] span=/encoder/layers/encoder_layer_4/mlp/mlp.3/MatMul:0:0 */) /* ty=Tensor[(1600, 1024), float16] */;
  %1211 = fn (%p0422: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1288: Tensor[(1024), float16] /* ty=Tensor[(1024), float16] */, %p297: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %731 = reshape(%p0422, newshape=[32, 50, 1024]) /* ty=Tensor[(32, 50, 1024), float16] */;
    %732 = add(%p1288, %731) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%p297, %732) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1212 = %1211(%1210, meta[relay.Constant][63] /* ty=Tensor[(1024), float16] span=/encoder/layers/encoder_layer_4/mlp/mlp.3/Add.encoder.layers.encoder_layer_4.mlp.3.bias:0:0 */, %1194) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1213 = fn (%p0421: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0421, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1214 = %1213(%1212) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1215 = fn (%p0555: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0555, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1216 = %1215(%1214) /* ty=Tensor[(32, 50, 1), float32] */;
  %1217 = fn (%p0420: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p1287: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0420, %p1287) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %1218 = %1217(%1214, %1216) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1219 = fn (%p0419: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %730 = power(%p0419, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%730, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1220 = %1219(%1218) /* ty=Tensor[(32, 50, 1), float32] */;
  %1221 = fn (%p0418: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p1286: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p296: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p338: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %723 = add(%p0418, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %724 = rsqrt(%723) /* ty=Tensor[(32, 50, 1), float32] */;
    %725 = multiply(%p1286, %724) /* ty=Tensor[(32, 50, 1024), float32] */;
    %726 = multiply(%725, %p296) /* ty=Tensor[(32, 50, 1024), float32] */;
    %727 = add(%726, %p338) /* ty=Tensor[(32, 50, 1024), float32] */;
    %728 = transpose(%727, axes=[1, 0, 2]) /* ty=Tensor[(50, 32, 1024), float32] */;
    %729 = reshape(%728, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%729, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %1222 = %1221(%1220, %1218, meta[relay.Constant][64] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][65] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1223 = fn (%p0417: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1285: Tensor[(3072, 1024), float16] /* ty=Tensor[(3072, 1024), float16] */, Primitive=1) -> Tensor[(1600, 3072), float16] {
    nn.dense(%p0417, %p1285, units=None, out_dtype="float16") /* ty=Tensor[(1600, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(3072, 1024), float16]) -> Tensor[(1600, 3072), float16] */;
  %1224 = %1223(%1222, meta[relay.Constant][66] /* ty=Tensor[(3072, 1024), float16] span=/encoder/layers/encoder_layer_5/self_attention/MatMul:0:0 */) /* ty=Tensor[(1600, 3072), float16] */;
  %1225 = fn (%p0416: Tensor[(1600, 3072), float16] /* ty=Tensor[(1600, 3072), float16] */, %p1284: Tensor[(3072), float16] /* ty=Tensor[(3072), float16] */, Primitive=1) -> Tensor[(50, 32, 3072), float16] {
    %722 = reshape(%p0416, newshape=[50, 32, 3072]) /* ty=Tensor[(50, 32, 3072), float16] */;
    add(%p1284, %722) /* ty=Tensor[(50, 32, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 3072), float16], Tensor[(3072), float16]) -> Tensor[(50, 32, 3072), float16] */;
  %1226 = %1225(%1224, meta[relay.Constant][67] /* ty=Tensor[(3072), float16] span=Identity_113:0:0 */) /* ty=Tensor[(50, 32, 3072), float16] */;
  %1227 = fn (%p0415: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, %p1283: float16 /* ty=float16 */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %719 = strided_slice(%p0415, begin=[0i64], end=[1024i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %720 = reshape(%719, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    %721 = transpose(%720, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */;
    divide(%721, %p1283) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16], float16) -> Tensor[(512, 50, 64), float16] */;
  %1230 = fn (%p0556: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %1228 = strided_slice(%p0556, begin=[1024i64], end=[2048i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1229 = reshape(%1228, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1229, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1231 = %1227(%1226, 8f16 /* ty=float16 span=/encoder/layers/encoder_layer_5/self_attention/Constant_14:0:0 */) /* ty=Tensor[(512, 50, 64), float16] */;
  %1232 = %1230(%1226) /* ty=Tensor[(512, 50, 64), float16] */;
  %1233 = fn (%p0414: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, %p1282: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    nn.batch_matmul(%p0414, %p1282, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16], Tensor[(512, 50, 64), float16]) -> Tensor[(512, 50, 50), float16] */;
  %1234 = %1233(%1231, %1232) /* ty=Tensor[(512, 50, 50), float16] */;
  %1235 = fn (%p0413: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float32] {
    %718 = reshape(%p0413, newshape=[512, 50, 50]) /* ty=Tensor[(512, 50, 50), float16] */;
    cast(%718, dtype="float32") /* ty=Tensor[(512, 50, 50), float32] */
  } /* ty=fn (Tensor[(512, 50, 50), float16]) -> Tensor[(512, 50, 50), float32] */;
  %1236 = %1235(%1234) /* ty=Tensor[(512, 50, 50), float32] */;
  %1237 = fn (%p0412: Tensor[(512, 50, 50), float32] /* ty=Tensor[(512, 50, 50), float32] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    %717 = nn.softmax(%p0412, axis=2) /* ty=Tensor[(512, 50, 50), float32] */;
    cast(%717, dtype="float16") /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float32]) -> Tensor[(512, 50, 50), float16] */;
  %1240 = fn (%p0557: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 64, 50), float16] {
    %1238 = strided_slice(%p0557, begin=[2048i64], end=[3072i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1239 = reshape(%1238, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1239, axes=[1, 2, 0]) /* ty=Tensor[(512, 64, 50), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 64, 50), float16] */;
  %1241 = %1237(%1236) /* ty=Tensor[(512, 50, 50), float16] */;
  %1242 = %1240(%1226) /* ty=Tensor[(512, 64, 50), float16] */;
  %1243 = fn (%p0411: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, %p1281: Tensor[(512, 64, 50), float16] /* ty=Tensor[(512, 64, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    nn.batch_matmul(%p0411, %p1281, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float16], Tensor[(512, 64, 50), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1244 = %1243(%1241, %1242) /* ty=Tensor[(512, 50, 64), float16] */;
  %1245 = fn (%p0410: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %715 = reshape(%p0410, newshape=[512, 50, 64]) /* ty=Tensor[(512, 50, 64), float16] */;
    %716 = transpose(%715, axes=[1, 0, 2]) /* ty=Tensor[(50, 512, 64), float16] */;
    reshape(%716, newshape=[1600, 1024]) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16]) -> Tensor[(1600, 1024), float16] */;
  %1246 = %1245(%1244) /* ty=Tensor[(1600, 1024), float16] */;
  %1247 = fn (%p0409: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1280: Tensor[(1024, 1024), float16] /* ty=Tensor[(1024, 1024), float16] */, %p295: Tensor[(1, 1024), float16] /* ty=Tensor[(1, 1024), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %714 = nn.dense(%p0409, %p1280, units=1024, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */;
    add(%714, %p295) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024, 1024), float16], Tensor[(1, 1024), float16]) -> Tensor[(1600, 1024), float16] */;
  %1248 = %1247(%1246, meta[relay.Constant][68] /* ty=Tensor[(1024, 1024), float16] span=/encoder/layers/encoder_layer_5/self_attention/Gemm.encoder.layers.encoder_layer_5.self_attention.out_proj.weight:0:0 */, meta[relay.Constant][69] /* ty=Tensor[(1, 1024), float16] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1249 = fn (%p0408: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1279: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %712 = reshape(%p0408, newshape=[50, 32, 1024]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %713 = transpose(%712, axes=[1, 0, 2]) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%713, %p1279) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1250 = %1249(%1248, %1212) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1251 = fn (%p0407: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0407, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1252 = %1251(%1250) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1253 = fn (%p0558: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0558, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1254 = %1253(%1252) /* ty=Tensor[(32, 50, 1), float32] */;
  %1255 = fn (%p0406: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p1278: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0406, %p1278) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %1256 = %1255(%1252, %1254) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1257 = fn (%p0405: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %711 = power(%p0405, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%711, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1258 = %1257(%1256) /* ty=Tensor[(32, 50, 1), float32] */;
  %1259 = fn (%p0404: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p1277: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p294: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p337: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %705 = add(%p0404, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %706 = rsqrt(%705) /* ty=Tensor[(32, 50, 1), float32] */;
    %707 = multiply(%p1277, %706) /* ty=Tensor[(32, 50, 1024), float32] */;
    %708 = multiply(%707, %p294) /* ty=Tensor[(32, 50, 1024), float32] */;
    %709 = add(%708, %p337) /* ty=Tensor[(32, 50, 1024), float32] */;
    %710 = reshape(%709, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%710, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %1260 = %1259(%1258, %1256, meta[relay.Constant][70] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][71] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1261 = fn (%p0403: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1276: Tensor[(4096, 1024), float16] /* ty=Tensor[(4096, 1024), float16] */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    nn.dense(%p0403, %p1276, units=None, out_dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(4096, 1024), float16]) -> Tensor[(1600, 4096), float16] */;
  %1262 = %1261(%1260, meta[relay.Constant][72] /* ty=Tensor[(4096, 1024), float16] span=/encoder/layers/encoder_layer_5/mlp/mlp.0/MatMul:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1263 = fn (%p0402: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p1275: Tensor[(4096), float16] /* ty=Tensor[(4096), float16] */, %p293: float16 /* ty=float16 */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    %695 = reshape(%p0402, newshape=[32, 50, 4096]) /* ty=Tensor[(32, 50, 4096), float16] */;
    %696 = add(%p1275, %695) /* ty=Tensor[(32, 50, 4096), float16] */;
    %697 = divide(%696, %p293) /* ty=Tensor[(32, 50, 4096), float16] */;
    %698 = cast(%697, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %699 = erf(%698) /* ty=Tensor[(32, 50, 4096), float32] */;
    %700 = cast(%696, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %701 = add(%699, 1f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %702 = multiply(%700, %701) /* ty=Tensor[(32, 50, 4096), float32] */;
    %703 = multiply(%702, 0.5f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %704 = reshape(%703, newshape=[-1, 4096]) /* ty=Tensor[(1600, 4096), float32] */;
    cast(%704, dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(4096), float16], float16) -> Tensor[(1600, 4096), float16] */;
  %1264 = %1263(%1262, meta[relay.Constant][73] /* ty=Tensor[(4096), float16] span=/encoder/layers/encoder_layer_5/mlp/mlp.0/Add.encoder.layers.encoder_layer_5.mlp.0.bias:0:0 */, 1.41406f16 /* ty=float16 span=/encoder/layers/encoder_layer_5/mlp/mlp.1/Constant:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1265 = fn (%p0401: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p1274: Tensor[(1024, 4096), float16] /* ty=Tensor[(1024, 4096), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    nn.dense(%p0401, %p1274, units=None, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(1024, 4096), float16]) -> Tensor[(1600, 1024), float16] */;
  %1266 = %1265(%1264, meta[relay.Constant][74] /* ty=Tensor[(1024, 4096), float16] span=/encoder/layers/encoder_layer_5/mlp/mlp.3/MatMul:0:0 */) /* ty=Tensor[(1600, 1024), float16] */;
  %1267 = fn (%p0400: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1273: Tensor[(1024), float16] /* ty=Tensor[(1024), float16] */, %p292: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %693 = reshape(%p0400, newshape=[32, 50, 1024]) /* ty=Tensor[(32, 50, 1024), float16] */;
    %694 = add(%p1273, %693) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%p292, %694) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1268 = %1267(%1266, meta[relay.Constant][75] /* ty=Tensor[(1024), float16] span=/encoder/layers/encoder_layer_5/mlp/mlp.3/Add.encoder.layers.encoder_layer_5.mlp.3.bias:0:0 */, %1250) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1269 = fn (%p0399: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0399, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1270 = %1269(%1268) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1271 = fn (%p0559: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0559, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1272 = %1271(%1270) /* ty=Tensor[(32, 50, 1), float32] */;
  %1273 = fn (%p0398: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p1272: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0398, %p1272) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %1274 = %1273(%1270, %1272) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1275 = fn (%p0397: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %692 = power(%p0397, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%692, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1276 = %1275(%1274) /* ty=Tensor[(32, 50, 1), float32] */;
  %1277 = fn (%p0396: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p1271: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p291: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p336: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %685 = add(%p0396, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %686 = rsqrt(%685) /* ty=Tensor[(32, 50, 1), float32] */;
    %687 = multiply(%p1271, %686) /* ty=Tensor[(32, 50, 1024), float32] */;
    %688 = multiply(%687, %p291) /* ty=Tensor[(32, 50, 1024), float32] */;
    %689 = add(%688, %p336) /* ty=Tensor[(32, 50, 1024), float32] */;
    %690 = transpose(%689, axes=[1, 0, 2]) /* ty=Tensor[(50, 32, 1024), float32] */;
    %691 = reshape(%690, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%691, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %1278 = %1277(%1276, %1274, meta[relay.Constant][76] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][77] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1279 = fn (%p0395: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1270: Tensor[(3072, 1024), float16] /* ty=Tensor[(3072, 1024), float16] */, Primitive=1) -> Tensor[(1600, 3072), float16] {
    nn.dense(%p0395, %p1270, units=None, out_dtype="float16") /* ty=Tensor[(1600, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(3072, 1024), float16]) -> Tensor[(1600, 3072), float16] */;
  %1280 = %1279(%1278, meta[relay.Constant][78] /* ty=Tensor[(3072, 1024), float16] span=/encoder/layers/encoder_layer_6/self_attention/MatMul:0:0 */) /* ty=Tensor[(1600, 3072), float16] */;
  %1281 = fn (%p0394: Tensor[(1600, 3072), float16] /* ty=Tensor[(1600, 3072), float16] */, %p1269: Tensor[(3072), float16] /* ty=Tensor[(3072), float16] */, Primitive=1) -> Tensor[(50, 32, 3072), float16] {
    %684 = reshape(%p0394, newshape=[50, 32, 3072]) /* ty=Tensor[(50, 32, 3072), float16] */;
    add(%p1269, %684) /* ty=Tensor[(50, 32, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 3072), float16], Tensor[(3072), float16]) -> Tensor[(50, 32, 3072), float16] */;
  %1282 = %1281(%1280, meta[relay.Constant][79] /* ty=Tensor[(3072), float16] span=Identity_107:0:0 */) /* ty=Tensor[(50, 32, 3072), float16] */;
  %1283 = fn (%p0393: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, %p1268: float16 /* ty=float16 */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %681 = strided_slice(%p0393, begin=[0i64], end=[1024i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %682 = reshape(%681, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    %683 = transpose(%682, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */;
    divide(%683, %p1268) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16], float16) -> Tensor[(512, 50, 64), float16] */;
  %1286 = fn (%p0560: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %1284 = strided_slice(%p0560, begin=[1024i64], end=[2048i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1285 = reshape(%1284, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1285, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1287 = %1283(%1282, 8f16 /* ty=float16 span=/encoder/layers/encoder_layer_6/self_attention/Constant_14:0:0 */) /* ty=Tensor[(512, 50, 64), float16] */;
  %1288 = %1286(%1282) /* ty=Tensor[(512, 50, 64), float16] */;
  %1289 = fn (%p0392: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, %p1267: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    nn.batch_matmul(%p0392, %p1267, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16], Tensor[(512, 50, 64), float16]) -> Tensor[(512, 50, 50), float16] */;
  %1290 = %1289(%1287, %1288) /* ty=Tensor[(512, 50, 50), float16] */;
  %1291 = fn (%p0391: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float32] {
    %680 = reshape(%p0391, newshape=[512, 50, 50]) /* ty=Tensor[(512, 50, 50), float16] */;
    cast(%680, dtype="float32") /* ty=Tensor[(512, 50, 50), float32] */
  } /* ty=fn (Tensor[(512, 50, 50), float16]) -> Tensor[(512, 50, 50), float32] */;
  %1292 = %1291(%1290) /* ty=Tensor[(512, 50, 50), float32] */;
  %1293 = fn (%p0390: Tensor[(512, 50, 50), float32] /* ty=Tensor[(512, 50, 50), float32] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    %679 = nn.softmax(%p0390, axis=2) /* ty=Tensor[(512, 50, 50), float32] */;
    cast(%679, dtype="float16") /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float32]) -> Tensor[(512, 50, 50), float16] */;
  %1296 = fn (%p0561: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 64, 50), float16] {
    %1294 = strided_slice(%p0561, begin=[2048i64], end=[3072i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1295 = reshape(%1294, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1295, axes=[1, 2, 0]) /* ty=Tensor[(512, 64, 50), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 64, 50), float16] */;
  %1297 = %1293(%1292) /* ty=Tensor[(512, 50, 50), float16] */;
  %1298 = %1296(%1282) /* ty=Tensor[(512, 64, 50), float16] */;
  %1299 = fn (%p0389: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, %p1266: Tensor[(512, 64, 50), float16] /* ty=Tensor[(512, 64, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    nn.batch_matmul(%p0389, %p1266, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float16], Tensor[(512, 64, 50), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1300 = %1299(%1297, %1298) /* ty=Tensor[(512, 50, 64), float16] */;
  %1301 = fn (%p0388: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %677 = reshape(%p0388, newshape=[512, 50, 64]) /* ty=Tensor[(512, 50, 64), float16] */;
    %678 = transpose(%677, axes=[1, 0, 2]) /* ty=Tensor[(50, 512, 64), float16] */;
    reshape(%678, newshape=[1600, 1024]) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16]) -> Tensor[(1600, 1024), float16] */;
  %1302 = %1301(%1300) /* ty=Tensor[(1600, 1024), float16] */;
  %1303 = fn (%p0387: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1265: Tensor[(1024, 1024), float16] /* ty=Tensor[(1024, 1024), float16] */, %p290: Tensor[(1, 1024), float16] /* ty=Tensor[(1, 1024), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %676 = nn.dense(%p0387, %p1265, units=1024, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */;
    add(%676, %p290) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024, 1024), float16], Tensor[(1, 1024), float16]) -> Tensor[(1600, 1024), float16] */;
  %1304 = %1303(%1302, meta[relay.Constant][80] /* ty=Tensor[(1024, 1024), float16] span=/encoder/layers/encoder_layer_6/self_attention/Gemm.encoder.layers.encoder_layer_6.self_attention.out_proj.weight:0:0 */, meta[relay.Constant][81] /* ty=Tensor[(1, 1024), float16] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1305 = fn (%p0386: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1264: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %674 = reshape(%p0386, newshape=[50, 32, 1024]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %675 = transpose(%674, axes=[1, 0, 2]) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%675, %p1264) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1306 = %1305(%1304, %1268) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1307 = fn (%p0385: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0385, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1308 = %1307(%1306) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1309 = fn (%p0562: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0562, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1310 = %1309(%1308) /* ty=Tensor[(32, 50, 1), float32] */;
  %1311 = fn (%p0384: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p1263: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0384, %p1263) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %1312 = %1311(%1308, %1310) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1313 = fn (%p0383: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %673 = power(%p0383, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%673, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1314 = %1313(%1312) /* ty=Tensor[(32, 50, 1), float32] */;
  %1315 = fn (%p0382: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p1262: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p289: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p335: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %667 = add(%p0382, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %668 = rsqrt(%667) /* ty=Tensor[(32, 50, 1), float32] */;
    %669 = multiply(%p1262, %668) /* ty=Tensor[(32, 50, 1024), float32] */;
    %670 = multiply(%669, %p289) /* ty=Tensor[(32, 50, 1024), float32] */;
    %671 = add(%670, %p335) /* ty=Tensor[(32, 50, 1024), float32] */;
    %672 = reshape(%671, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%672, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %1316 = %1315(%1314, %1312, meta[relay.Constant][82] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][83] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1317 = fn (%p0381: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1261: Tensor[(4096, 1024), float16] /* ty=Tensor[(4096, 1024), float16] */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    nn.dense(%p0381, %p1261, units=None, out_dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(4096, 1024), float16]) -> Tensor[(1600, 4096), float16] */;
  %1318 = %1317(%1316, meta[relay.Constant][84] /* ty=Tensor[(4096, 1024), float16] span=/encoder/layers/encoder_layer_6/mlp/mlp.0/MatMul:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1319 = fn (%p0380: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p1260: Tensor[(4096), float16] /* ty=Tensor[(4096), float16] */, %p288: float16 /* ty=float16 */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    %657 = reshape(%p0380, newshape=[32, 50, 4096]) /* ty=Tensor[(32, 50, 4096), float16] */;
    %658 = add(%p1260, %657) /* ty=Tensor[(32, 50, 4096), float16] */;
    %659 = divide(%658, %p288) /* ty=Tensor[(32, 50, 4096), float16] */;
    %660 = cast(%659, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %661 = erf(%660) /* ty=Tensor[(32, 50, 4096), float32] */;
    %662 = cast(%658, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %663 = add(%661, 1f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %664 = multiply(%662, %663) /* ty=Tensor[(32, 50, 4096), float32] */;
    %665 = multiply(%664, 0.5f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %666 = reshape(%665, newshape=[-1, 4096]) /* ty=Tensor[(1600, 4096), float32] */;
    cast(%666, dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(4096), float16], float16) -> Tensor[(1600, 4096), float16] */;
  %1320 = %1319(%1318, meta[relay.Constant][85] /* ty=Tensor[(4096), float16] span=/encoder/layers/encoder_layer_6/mlp/mlp.0/Add.encoder.layers.encoder_layer_6.mlp.0.bias:0:0 */, 1.41406f16 /* ty=float16 span=/encoder/layers/encoder_layer_6/mlp/mlp.1/Constant:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1321 = fn (%p0379: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p1259: Tensor[(1024, 4096), float16] /* ty=Tensor[(1024, 4096), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    nn.dense(%p0379, %p1259, units=None, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(1024, 4096), float16]) -> Tensor[(1600, 1024), float16] */;
  %1322 = %1321(%1320, meta[relay.Constant][86] /* ty=Tensor[(1024, 4096), float16] span=/encoder/layers/encoder_layer_6/mlp/mlp.3/MatMul:0:0 */) /* ty=Tensor[(1600, 1024), float16] */;
  %1323 = fn (%p0378: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1258: Tensor[(1024), float16] /* ty=Tensor[(1024), float16] */, %p287: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %655 = reshape(%p0378, newshape=[32, 50, 1024]) /* ty=Tensor[(32, 50, 1024), float16] */;
    %656 = add(%p1258, %655) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%p287, %656) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1324 = %1323(%1322, meta[relay.Constant][87] /* ty=Tensor[(1024), float16] span=/encoder/layers/encoder_layer_6/mlp/mlp.3/Add.encoder.layers.encoder_layer_6.mlp.3.bias:0:0 */, %1306) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1325 = fn (%p0377: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0377, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1326 = %1325(%1324) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1327 = fn (%p0563: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0563, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1328 = %1327(%1326) /* ty=Tensor[(32, 50, 1), float32] */;
  %1329 = fn (%p0376: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p1257: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0376, %p1257) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %1330 = %1329(%1326, %1328) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1331 = fn (%p0375: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %654 = power(%p0375, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%654, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1332 = %1331(%1330) /* ty=Tensor[(32, 50, 1), float32] */;
  %1333 = fn (%p0374: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p1256: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p286: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p334: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %647 = add(%p0374, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %648 = rsqrt(%647) /* ty=Tensor[(32, 50, 1), float32] */;
    %649 = multiply(%p1256, %648) /* ty=Tensor[(32, 50, 1024), float32] */;
    %650 = multiply(%649, %p286) /* ty=Tensor[(32, 50, 1024), float32] */;
    %651 = add(%650, %p334) /* ty=Tensor[(32, 50, 1024), float32] */;
    %652 = transpose(%651, axes=[1, 0, 2]) /* ty=Tensor[(50, 32, 1024), float32] */;
    %653 = reshape(%652, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%653, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %1334 = %1333(%1332, %1330, meta[relay.Constant][88] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][89] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1335 = fn (%p0373: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1255: Tensor[(3072, 1024), float16] /* ty=Tensor[(3072, 1024), float16] */, Primitive=1) -> Tensor[(1600, 3072), float16] {
    nn.dense(%p0373, %p1255, units=None, out_dtype="float16") /* ty=Tensor[(1600, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(3072, 1024), float16]) -> Tensor[(1600, 3072), float16] */;
  %1336 = %1335(%1334, meta[relay.Constant][90] /* ty=Tensor[(3072, 1024), float16] span=/encoder/layers/encoder_layer_7/self_attention/MatMul:0:0 */) /* ty=Tensor[(1600, 3072), float16] */;
  %1337 = fn (%p0372: Tensor[(1600, 3072), float16] /* ty=Tensor[(1600, 3072), float16] */, %p1254: Tensor[(3072), float16] /* ty=Tensor[(3072), float16] */, Primitive=1) -> Tensor[(50, 32, 3072), float16] {
    %646 = reshape(%p0372, newshape=[50, 32, 3072]) /* ty=Tensor[(50, 32, 3072), float16] */;
    add(%p1254, %646) /* ty=Tensor[(50, 32, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 3072), float16], Tensor[(3072), float16]) -> Tensor[(50, 32, 3072), float16] */;
  %1338 = %1337(%1336, meta[relay.Constant][91] /* ty=Tensor[(3072), float16] span=Identity_101:0:0 */) /* ty=Tensor[(50, 32, 3072), float16] */;
  %1339 = fn (%p0371: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, %p1253: float16 /* ty=float16 */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %643 = strided_slice(%p0371, begin=[0i64], end=[1024i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %644 = reshape(%643, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    %645 = transpose(%644, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */;
    divide(%645, %p1253) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16], float16) -> Tensor[(512, 50, 64), float16] */;
  %1342 = fn (%p0564: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %1340 = strided_slice(%p0564, begin=[1024i64], end=[2048i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1341 = reshape(%1340, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1341, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1343 = %1339(%1338, 8f16 /* ty=float16 span=/encoder/layers/encoder_layer_7/self_attention/Constant_14:0:0 */) /* ty=Tensor[(512, 50, 64), float16] */;
  %1344 = %1342(%1338) /* ty=Tensor[(512, 50, 64), float16] */;
  %1345 = fn (%p0370: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, %p1252: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    nn.batch_matmul(%p0370, %p1252, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16], Tensor[(512, 50, 64), float16]) -> Tensor[(512, 50, 50), float16] */;
  %1346 = %1345(%1343, %1344) /* ty=Tensor[(512, 50, 50), float16] */;
  %1347 = fn (%p0369: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float32] {
    %642 = reshape(%p0369, newshape=[512, 50, 50]) /* ty=Tensor[(512, 50, 50), float16] */;
    cast(%642, dtype="float32") /* ty=Tensor[(512, 50, 50), float32] */
  } /* ty=fn (Tensor[(512, 50, 50), float16]) -> Tensor[(512, 50, 50), float32] */;
  %1348 = %1347(%1346) /* ty=Tensor[(512, 50, 50), float32] */;
  %1349 = fn (%p0368: Tensor[(512, 50, 50), float32] /* ty=Tensor[(512, 50, 50), float32] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    %641 = nn.softmax(%p0368, axis=2) /* ty=Tensor[(512, 50, 50), float32] */;
    cast(%641, dtype="float16") /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float32]) -> Tensor[(512, 50, 50), float16] */;
  %1352 = fn (%p0565: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 64, 50), float16] {
    %1350 = strided_slice(%p0565, begin=[2048i64], end=[3072i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1351 = reshape(%1350, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1351, axes=[1, 2, 0]) /* ty=Tensor[(512, 64, 50), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 64, 50), float16] */;
  %1353 = %1349(%1348) /* ty=Tensor[(512, 50, 50), float16] */;
  %1354 = %1352(%1338) /* ty=Tensor[(512, 64, 50), float16] */;
  %1355 = fn (%p0367: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, %p1251: Tensor[(512, 64, 50), float16] /* ty=Tensor[(512, 64, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    nn.batch_matmul(%p0367, %p1251, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float16], Tensor[(512, 64, 50), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1356 = %1355(%1353, %1354) /* ty=Tensor[(512, 50, 64), float16] */;
  %1357 = fn (%p0366: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %639 = reshape(%p0366, newshape=[512, 50, 64]) /* ty=Tensor[(512, 50, 64), float16] */;
    %640 = transpose(%639, axes=[1, 0, 2]) /* ty=Tensor[(50, 512, 64), float16] */;
    reshape(%640, newshape=[1600, 1024]) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16]) -> Tensor[(1600, 1024), float16] */;
  %1358 = %1357(%1356) /* ty=Tensor[(1600, 1024), float16] */;
  %1359 = fn (%p0365: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1250: Tensor[(1024, 1024), float16] /* ty=Tensor[(1024, 1024), float16] */, %p285: Tensor[(1, 1024), float16] /* ty=Tensor[(1, 1024), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %638 = nn.dense(%p0365, %p1250, units=1024, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */;
    add(%638, %p285) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024, 1024), float16], Tensor[(1, 1024), float16]) -> Tensor[(1600, 1024), float16] */;
  %1360 = %1359(%1358, meta[relay.Constant][92] /* ty=Tensor[(1024, 1024), float16] span=/encoder/layers/encoder_layer_7/self_attention/Gemm.encoder.layers.encoder_layer_7.self_attention.out_proj.weight:0:0 */, meta[relay.Constant][93] /* ty=Tensor[(1, 1024), float16] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1361 = fn (%p0364: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1249: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %636 = reshape(%p0364, newshape=[50, 32, 1024]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %637 = transpose(%636, axes=[1, 0, 2]) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%637, %p1249) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1362 = %1361(%1360, %1324) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1363 = fn (%p0363: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0363, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1364 = %1363(%1362) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1365 = fn (%p0566: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0566, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1366 = %1365(%1364) /* ty=Tensor[(32, 50, 1), float32] */;
  %1367 = fn (%p0362: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p1248: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0362, %p1248) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %1368 = %1367(%1364, %1366) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1369 = fn (%p0361: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %635 = power(%p0361, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%635, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1370 = %1369(%1368) /* ty=Tensor[(32, 50, 1), float32] */;
  %1371 = fn (%p0360: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p1247: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p284: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p333: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %629 = add(%p0360, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %630 = rsqrt(%629) /* ty=Tensor[(32, 50, 1), float32] */;
    %631 = multiply(%p1247, %630) /* ty=Tensor[(32, 50, 1024), float32] */;
    %632 = multiply(%631, %p284) /* ty=Tensor[(32, 50, 1024), float32] */;
    %633 = add(%632, %p333) /* ty=Tensor[(32, 50, 1024), float32] */;
    %634 = reshape(%633, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%634, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %1372 = %1371(%1370, %1368, meta[relay.Constant][94] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][95] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1373 = fn (%p0359: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1246: Tensor[(4096, 1024), float16] /* ty=Tensor[(4096, 1024), float16] */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    nn.dense(%p0359, %p1246, units=None, out_dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(4096, 1024), float16]) -> Tensor[(1600, 4096), float16] */;
  %1374 = %1373(%1372, meta[relay.Constant][96] /* ty=Tensor[(4096, 1024), float16] span=/encoder/layers/encoder_layer_7/mlp/mlp.0/MatMul:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1375 = fn (%p0358: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p1245: Tensor[(4096), float16] /* ty=Tensor[(4096), float16] */, %p283: float16 /* ty=float16 */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    %619 = reshape(%p0358, newshape=[32, 50, 4096]) /* ty=Tensor[(32, 50, 4096), float16] */;
    %620 = add(%p1245, %619) /* ty=Tensor[(32, 50, 4096), float16] */;
    %621 = divide(%620, %p283) /* ty=Tensor[(32, 50, 4096), float16] */;
    %622 = cast(%621, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %623 = erf(%622) /* ty=Tensor[(32, 50, 4096), float32] */;
    %624 = cast(%620, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %625 = add(%623, 1f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %626 = multiply(%624, %625) /* ty=Tensor[(32, 50, 4096), float32] */;
    %627 = multiply(%626, 0.5f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %628 = reshape(%627, newshape=[-1, 4096]) /* ty=Tensor[(1600, 4096), float32] */;
    cast(%628, dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(4096), float16], float16) -> Tensor[(1600, 4096), float16] */;
  %1376 = %1375(%1374, meta[relay.Constant][97] /* ty=Tensor[(4096), float16] span=/encoder/layers/encoder_layer_7/mlp/mlp.0/Add.encoder.layers.encoder_layer_7.mlp.0.bias:0:0 */, 1.41406f16 /* ty=float16 span=/encoder/layers/encoder_layer_7/mlp/mlp.1/Constant:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1377 = fn (%p0357: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p1244: Tensor[(1024, 4096), float16] /* ty=Tensor[(1024, 4096), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    nn.dense(%p0357, %p1244, units=None, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(1024, 4096), float16]) -> Tensor[(1600, 1024), float16] */;
  %1378 = %1377(%1376, meta[relay.Constant][98] /* ty=Tensor[(1024, 4096), float16] span=/encoder/layers/encoder_layer_7/mlp/mlp.3/MatMul:0:0 */) /* ty=Tensor[(1600, 1024), float16] */;
  %1379 = fn (%p0356: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1243: Tensor[(1024), float16] /* ty=Tensor[(1024), float16] */, %p282: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %617 = reshape(%p0356, newshape=[32, 50, 1024]) /* ty=Tensor[(32, 50, 1024), float16] */;
    %618 = add(%p1243, %617) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%p282, %618) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1380 = %1379(%1378, meta[relay.Constant][99] /* ty=Tensor[(1024), float16] span=/encoder/layers/encoder_layer_7/mlp/mlp.3/Add.encoder.layers.encoder_layer_7.mlp.3.bias:0:0 */, %1362) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1381 = fn (%p0355: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0355, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1382 = %1381(%1380) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1383 = fn (%p0567: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0567, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1384 = %1383(%1382) /* ty=Tensor[(32, 50, 1), float32] */;
  %1385 = fn (%p0354: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p1242: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0354, %p1242) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %1386 = %1385(%1382, %1384) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1387 = fn (%p0353: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %616 = power(%p0353, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%616, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1388 = %1387(%1386) /* ty=Tensor[(32, 50, 1), float32] */;
  %1389 = fn (%p0352: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p1241: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p281: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p332: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %609 = add(%p0352, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %610 = rsqrt(%609) /* ty=Tensor[(32, 50, 1), float32] */;
    %611 = multiply(%p1241, %610) /* ty=Tensor[(32, 50, 1024), float32] */;
    %612 = multiply(%611, %p281) /* ty=Tensor[(32, 50, 1024), float32] */;
    %613 = add(%612, %p332) /* ty=Tensor[(32, 50, 1024), float32] */;
    %614 = transpose(%613, axes=[1, 0, 2]) /* ty=Tensor[(50, 32, 1024), float32] */;
    %615 = reshape(%614, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%615, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %1390 = %1389(%1388, %1386, meta[relay.Constant][100] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][101] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1391 = fn (%p0351: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1240: Tensor[(3072, 1024), float16] /* ty=Tensor[(3072, 1024), float16] */, Primitive=1) -> Tensor[(1600, 3072), float16] {
    nn.dense(%p0351, %p1240, units=None, out_dtype="float16") /* ty=Tensor[(1600, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(3072, 1024), float16]) -> Tensor[(1600, 3072), float16] */;
  %1392 = %1391(%1390, meta[relay.Constant][102] /* ty=Tensor[(3072, 1024), float16] span=/encoder/layers/encoder_layer_8/self_attention/MatMul:0:0 */) /* ty=Tensor[(1600, 3072), float16] */;
  %1393 = fn (%p0350: Tensor[(1600, 3072), float16] /* ty=Tensor[(1600, 3072), float16] */, %p1239: Tensor[(3072), float16] /* ty=Tensor[(3072), float16] */, Primitive=1) -> Tensor[(50, 32, 3072), float16] {
    %608 = reshape(%p0350, newshape=[50, 32, 3072]) /* ty=Tensor[(50, 32, 3072), float16] */;
    add(%p1239, %608) /* ty=Tensor[(50, 32, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 3072), float16], Tensor[(3072), float16]) -> Tensor[(50, 32, 3072), float16] */;
  %1394 = %1393(%1392, meta[relay.Constant][103] /* ty=Tensor[(3072), float16] span=Identity_95:0:0 */) /* ty=Tensor[(50, 32, 3072), float16] */;
  %1395 = fn (%p0349: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, %p1238: float16 /* ty=float16 */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %605 = strided_slice(%p0349, begin=[0i64], end=[1024i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %606 = reshape(%605, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    %607 = transpose(%606, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */;
    divide(%607, %p1238) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16], float16) -> Tensor[(512, 50, 64), float16] */;
  %1398 = fn (%p0568: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %1396 = strided_slice(%p0568, begin=[1024i64], end=[2048i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1397 = reshape(%1396, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1397, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1399 = %1395(%1394, 8f16 /* ty=float16 span=/encoder/layers/encoder_layer_8/self_attention/Constant_14:0:0 */) /* ty=Tensor[(512, 50, 64), float16] */;
  %1400 = %1398(%1394) /* ty=Tensor[(512, 50, 64), float16] */;
  %1401 = fn (%p0348: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, %p1237: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    nn.batch_matmul(%p0348, %p1237, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16], Tensor[(512, 50, 64), float16]) -> Tensor[(512, 50, 50), float16] */;
  %1402 = %1401(%1399, %1400) /* ty=Tensor[(512, 50, 50), float16] */;
  %1403 = fn (%p0347: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float32] {
    %604 = reshape(%p0347, newshape=[512, 50, 50]) /* ty=Tensor[(512, 50, 50), float16] */;
    cast(%604, dtype="float32") /* ty=Tensor[(512, 50, 50), float32] */
  } /* ty=fn (Tensor[(512, 50, 50), float16]) -> Tensor[(512, 50, 50), float32] */;
  %1404 = %1403(%1402) /* ty=Tensor[(512, 50, 50), float32] */;
  %1405 = fn (%p0346: Tensor[(512, 50, 50), float32] /* ty=Tensor[(512, 50, 50), float32] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    %603 = nn.softmax(%p0346, axis=2) /* ty=Tensor[(512, 50, 50), float32] */;
    cast(%603, dtype="float16") /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float32]) -> Tensor[(512, 50, 50), float16] */;
  %1408 = fn (%p0569: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 64, 50), float16] {
    %1406 = strided_slice(%p0569, begin=[2048i64], end=[3072i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1407 = reshape(%1406, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1407, axes=[1, 2, 0]) /* ty=Tensor[(512, 64, 50), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 64, 50), float16] */;
  %1409 = %1405(%1404) /* ty=Tensor[(512, 50, 50), float16] */;
  %1410 = %1408(%1394) /* ty=Tensor[(512, 64, 50), float16] */;
  %1411 = fn (%p0345: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, %p1236: Tensor[(512, 64, 50), float16] /* ty=Tensor[(512, 64, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    nn.batch_matmul(%p0345, %p1236, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float16], Tensor[(512, 64, 50), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1412 = %1411(%1409, %1410) /* ty=Tensor[(512, 50, 64), float16] */;
  %1413 = fn (%p0344: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %601 = reshape(%p0344, newshape=[512, 50, 64]) /* ty=Tensor[(512, 50, 64), float16] */;
    %602 = transpose(%601, axes=[1, 0, 2]) /* ty=Tensor[(50, 512, 64), float16] */;
    reshape(%602, newshape=[1600, 1024]) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16]) -> Tensor[(1600, 1024), float16] */;
  %1414 = %1413(%1412) /* ty=Tensor[(1600, 1024), float16] */;
  %1415 = fn (%p0343: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1235: Tensor[(1024, 1024), float16] /* ty=Tensor[(1024, 1024), float16] */, %p280: Tensor[(1, 1024), float16] /* ty=Tensor[(1, 1024), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %600 = nn.dense(%p0343, %p1235, units=1024, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */;
    add(%600, %p280) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024, 1024), float16], Tensor[(1, 1024), float16]) -> Tensor[(1600, 1024), float16] */;
  %1416 = %1415(%1414, meta[relay.Constant][104] /* ty=Tensor[(1024, 1024), float16] span=/encoder/layers/encoder_layer_8/self_attention/Gemm.encoder.layers.encoder_layer_8.self_attention.out_proj.weight:0:0 */, meta[relay.Constant][105] /* ty=Tensor[(1, 1024), float16] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1417 = fn (%p0342: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1234: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %598 = reshape(%p0342, newshape=[50, 32, 1024]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %599 = transpose(%598, axes=[1, 0, 2]) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%599, %p1234) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1418 = %1417(%1416, %1380) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1419 = fn (%p0341: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0341, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1420 = %1419(%1418) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1421 = fn (%p0570: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0570, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1422 = %1421(%1420) /* ty=Tensor[(32, 50, 1), float32] */;
  %1423 = fn (%p0340: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p1233: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0340, %p1233) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %1424 = %1423(%1420, %1422) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1425 = fn (%p0339: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %597 = power(%p0339, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%597, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1426 = %1425(%1424) /* ty=Tensor[(32, 50, 1), float32] */;
  %1427 = fn (%p0338: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p1232: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p279: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p331: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %591 = add(%p0338, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %592 = rsqrt(%591) /* ty=Tensor[(32, 50, 1), float32] */;
    %593 = multiply(%p1232, %592) /* ty=Tensor[(32, 50, 1024), float32] */;
    %594 = multiply(%593, %p279) /* ty=Tensor[(32, 50, 1024), float32] */;
    %595 = add(%594, %p331) /* ty=Tensor[(32, 50, 1024), float32] */;
    %596 = reshape(%595, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%596, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %1428 = %1427(%1426, %1424, meta[relay.Constant][106] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][107] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1429 = fn (%p0337: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1231: Tensor[(4096, 1024), float16] /* ty=Tensor[(4096, 1024), float16] */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    nn.dense(%p0337, %p1231, units=None, out_dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(4096, 1024), float16]) -> Tensor[(1600, 4096), float16] */;
  %1430 = %1429(%1428, meta[relay.Constant][108] /* ty=Tensor[(4096, 1024), float16] span=/encoder/layers/encoder_layer_8/mlp/mlp.0/MatMul:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1431 = fn (%p0336: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p1230: Tensor[(4096), float16] /* ty=Tensor[(4096), float16] */, %p278: float16 /* ty=float16 */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    %581 = reshape(%p0336, newshape=[32, 50, 4096]) /* ty=Tensor[(32, 50, 4096), float16] */;
    %582 = add(%p1230, %581) /* ty=Tensor[(32, 50, 4096), float16] */;
    %583 = divide(%582, %p278) /* ty=Tensor[(32, 50, 4096), float16] */;
    %584 = cast(%583, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %585 = erf(%584) /* ty=Tensor[(32, 50, 4096), float32] */;
    %586 = cast(%582, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %587 = add(%585, 1f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %588 = multiply(%586, %587) /* ty=Tensor[(32, 50, 4096), float32] */;
    %589 = multiply(%588, 0.5f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %590 = reshape(%589, newshape=[-1, 4096]) /* ty=Tensor[(1600, 4096), float32] */;
    cast(%590, dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(4096), float16], float16) -> Tensor[(1600, 4096), float16] */;
  %1432 = %1431(%1430, meta[relay.Constant][109] /* ty=Tensor[(4096), float16] span=/encoder/layers/encoder_layer_8/mlp/mlp.0/Add.encoder.layers.encoder_layer_8.mlp.0.bias:0:0 */, 1.41406f16 /* ty=float16 span=/encoder/layers/encoder_layer_8/mlp/mlp.1/Constant:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1433 = fn (%p0335: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p1229: Tensor[(1024, 4096), float16] /* ty=Tensor[(1024, 4096), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    nn.dense(%p0335, %p1229, units=None, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(1024, 4096), float16]) -> Tensor[(1600, 1024), float16] */;
  %1434 = %1433(%1432, meta[relay.Constant][110] /* ty=Tensor[(1024, 4096), float16] span=/encoder/layers/encoder_layer_8/mlp/mlp.3/MatMul:0:0 */) /* ty=Tensor[(1600, 1024), float16] */;
  %1435 = fn (%p0334: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1228: Tensor[(1024), float16] /* ty=Tensor[(1024), float16] */, %p277: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %579 = reshape(%p0334, newshape=[32, 50, 1024]) /* ty=Tensor[(32, 50, 1024), float16] */;
    %580 = add(%p1228, %579) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%p277, %580) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1436 = %1435(%1434, meta[relay.Constant][111] /* ty=Tensor[(1024), float16] span=/encoder/layers/encoder_layer_8/mlp/mlp.3/Add.encoder.layers.encoder_layer_8.mlp.3.bias:0:0 */, %1418) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1437 = fn (%p0333: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0333, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1438 = %1437(%1436) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1439 = fn (%p0571: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0571, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1440 = %1439(%1438) /* ty=Tensor[(32, 50, 1), float32] */;
  %1441 = fn (%p0332: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p1227: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0332, %p1227) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %1442 = %1441(%1438, %1440) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1443 = fn (%p0331: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %578 = power(%p0331, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%578, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1444 = %1443(%1442) /* ty=Tensor[(32, 50, 1), float32] */;
  %1445 = fn (%p0330: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p1226: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p276: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p330: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %571 = add(%p0330, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %572 = rsqrt(%571) /* ty=Tensor[(32, 50, 1), float32] */;
    %573 = multiply(%p1226, %572) /* ty=Tensor[(32, 50, 1024), float32] */;
    %574 = multiply(%573, %p276) /* ty=Tensor[(32, 50, 1024), float32] */;
    %575 = add(%574, %p330) /* ty=Tensor[(32, 50, 1024), float32] */;
    %576 = transpose(%575, axes=[1, 0, 2]) /* ty=Tensor[(50, 32, 1024), float32] */;
    %577 = reshape(%576, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%577, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %1446 = %1445(%1444, %1442, meta[relay.Constant][112] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][113] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1447 = fn (%p0329: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1225: Tensor[(3072, 1024), float16] /* ty=Tensor[(3072, 1024), float16] */, Primitive=1) -> Tensor[(1600, 3072), float16] {
    nn.dense(%p0329, %p1225, units=None, out_dtype="float16") /* ty=Tensor[(1600, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(3072, 1024), float16]) -> Tensor[(1600, 3072), float16] */;
  %1448 = %1447(%1446, meta[relay.Constant][114] /* ty=Tensor[(3072, 1024), float16] span=/encoder/layers/encoder_layer_9/self_attention/MatMul:0:0 */) /* ty=Tensor[(1600, 3072), float16] */;
  %1449 = fn (%p0328: Tensor[(1600, 3072), float16] /* ty=Tensor[(1600, 3072), float16] */, %p1224: Tensor[(3072), float16] /* ty=Tensor[(3072), float16] */, Primitive=1) -> Tensor[(50, 32, 3072), float16] {
    %570 = reshape(%p0328, newshape=[50, 32, 3072]) /* ty=Tensor[(50, 32, 3072), float16] */;
    add(%p1224, %570) /* ty=Tensor[(50, 32, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 3072), float16], Tensor[(3072), float16]) -> Tensor[(50, 32, 3072), float16] */;
  %1450 = %1449(%1448, meta[relay.Constant][115] /* ty=Tensor[(3072), float16] span=Identity_89:0:0 */) /* ty=Tensor[(50, 32, 3072), float16] */;
  %1451 = fn (%p0327: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, %p1223: float16 /* ty=float16 */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %567 = strided_slice(%p0327, begin=[0i64], end=[1024i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %568 = reshape(%567, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    %569 = transpose(%568, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */;
    divide(%569, %p1223) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16], float16) -> Tensor[(512, 50, 64), float16] */;
  %1454 = fn (%p0572: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %1452 = strided_slice(%p0572, begin=[1024i64], end=[2048i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1453 = reshape(%1452, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1453, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1455 = %1451(%1450, 8f16 /* ty=float16 span=/encoder/layers/encoder_layer_9/self_attention/Constant_14:0:0 */) /* ty=Tensor[(512, 50, 64), float16] */;
  %1456 = %1454(%1450) /* ty=Tensor[(512, 50, 64), float16] */;
  %1457 = fn (%p0326: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, %p1222: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    nn.batch_matmul(%p0326, %p1222, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16], Tensor[(512, 50, 64), float16]) -> Tensor[(512, 50, 50), float16] */;
  %1458 = %1457(%1455, %1456) /* ty=Tensor[(512, 50, 50), float16] */;
  %1459 = fn (%p0325: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float32] {
    %566 = reshape(%p0325, newshape=[512, 50, 50]) /* ty=Tensor[(512, 50, 50), float16] */;
    cast(%566, dtype="float32") /* ty=Tensor[(512, 50, 50), float32] */
  } /* ty=fn (Tensor[(512, 50, 50), float16]) -> Tensor[(512, 50, 50), float32] */;
  %1460 = %1459(%1458) /* ty=Tensor[(512, 50, 50), float32] */;
  %1461 = fn (%p0324: Tensor[(512, 50, 50), float32] /* ty=Tensor[(512, 50, 50), float32] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    %565 = nn.softmax(%p0324, axis=2) /* ty=Tensor[(512, 50, 50), float32] */;
    cast(%565, dtype="float16") /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float32]) -> Tensor[(512, 50, 50), float16] */;
  %1464 = fn (%p0573: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 64, 50), float16] {
    %1462 = strided_slice(%p0573, begin=[2048i64], end=[3072i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1463 = reshape(%1462, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1463, axes=[1, 2, 0]) /* ty=Tensor[(512, 64, 50), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 64, 50), float16] */;
  %1465 = %1461(%1460) /* ty=Tensor[(512, 50, 50), float16] */;
  %1466 = %1464(%1450) /* ty=Tensor[(512, 64, 50), float16] */;
  %1467 = fn (%p0323: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, %p1221: Tensor[(512, 64, 50), float16] /* ty=Tensor[(512, 64, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    nn.batch_matmul(%p0323, %p1221, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float16], Tensor[(512, 64, 50), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1468 = %1467(%1465, %1466) /* ty=Tensor[(512, 50, 64), float16] */;
  %1469 = fn (%p0322: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %563 = reshape(%p0322, newshape=[512, 50, 64]) /* ty=Tensor[(512, 50, 64), float16] */;
    %564 = transpose(%563, axes=[1, 0, 2]) /* ty=Tensor[(50, 512, 64), float16] */;
    reshape(%564, newshape=[1600, 1024]) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16]) -> Tensor[(1600, 1024), float16] */;
  %1470 = %1469(%1468) /* ty=Tensor[(1600, 1024), float16] */;
  %1471 = fn (%p0321: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1220: Tensor[(1024, 1024), float16] /* ty=Tensor[(1024, 1024), float16] */, %p275: Tensor[(1, 1024), float16] /* ty=Tensor[(1, 1024), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %562 = nn.dense(%p0321, %p1220, units=1024, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */;
    add(%562, %p275) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024, 1024), float16], Tensor[(1, 1024), float16]) -> Tensor[(1600, 1024), float16] */;
  %1472 = %1471(%1470, meta[relay.Constant][116] /* ty=Tensor[(1024, 1024), float16] span=/encoder/layers/encoder_layer_9/self_attention/Gemm.encoder.layers.encoder_layer_9.self_attention.out_proj.weight:0:0 */, meta[relay.Constant][117] /* ty=Tensor[(1, 1024), float16] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1473 = fn (%p0320: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1219: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %560 = reshape(%p0320, newshape=[50, 32, 1024]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %561 = transpose(%560, axes=[1, 0, 2]) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%561, %p1219) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1474 = %1473(%1472, %1436) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1475 = fn (%p0319: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0319, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1476 = %1475(%1474) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1477 = fn (%p0574: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0574, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1478 = %1477(%1476) /* ty=Tensor[(32, 50, 1), float32] */;
  %1479 = fn (%p0318: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p1218: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0318, %p1218) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %1480 = %1479(%1476, %1478) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1481 = fn (%p0317: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %559 = power(%p0317, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%559, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1482 = %1481(%1480) /* ty=Tensor[(32, 50, 1), float32] */;
  %1483 = fn (%p0316: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p1217: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p274: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p329: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %553 = add(%p0316, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %554 = rsqrt(%553) /* ty=Tensor[(32, 50, 1), float32] */;
    %555 = multiply(%p1217, %554) /* ty=Tensor[(32, 50, 1024), float32] */;
    %556 = multiply(%555, %p274) /* ty=Tensor[(32, 50, 1024), float32] */;
    %557 = add(%556, %p329) /* ty=Tensor[(32, 50, 1024), float32] */;
    %558 = reshape(%557, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%558, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %1484 = %1483(%1482, %1480, meta[relay.Constant][118] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][119] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1485 = fn (%p0315: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1216: Tensor[(4096, 1024), float16] /* ty=Tensor[(4096, 1024), float16] */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    nn.dense(%p0315, %p1216, units=None, out_dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(4096, 1024), float16]) -> Tensor[(1600, 4096), float16] */;
  %1486 = %1485(%1484, meta[relay.Constant][120] /* ty=Tensor[(4096, 1024), float16] span=/encoder/layers/encoder_layer_9/mlp/mlp.0/MatMul:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1487 = fn (%p0314: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p1215: Tensor[(4096), float16] /* ty=Tensor[(4096), float16] */, %p273: float16 /* ty=float16 */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    %543 = reshape(%p0314, newshape=[32, 50, 4096]) /* ty=Tensor[(32, 50, 4096), float16] */;
    %544 = add(%p1215, %543) /* ty=Tensor[(32, 50, 4096), float16] */;
    %545 = divide(%544, %p273) /* ty=Tensor[(32, 50, 4096), float16] */;
    %546 = cast(%545, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %547 = erf(%546) /* ty=Tensor[(32, 50, 4096), float32] */;
    %548 = cast(%544, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %549 = add(%547, 1f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %550 = multiply(%548, %549) /* ty=Tensor[(32, 50, 4096), float32] */;
    %551 = multiply(%550, 0.5f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %552 = reshape(%551, newshape=[-1, 4096]) /* ty=Tensor[(1600, 4096), float32] */;
    cast(%552, dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(4096), float16], float16) -> Tensor[(1600, 4096), float16] */;
  %1488 = %1487(%1486, meta[relay.Constant][121] /* ty=Tensor[(4096), float16] span=/encoder/layers/encoder_layer_9/mlp/mlp.0/Add.encoder.layers.encoder_layer_9.mlp.0.bias:0:0 */, 1.41406f16 /* ty=float16 span=/encoder/layers/encoder_layer_9/mlp/mlp.1/Constant:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1489 = fn (%p0313: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p1214: Tensor[(1024, 4096), float16] /* ty=Tensor[(1024, 4096), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    nn.dense(%p0313, %p1214, units=None, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(1024, 4096), float16]) -> Tensor[(1600, 1024), float16] */;
  %1490 = %1489(%1488, meta[relay.Constant][122] /* ty=Tensor[(1024, 4096), float16] span=/encoder/layers/encoder_layer_9/mlp/mlp.3/MatMul:0:0 */) /* ty=Tensor[(1600, 1024), float16] */;
  %1491 = fn (%p0312: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1213: Tensor[(1024), float16] /* ty=Tensor[(1024), float16] */, %p272: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %541 = reshape(%p0312, newshape=[32, 50, 1024]) /* ty=Tensor[(32, 50, 1024), float16] */;
    %542 = add(%p1213, %541) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%p272, %542) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1492 = %1491(%1490, meta[relay.Constant][123] /* ty=Tensor[(1024), float16] span=/encoder/layers/encoder_layer_9/mlp/mlp.3/Add.encoder.layers.encoder_layer_9.mlp.3.bias:0:0 */, %1474) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1493 = fn (%p0311: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0311, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1494 = %1493(%1492) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1495 = fn (%p0575: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0575, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1496 = %1495(%1494) /* ty=Tensor[(32, 50, 1), float32] */;
  %1497 = fn (%p0310: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p1212: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0310, %p1212) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %1498 = %1497(%1494, %1496) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1499 = fn (%p0309: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %540 = power(%p0309, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%540, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1500 = %1499(%1498) /* ty=Tensor[(32, 50, 1), float32] */;
  %1501 = fn (%p0308: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p1211: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p271: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p328: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %533 = add(%p0308, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %534 = rsqrt(%533) /* ty=Tensor[(32, 50, 1), float32] */;
    %535 = multiply(%p1211, %534) /* ty=Tensor[(32, 50, 1024), float32] */;
    %536 = multiply(%535, %p271) /* ty=Tensor[(32, 50, 1024), float32] */;
    %537 = add(%536, %p328) /* ty=Tensor[(32, 50, 1024), float32] */;
    %538 = transpose(%537, axes=[1, 0, 2]) /* ty=Tensor[(50, 32, 1024), float32] */;
    %539 = reshape(%538, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%539, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %1502 = %1501(%1500, %1498, meta[relay.Constant][124] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][125] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1503 = fn (%p0307: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1210: Tensor[(3072, 1024), float16] /* ty=Tensor[(3072, 1024), float16] */, Primitive=1) -> Tensor[(1600, 3072), float16] {
    nn.dense(%p0307, %p1210, units=None, out_dtype="float16") /* ty=Tensor[(1600, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(3072, 1024), float16]) -> Tensor[(1600, 3072), float16] */;
  %1504 = %1503(%1502, meta[relay.Constant][126] /* ty=Tensor[(3072, 1024), float16] span=/encoder/layers/encoder_layer_10/self_attention/MatMul:0:0 */) /* ty=Tensor[(1600, 3072), float16] */;
  %1505 = fn (%p0306: Tensor[(1600, 3072), float16] /* ty=Tensor[(1600, 3072), float16] */, %p1209: Tensor[(3072), float16] /* ty=Tensor[(3072), float16] */, Primitive=1) -> Tensor[(50, 32, 3072), float16] {
    %532 = reshape(%p0306, newshape=[50, 32, 3072]) /* ty=Tensor[(50, 32, 3072), float16] */;
    add(%p1209, %532) /* ty=Tensor[(50, 32, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 3072), float16], Tensor[(3072), float16]) -> Tensor[(50, 32, 3072), float16] */;
  %1506 = %1505(%1504, meta[relay.Constant][127] /* ty=Tensor[(3072), float16] span=Identity_83:0:0 */) /* ty=Tensor[(50, 32, 3072), float16] */;
  %1507 = fn (%p0305: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, %p1208: float16 /* ty=float16 */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %529 = strided_slice(%p0305, begin=[0i64], end=[1024i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %530 = reshape(%529, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    %531 = transpose(%530, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */;
    divide(%531, %p1208) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16], float16) -> Tensor[(512, 50, 64), float16] */;
  %1510 = fn (%p0576: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %1508 = strided_slice(%p0576, begin=[1024i64], end=[2048i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1509 = reshape(%1508, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1509, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1511 = %1507(%1506, 8f16 /* ty=float16 span=/encoder/layers/encoder_layer_10/self_attention/Constant_14:0:0 */) /* ty=Tensor[(512, 50, 64), float16] */;
  %1512 = %1510(%1506) /* ty=Tensor[(512, 50, 64), float16] */;
  %1513 = fn (%p0304: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, %p1207: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    nn.batch_matmul(%p0304, %p1207, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16], Tensor[(512, 50, 64), float16]) -> Tensor[(512, 50, 50), float16] */;
  %1514 = %1513(%1511, %1512) /* ty=Tensor[(512, 50, 50), float16] */;
  %1515 = fn (%p0303: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float32] {
    %528 = reshape(%p0303, newshape=[512, 50, 50]) /* ty=Tensor[(512, 50, 50), float16] */;
    cast(%528, dtype="float32") /* ty=Tensor[(512, 50, 50), float32] */
  } /* ty=fn (Tensor[(512, 50, 50), float16]) -> Tensor[(512, 50, 50), float32] */;
  %1516 = %1515(%1514) /* ty=Tensor[(512, 50, 50), float32] */;
  %1517 = fn (%p0302: Tensor[(512, 50, 50), float32] /* ty=Tensor[(512, 50, 50), float32] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    %527 = nn.softmax(%p0302, axis=2) /* ty=Tensor[(512, 50, 50), float32] */;
    cast(%527, dtype="float16") /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float32]) -> Tensor[(512, 50, 50), float16] */;
  %1520 = fn (%p0577: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 64, 50), float16] {
    %1518 = strided_slice(%p0577, begin=[2048i64], end=[3072i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1519 = reshape(%1518, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1519, axes=[1, 2, 0]) /* ty=Tensor[(512, 64, 50), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 64, 50), float16] */;
  %1521 = %1517(%1516) /* ty=Tensor[(512, 50, 50), float16] */;
  %1522 = %1520(%1506) /* ty=Tensor[(512, 64, 50), float16] */;
  %1523 = fn (%p0301: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, %p1206: Tensor[(512, 64, 50), float16] /* ty=Tensor[(512, 64, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    nn.batch_matmul(%p0301, %p1206, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float16], Tensor[(512, 64, 50), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1524 = %1523(%1521, %1522) /* ty=Tensor[(512, 50, 64), float16] */;
  %1525 = fn (%p0300: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %525 = reshape(%p0300, newshape=[512, 50, 64]) /* ty=Tensor[(512, 50, 64), float16] */;
    %526 = transpose(%525, axes=[1, 0, 2]) /* ty=Tensor[(50, 512, 64), float16] */;
    reshape(%526, newshape=[1600, 1024]) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16]) -> Tensor[(1600, 1024), float16] */;
  %1526 = %1525(%1524) /* ty=Tensor[(1600, 1024), float16] */;
  %1527 = fn (%p0299: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1205: Tensor[(1024, 1024), float16] /* ty=Tensor[(1024, 1024), float16] */, %p270: Tensor[(1, 1024), float16] /* ty=Tensor[(1, 1024), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %524 = nn.dense(%p0299, %p1205, units=1024, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */;
    add(%524, %p270) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024, 1024), float16], Tensor[(1, 1024), float16]) -> Tensor[(1600, 1024), float16] */;
  %1528 = %1527(%1526, meta[relay.Constant][128] /* ty=Tensor[(1024, 1024), float16] span=/encoder/layers/encoder_layer_10/self_attention/Gemm.encoder.layers.encoder_layer_10.self_attention.out_proj.weight:0:0 */, meta[relay.Constant][129] /* ty=Tensor[(1, 1024), float16] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1529 = fn (%p0298: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1204: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %522 = reshape(%p0298, newshape=[50, 32, 1024]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %523 = transpose(%522, axes=[1, 0, 2]) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%523, %p1204) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1530 = %1529(%1528, %1492) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1531 = fn (%p0297: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0297, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1532 = %1531(%1530) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1533 = fn (%p0578: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0578, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1534 = %1533(%1532) /* ty=Tensor[(32, 50, 1), float32] */;
  %1535 = fn (%p0296: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p1203: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0296, %p1203) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %1536 = %1535(%1532, %1534) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1537 = fn (%p0295: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %521 = power(%p0295, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%521, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1538 = %1537(%1536) /* ty=Tensor[(32, 50, 1), float32] */;
  %1539 = fn (%p0294: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p1202: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p269: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p327: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %515 = add(%p0294, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %516 = rsqrt(%515) /* ty=Tensor[(32, 50, 1), float32] */;
    %517 = multiply(%p1202, %516) /* ty=Tensor[(32, 50, 1024), float32] */;
    %518 = multiply(%517, %p269) /* ty=Tensor[(32, 50, 1024), float32] */;
    %519 = add(%518, %p327) /* ty=Tensor[(32, 50, 1024), float32] */;
    %520 = reshape(%519, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%520, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %1540 = %1539(%1538, %1536, meta[relay.Constant][130] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][131] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1541 = fn (%p0293: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1201: Tensor[(4096, 1024), float16] /* ty=Tensor[(4096, 1024), float16] */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    nn.dense(%p0293, %p1201, units=None, out_dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(4096, 1024), float16]) -> Tensor[(1600, 4096), float16] */;
  %1542 = %1541(%1540, meta[relay.Constant][132] /* ty=Tensor[(4096, 1024), float16] span=/encoder/layers/encoder_layer_10/mlp/mlp.0/MatMul:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1543 = fn (%p0292: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p1200: Tensor[(4096), float16] /* ty=Tensor[(4096), float16] */, %p268: float16 /* ty=float16 */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    %505 = reshape(%p0292, newshape=[32, 50, 4096]) /* ty=Tensor[(32, 50, 4096), float16] */;
    %506 = add(%p1200, %505) /* ty=Tensor[(32, 50, 4096), float16] */;
    %507 = divide(%506, %p268) /* ty=Tensor[(32, 50, 4096), float16] */;
    %508 = cast(%507, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %509 = erf(%508) /* ty=Tensor[(32, 50, 4096), float32] */;
    %510 = cast(%506, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %511 = add(%509, 1f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %512 = multiply(%510, %511) /* ty=Tensor[(32, 50, 4096), float32] */;
    %513 = multiply(%512, 0.5f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %514 = reshape(%513, newshape=[-1, 4096]) /* ty=Tensor[(1600, 4096), float32] */;
    cast(%514, dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(4096), float16], float16) -> Tensor[(1600, 4096), float16] */;
  %1544 = %1543(%1542, meta[relay.Constant][133] /* ty=Tensor[(4096), float16] span=/encoder/layers/encoder_layer_10/mlp/mlp.0/Add.encoder.layers.encoder_layer_10.mlp.0.bias:0:0 */, 1.41406f16 /* ty=float16 span=/encoder/layers/encoder_layer_10/mlp/mlp.1/Constant:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1545 = fn (%p0291: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p1199: Tensor[(1024, 4096), float16] /* ty=Tensor[(1024, 4096), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    nn.dense(%p0291, %p1199, units=None, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(1024, 4096), float16]) -> Tensor[(1600, 1024), float16] */;
  %1546 = %1545(%1544, meta[relay.Constant][134] /* ty=Tensor[(1024, 4096), float16] span=/encoder/layers/encoder_layer_10/mlp/mlp.3/MatMul:0:0 */) /* ty=Tensor[(1600, 1024), float16] */;
  %1547 = fn (%p0290: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1198: Tensor[(1024), float16] /* ty=Tensor[(1024), float16] */, %p267: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %503 = reshape(%p0290, newshape=[32, 50, 1024]) /* ty=Tensor[(32, 50, 1024), float16] */;
    %504 = add(%p1198, %503) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%p267, %504) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1548 = %1547(%1546, meta[relay.Constant][135] /* ty=Tensor[(1024), float16] span=/encoder/layers/encoder_layer_10/mlp/mlp.3/Add.encoder.layers.encoder_layer_10.mlp.3.bias:0:0 */, %1530) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1549 = fn (%p0289: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0289, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1550 = %1549(%1548) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1551 = fn (%p0579: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0579, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1552 = %1551(%1550) /* ty=Tensor[(32, 50, 1), float32] */;
  %1553 = fn (%p0288: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p1197: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0288, %p1197) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %1554 = %1553(%1550, %1552) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1555 = fn (%p0287: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %502 = power(%p0287, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%502, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1556 = %1555(%1554) /* ty=Tensor[(32, 50, 1), float32] */;
  %1557 = fn (%p0286: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p1196: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p266: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p326: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %495 = add(%p0286, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %496 = rsqrt(%495) /* ty=Tensor[(32, 50, 1), float32] */;
    %497 = multiply(%p1196, %496) /* ty=Tensor[(32, 50, 1024), float32] */;
    %498 = multiply(%497, %p266) /* ty=Tensor[(32, 50, 1024), float32] */;
    %499 = add(%498, %p326) /* ty=Tensor[(32, 50, 1024), float32] */;
    %500 = transpose(%499, axes=[1, 0, 2]) /* ty=Tensor[(50, 32, 1024), float32] */;
    %501 = reshape(%500, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%501, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %1558 = %1557(%1556, %1554, meta[relay.Constant][136] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][137] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1559 = fn (%p0285: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1195: Tensor[(3072, 1024), float16] /* ty=Tensor[(3072, 1024), float16] */, Primitive=1) -> Tensor[(1600, 3072), float16] {
    nn.dense(%p0285, %p1195, units=None, out_dtype="float16") /* ty=Tensor[(1600, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(3072, 1024), float16]) -> Tensor[(1600, 3072), float16] */;
  %1560 = %1559(%1558, meta[relay.Constant][138] /* ty=Tensor[(3072, 1024), float16] span=/encoder/layers/encoder_layer_11/self_attention/MatMul:0:0 */) /* ty=Tensor[(1600, 3072), float16] */;
  %1561 = fn (%p0284: Tensor[(1600, 3072), float16] /* ty=Tensor[(1600, 3072), float16] */, %p1194: Tensor[(3072), float16] /* ty=Tensor[(3072), float16] */, Primitive=1) -> Tensor[(50, 32, 3072), float16] {
    %494 = reshape(%p0284, newshape=[50, 32, 3072]) /* ty=Tensor[(50, 32, 3072), float16] */;
    add(%p1194, %494) /* ty=Tensor[(50, 32, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 3072), float16], Tensor[(3072), float16]) -> Tensor[(50, 32, 3072), float16] */;
  %1562 = %1561(%1560, meta[relay.Constant][139] /* ty=Tensor[(3072), float16] span=Identity_77:0:0 */) /* ty=Tensor[(50, 32, 3072), float16] */;
  %1563 = fn (%p0283: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, %p1193: float16 /* ty=float16 */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %491 = strided_slice(%p0283, begin=[0i64], end=[1024i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %492 = reshape(%491, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    %493 = transpose(%492, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */;
    divide(%493, %p1193) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16], float16) -> Tensor[(512, 50, 64), float16] */;
  %1566 = fn (%p0580: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %1564 = strided_slice(%p0580, begin=[1024i64], end=[2048i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1565 = reshape(%1564, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1565, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1567 = %1563(%1562, 8f16 /* ty=float16 span=/encoder/layers/encoder_layer_11/self_attention/Constant_14:0:0 */) /* ty=Tensor[(512, 50, 64), float16] */;
  %1568 = %1566(%1562) /* ty=Tensor[(512, 50, 64), float16] */;
  %1569 = fn (%p0282: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, %p1192: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    nn.batch_matmul(%p0282, %p1192, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16], Tensor[(512, 50, 64), float16]) -> Tensor[(512, 50, 50), float16] */;
  %1570 = %1569(%1567, %1568) /* ty=Tensor[(512, 50, 50), float16] */;
  %1571 = fn (%p0281: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float32] {
    %490 = reshape(%p0281, newshape=[512, 50, 50]) /* ty=Tensor[(512, 50, 50), float16] */;
    cast(%490, dtype="float32") /* ty=Tensor[(512, 50, 50), float32] */
  } /* ty=fn (Tensor[(512, 50, 50), float16]) -> Tensor[(512, 50, 50), float32] */;
  %1572 = %1571(%1570) /* ty=Tensor[(512, 50, 50), float32] */;
  %1573 = fn (%p0280: Tensor[(512, 50, 50), float32] /* ty=Tensor[(512, 50, 50), float32] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    %489 = nn.softmax(%p0280, axis=2) /* ty=Tensor[(512, 50, 50), float32] */;
    cast(%489, dtype="float16") /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float32]) -> Tensor[(512, 50, 50), float16] */;
  %1576 = fn (%p0581: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 64, 50), float16] {
    %1574 = strided_slice(%p0581, begin=[2048i64], end=[3072i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1575 = reshape(%1574, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1575, axes=[1, 2, 0]) /* ty=Tensor[(512, 64, 50), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 64, 50), float16] */;
  %1577 = %1573(%1572) /* ty=Tensor[(512, 50, 50), float16] */;
  %1578 = %1576(%1562) /* ty=Tensor[(512, 64, 50), float16] */;
  %1579 = fn (%p0279: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, %p1191: Tensor[(512, 64, 50), float16] /* ty=Tensor[(512, 64, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    nn.batch_matmul(%p0279, %p1191, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float16], Tensor[(512, 64, 50), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1580 = %1579(%1577, %1578) /* ty=Tensor[(512, 50, 64), float16] */;
  %1581 = fn (%p0278: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %487 = reshape(%p0278, newshape=[512, 50, 64]) /* ty=Tensor[(512, 50, 64), float16] */;
    %488 = transpose(%487, axes=[1, 0, 2]) /* ty=Tensor[(50, 512, 64), float16] */;
    reshape(%488, newshape=[1600, 1024]) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16]) -> Tensor[(1600, 1024), float16] */;
  %1582 = %1581(%1580) /* ty=Tensor[(1600, 1024), float16] */;
  %1583 = fn (%p0277: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1190: Tensor[(1024, 1024), float16] /* ty=Tensor[(1024, 1024), float16] */, %p265: Tensor[(1, 1024), float16] /* ty=Tensor[(1, 1024), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %486 = nn.dense(%p0277, %p1190, units=1024, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */;
    add(%486, %p265) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024, 1024), float16], Tensor[(1, 1024), float16]) -> Tensor[(1600, 1024), float16] */;
  %1584 = %1583(%1582, meta[relay.Constant][140] /* ty=Tensor[(1024, 1024), float16] span=/encoder/layers/encoder_layer_11/self_attention/Gemm.encoder.layers.encoder_layer_11.self_attention.out_proj.weight:0:0 */, meta[relay.Constant][141] /* ty=Tensor[(1, 1024), float16] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1585 = fn (%p0276: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1189: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %484 = reshape(%p0276, newshape=[50, 32, 1024]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %485 = transpose(%484, axes=[1, 0, 2]) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%485, %p1189) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1586 = %1585(%1584, %1548) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1587 = fn (%p0275: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0275, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1588 = %1587(%1586) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1589 = fn (%p0582: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0582, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1590 = %1589(%1588) /* ty=Tensor[(32, 50, 1), float32] */;
  %1591 = fn (%p0274: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p1188: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0274, %p1188) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %1592 = %1591(%1588, %1590) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1593 = fn (%p0273: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %483 = power(%p0273, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%483, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1594 = %1593(%1592) /* ty=Tensor[(32, 50, 1), float32] */;
  %1595 = fn (%p0272: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p1187: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p264: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p325: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %477 = add(%p0272, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %478 = rsqrt(%477) /* ty=Tensor[(32, 50, 1), float32] */;
    %479 = multiply(%p1187, %478) /* ty=Tensor[(32, 50, 1024), float32] */;
    %480 = multiply(%479, %p264) /* ty=Tensor[(32, 50, 1024), float32] */;
    %481 = add(%480, %p325) /* ty=Tensor[(32, 50, 1024), float32] */;
    %482 = reshape(%481, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%482, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %1596 = %1595(%1594, %1592, meta[relay.Constant][142] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][143] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1597 = fn (%p0271: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1186: Tensor[(4096, 1024), float16] /* ty=Tensor[(4096, 1024), float16] */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    nn.dense(%p0271, %p1186, units=None, out_dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(4096, 1024), float16]) -> Tensor[(1600, 4096), float16] */;
  %1598 = %1597(%1596, meta[relay.Constant][144] /* ty=Tensor[(4096, 1024), float16] span=/encoder/layers/encoder_layer_11/mlp/mlp.0/MatMul:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1599 = fn (%p0270: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p1185: Tensor[(4096), float16] /* ty=Tensor[(4096), float16] */, %p263: float16 /* ty=float16 */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    %467 = reshape(%p0270, newshape=[32, 50, 4096]) /* ty=Tensor[(32, 50, 4096), float16] */;
    %468 = add(%p1185, %467) /* ty=Tensor[(32, 50, 4096), float16] */;
    %469 = divide(%468, %p263) /* ty=Tensor[(32, 50, 4096), float16] */;
    %470 = cast(%469, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %471 = erf(%470) /* ty=Tensor[(32, 50, 4096), float32] */;
    %472 = cast(%468, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %473 = add(%471, 1f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %474 = multiply(%472, %473) /* ty=Tensor[(32, 50, 4096), float32] */;
    %475 = multiply(%474, 0.5f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %476 = reshape(%475, newshape=[-1, 4096]) /* ty=Tensor[(1600, 4096), float32] */;
    cast(%476, dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(4096), float16], float16) -> Tensor[(1600, 4096), float16] */;
  %1600 = %1599(%1598, meta[relay.Constant][145] /* ty=Tensor[(4096), float16] span=/encoder/layers/encoder_layer_11/mlp/mlp.0/Add.encoder.layers.encoder_layer_11.mlp.0.bias:0:0 */, 1.41406f16 /* ty=float16 span=/encoder/layers/encoder_layer_11/mlp/mlp.1/Constant:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1601 = fn (%p0269: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p1184: Tensor[(1024, 4096), float16] /* ty=Tensor[(1024, 4096), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    nn.dense(%p0269, %p1184, units=None, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(1024, 4096), float16]) -> Tensor[(1600, 1024), float16] */;
  %1602 = %1601(%1600, meta[relay.Constant][146] /* ty=Tensor[(1024, 4096), float16] span=/encoder/layers/encoder_layer_11/mlp/mlp.3/MatMul:0:0 */) /* ty=Tensor[(1600, 1024), float16] */;
  %1603 = fn (%p0268: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1183: Tensor[(1024), float16] /* ty=Tensor[(1024), float16] */, %p262: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %465 = reshape(%p0268, newshape=[32, 50, 1024]) /* ty=Tensor[(32, 50, 1024), float16] */;
    %466 = add(%p1183, %465) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%p262, %466) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1604 = %1603(%1602, meta[relay.Constant][147] /* ty=Tensor[(1024), float16] span=/encoder/layers/encoder_layer_11/mlp/mlp.3/Add.encoder.layers.encoder_layer_11.mlp.3.bias:0:0 */, %1586) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1605 = fn (%p0267: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0267, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1606 = %1605(%1604) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1607 = fn (%p0583: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0583, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1608 = %1607(%1606) /* ty=Tensor[(32, 50, 1), float32] */;
  %1609 = fn (%p0266: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p1182: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0266, %p1182) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %1610 = %1609(%1606, %1608) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1611 = fn (%p0265: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %464 = power(%p0265, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%464, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1612 = %1611(%1610) /* ty=Tensor[(32, 50, 1), float32] */;
  %1613 = fn (%p0264: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p1181: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p261: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p324: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %457 = add(%p0264, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %458 = rsqrt(%457) /* ty=Tensor[(32, 50, 1), float32] */;
    %459 = multiply(%p1181, %458) /* ty=Tensor[(32, 50, 1024), float32] */;
    %460 = multiply(%459, %p261) /* ty=Tensor[(32, 50, 1024), float32] */;
    %461 = add(%460, %p324) /* ty=Tensor[(32, 50, 1024), float32] */;
    %462 = transpose(%461, axes=[1, 0, 2]) /* ty=Tensor[(50, 32, 1024), float32] */;
    %463 = reshape(%462, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%463, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %1614 = %1613(%1612, %1610, meta[relay.Constant][148] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][149] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1615 = fn (%p0263: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1180: Tensor[(3072, 1024), float16] /* ty=Tensor[(3072, 1024), float16] */, Primitive=1) -> Tensor[(1600, 3072), float16] {
    nn.dense(%p0263, %p1180, units=None, out_dtype="float16") /* ty=Tensor[(1600, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(3072, 1024), float16]) -> Tensor[(1600, 3072), float16] */;
  %1616 = %1615(%1614, meta[relay.Constant][150] /* ty=Tensor[(3072, 1024), float16] span=/encoder/layers/encoder_layer_12/self_attention/MatMul:0:0 */) /* ty=Tensor[(1600, 3072), float16] */;
  %1617 = fn (%p0262: Tensor[(1600, 3072), float16] /* ty=Tensor[(1600, 3072), float16] */, %p1179: Tensor[(3072), float16] /* ty=Tensor[(3072), float16] */, Primitive=1) -> Tensor[(50, 32, 3072), float16] {
    %456 = reshape(%p0262, newshape=[50, 32, 3072]) /* ty=Tensor[(50, 32, 3072), float16] */;
    add(%p1179, %456) /* ty=Tensor[(50, 32, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 3072), float16], Tensor[(3072), float16]) -> Tensor[(50, 32, 3072), float16] */;
  %1618 = %1617(%1616, meta[relay.Constant][151] /* ty=Tensor[(3072), float16] span=Identity_71:0:0 */) /* ty=Tensor[(50, 32, 3072), float16] */;
  %1619 = fn (%p0261: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, %p1178: float16 /* ty=float16 */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %453 = strided_slice(%p0261, begin=[0i64], end=[1024i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %454 = reshape(%453, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    %455 = transpose(%454, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */;
    divide(%455, %p1178) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16], float16) -> Tensor[(512, 50, 64), float16] */;
  %1622 = fn (%p0584: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %1620 = strided_slice(%p0584, begin=[1024i64], end=[2048i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1621 = reshape(%1620, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1621, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1623 = %1619(%1618, 8f16 /* ty=float16 span=/encoder/layers/encoder_layer_12/self_attention/Constant_14:0:0 */) /* ty=Tensor[(512, 50, 64), float16] */;
  %1624 = %1622(%1618) /* ty=Tensor[(512, 50, 64), float16] */;
  %1625 = fn (%p0260: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, %p1177: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    nn.batch_matmul(%p0260, %p1177, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16], Tensor[(512, 50, 64), float16]) -> Tensor[(512, 50, 50), float16] */;
  %1626 = %1625(%1623, %1624) /* ty=Tensor[(512, 50, 50), float16] */;
  %1627 = fn (%p0259: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float32] {
    %452 = reshape(%p0259, newshape=[512, 50, 50]) /* ty=Tensor[(512, 50, 50), float16] */;
    cast(%452, dtype="float32") /* ty=Tensor[(512, 50, 50), float32] */
  } /* ty=fn (Tensor[(512, 50, 50), float16]) -> Tensor[(512, 50, 50), float32] */;
  %1628 = %1627(%1626) /* ty=Tensor[(512, 50, 50), float32] */;
  %1629 = fn (%p0258: Tensor[(512, 50, 50), float32] /* ty=Tensor[(512, 50, 50), float32] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    %451 = nn.softmax(%p0258, axis=2) /* ty=Tensor[(512, 50, 50), float32] */;
    cast(%451, dtype="float16") /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float32]) -> Tensor[(512, 50, 50), float16] */;
  %1632 = fn (%p0585: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 64, 50), float16] {
    %1630 = strided_slice(%p0585, begin=[2048i64], end=[3072i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1631 = reshape(%1630, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1631, axes=[1, 2, 0]) /* ty=Tensor[(512, 64, 50), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 64, 50), float16] */;
  %1633 = %1629(%1628) /* ty=Tensor[(512, 50, 50), float16] */;
  %1634 = %1632(%1618) /* ty=Tensor[(512, 64, 50), float16] */;
  %1635 = fn (%p0257: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, %p1176: Tensor[(512, 64, 50), float16] /* ty=Tensor[(512, 64, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    nn.batch_matmul(%p0257, %p1176, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float16], Tensor[(512, 64, 50), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1636 = %1635(%1633, %1634) /* ty=Tensor[(512, 50, 64), float16] */;
  %1637 = fn (%p0256: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %449 = reshape(%p0256, newshape=[512, 50, 64]) /* ty=Tensor[(512, 50, 64), float16] */;
    %450 = transpose(%449, axes=[1, 0, 2]) /* ty=Tensor[(50, 512, 64), float16] */;
    reshape(%450, newshape=[1600, 1024]) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16]) -> Tensor[(1600, 1024), float16] */;
  %1638 = %1637(%1636) /* ty=Tensor[(1600, 1024), float16] */;
  %1639 = fn (%p0255: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1175: Tensor[(1024, 1024), float16] /* ty=Tensor[(1024, 1024), float16] */, %p260: Tensor[(1, 1024), float16] /* ty=Tensor[(1, 1024), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %448 = nn.dense(%p0255, %p1175, units=1024, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */;
    add(%448, %p260) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024, 1024), float16], Tensor[(1, 1024), float16]) -> Tensor[(1600, 1024), float16] */;
  %1640 = %1639(%1638, meta[relay.Constant][152] /* ty=Tensor[(1024, 1024), float16] span=/encoder/layers/encoder_layer_12/self_attention/Gemm.encoder.layers.encoder_layer_12.self_attention.out_proj.weight:0:0 */, meta[relay.Constant][153] /* ty=Tensor[(1, 1024), float16] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1641 = fn (%p0254: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1174: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %446 = reshape(%p0254, newshape=[50, 32, 1024]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %447 = transpose(%446, axes=[1, 0, 2]) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%447, %p1174) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1642 = %1641(%1640, %1604) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1643 = fn (%p0253: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0253, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1644 = %1643(%1642) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1645 = fn (%p0586: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0586, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1646 = %1645(%1644) /* ty=Tensor[(32, 50, 1), float32] */;
  %1647 = fn (%p0252: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p1173: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0252, %p1173) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %1648 = %1647(%1644, %1646) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1649 = fn (%p0251: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %445 = power(%p0251, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%445, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1650 = %1649(%1648) /* ty=Tensor[(32, 50, 1), float32] */;
  %1651 = fn (%p0250: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p1172: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p259: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p323: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %439 = add(%p0250, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %440 = rsqrt(%439) /* ty=Tensor[(32, 50, 1), float32] */;
    %441 = multiply(%p1172, %440) /* ty=Tensor[(32, 50, 1024), float32] */;
    %442 = multiply(%441, %p259) /* ty=Tensor[(32, 50, 1024), float32] */;
    %443 = add(%442, %p323) /* ty=Tensor[(32, 50, 1024), float32] */;
    %444 = reshape(%443, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%444, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %1652 = %1651(%1650, %1648, meta[relay.Constant][154] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][155] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1653 = fn (%p0249: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1171: Tensor[(4096, 1024), float16] /* ty=Tensor[(4096, 1024), float16] */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    nn.dense(%p0249, %p1171, units=None, out_dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(4096, 1024), float16]) -> Tensor[(1600, 4096), float16] */;
  %1654 = %1653(%1652, meta[relay.Constant][156] /* ty=Tensor[(4096, 1024), float16] span=/encoder/layers/encoder_layer_12/mlp/mlp.0/MatMul:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1655 = fn (%p0248: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p1170: Tensor[(4096), float16] /* ty=Tensor[(4096), float16] */, %p258: float16 /* ty=float16 */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    %429 = reshape(%p0248, newshape=[32, 50, 4096]) /* ty=Tensor[(32, 50, 4096), float16] */;
    %430 = add(%p1170, %429) /* ty=Tensor[(32, 50, 4096), float16] */;
    %431 = divide(%430, %p258) /* ty=Tensor[(32, 50, 4096), float16] */;
    %432 = cast(%431, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %433 = erf(%432) /* ty=Tensor[(32, 50, 4096), float32] */;
    %434 = cast(%430, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %435 = add(%433, 1f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %436 = multiply(%434, %435) /* ty=Tensor[(32, 50, 4096), float32] */;
    %437 = multiply(%436, 0.5f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %438 = reshape(%437, newshape=[-1, 4096]) /* ty=Tensor[(1600, 4096), float32] */;
    cast(%438, dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(4096), float16], float16) -> Tensor[(1600, 4096), float16] */;
  %1656 = %1655(%1654, meta[relay.Constant][157] /* ty=Tensor[(4096), float16] span=/encoder/layers/encoder_layer_12/mlp/mlp.0/Add.encoder.layers.encoder_layer_12.mlp.0.bias:0:0 */, 1.41406f16 /* ty=float16 span=/encoder/layers/encoder_layer_12/mlp/mlp.1/Constant:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1657 = fn (%p0247: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p1169: Tensor[(1024, 4096), float16] /* ty=Tensor[(1024, 4096), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    nn.dense(%p0247, %p1169, units=None, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(1024, 4096), float16]) -> Tensor[(1600, 1024), float16] */;
  %1658 = %1657(%1656, meta[relay.Constant][158] /* ty=Tensor[(1024, 4096), float16] span=/encoder/layers/encoder_layer_12/mlp/mlp.3/MatMul:0:0 */) /* ty=Tensor[(1600, 1024), float16] */;
  %1659 = fn (%p0246: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1168: Tensor[(1024), float16] /* ty=Tensor[(1024), float16] */, %p257: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %427 = reshape(%p0246, newshape=[32, 50, 1024]) /* ty=Tensor[(32, 50, 1024), float16] */;
    %428 = add(%p1168, %427) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%p257, %428) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1660 = %1659(%1658, meta[relay.Constant][159] /* ty=Tensor[(1024), float16] span=/encoder/layers/encoder_layer_12/mlp/mlp.3/Add.encoder.layers.encoder_layer_12.mlp.3.bias:0:0 */, %1642) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1661 = fn (%p0245: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0245, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1662 = %1661(%1660) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1663 = fn (%p0587: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0587, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1664 = %1663(%1662) /* ty=Tensor[(32, 50, 1), float32] */;
  %1665 = fn (%p0244: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p1167: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0244, %p1167) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %1666 = %1665(%1662, %1664) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1667 = fn (%p0243: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %426 = power(%p0243, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%426, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1668 = %1667(%1666) /* ty=Tensor[(32, 50, 1), float32] */;
  %1669 = fn (%p0242: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p1166: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p256: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p322: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %419 = add(%p0242, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %420 = rsqrt(%419) /* ty=Tensor[(32, 50, 1), float32] */;
    %421 = multiply(%p1166, %420) /* ty=Tensor[(32, 50, 1024), float32] */;
    %422 = multiply(%421, %p256) /* ty=Tensor[(32, 50, 1024), float32] */;
    %423 = add(%422, %p322) /* ty=Tensor[(32, 50, 1024), float32] */;
    %424 = transpose(%423, axes=[1, 0, 2]) /* ty=Tensor[(50, 32, 1024), float32] */;
    %425 = reshape(%424, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%425, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %1670 = %1669(%1668, %1666, meta[relay.Constant][160] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][161] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1671 = fn (%p0241: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1165: Tensor[(3072, 1024), float16] /* ty=Tensor[(3072, 1024), float16] */, Primitive=1) -> Tensor[(1600, 3072), float16] {
    nn.dense(%p0241, %p1165, units=None, out_dtype="float16") /* ty=Tensor[(1600, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(3072, 1024), float16]) -> Tensor[(1600, 3072), float16] */;
  %1672 = %1671(%1670, meta[relay.Constant][162] /* ty=Tensor[(3072, 1024), float16] span=/encoder/layers/encoder_layer_13/self_attention/MatMul:0:0 */) /* ty=Tensor[(1600, 3072), float16] */;
  %1673 = fn (%p0240: Tensor[(1600, 3072), float16] /* ty=Tensor[(1600, 3072), float16] */, %p1164: Tensor[(3072), float16] /* ty=Tensor[(3072), float16] */, Primitive=1) -> Tensor[(50, 32, 3072), float16] {
    %418 = reshape(%p0240, newshape=[50, 32, 3072]) /* ty=Tensor[(50, 32, 3072), float16] */;
    add(%p1164, %418) /* ty=Tensor[(50, 32, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 3072), float16], Tensor[(3072), float16]) -> Tensor[(50, 32, 3072), float16] */;
  %1674 = %1673(%1672, meta[relay.Constant][163] /* ty=Tensor[(3072), float16] span=Identity_65:0:0 */) /* ty=Tensor[(50, 32, 3072), float16] */;
  %1675 = fn (%p0239: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, %p1163: float16 /* ty=float16 */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %415 = strided_slice(%p0239, begin=[0i64], end=[1024i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %416 = reshape(%415, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    %417 = transpose(%416, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */;
    divide(%417, %p1163) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16], float16) -> Tensor[(512, 50, 64), float16] */;
  %1678 = fn (%p0588: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %1676 = strided_slice(%p0588, begin=[1024i64], end=[2048i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1677 = reshape(%1676, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1677, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1679 = %1675(%1674, 8f16 /* ty=float16 span=/encoder/layers/encoder_layer_13/self_attention/Constant_14:0:0 */) /* ty=Tensor[(512, 50, 64), float16] */;
  %1680 = %1678(%1674) /* ty=Tensor[(512, 50, 64), float16] */;
  %1681 = fn (%p0238: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, %p1162: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    nn.batch_matmul(%p0238, %p1162, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16], Tensor[(512, 50, 64), float16]) -> Tensor[(512, 50, 50), float16] */;
  %1682 = %1681(%1679, %1680) /* ty=Tensor[(512, 50, 50), float16] */;
  %1683 = fn (%p0237: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float32] {
    %414 = reshape(%p0237, newshape=[512, 50, 50]) /* ty=Tensor[(512, 50, 50), float16] */;
    cast(%414, dtype="float32") /* ty=Tensor[(512, 50, 50), float32] */
  } /* ty=fn (Tensor[(512, 50, 50), float16]) -> Tensor[(512, 50, 50), float32] */;
  %1684 = %1683(%1682) /* ty=Tensor[(512, 50, 50), float32] */;
  %1685 = fn (%p0236: Tensor[(512, 50, 50), float32] /* ty=Tensor[(512, 50, 50), float32] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    %413 = nn.softmax(%p0236, axis=2) /* ty=Tensor[(512, 50, 50), float32] */;
    cast(%413, dtype="float16") /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float32]) -> Tensor[(512, 50, 50), float16] */;
  %1688 = fn (%p0589: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 64, 50), float16] {
    %1686 = strided_slice(%p0589, begin=[2048i64], end=[3072i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1687 = reshape(%1686, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1687, axes=[1, 2, 0]) /* ty=Tensor[(512, 64, 50), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 64, 50), float16] */;
  %1689 = %1685(%1684) /* ty=Tensor[(512, 50, 50), float16] */;
  %1690 = %1688(%1674) /* ty=Tensor[(512, 64, 50), float16] */;
  %1691 = fn (%p0235: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, %p1161: Tensor[(512, 64, 50), float16] /* ty=Tensor[(512, 64, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    nn.batch_matmul(%p0235, %p1161, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float16], Tensor[(512, 64, 50), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1692 = %1691(%1689, %1690) /* ty=Tensor[(512, 50, 64), float16] */;
  %1693 = fn (%p0234: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %411 = reshape(%p0234, newshape=[512, 50, 64]) /* ty=Tensor[(512, 50, 64), float16] */;
    %412 = transpose(%411, axes=[1, 0, 2]) /* ty=Tensor[(50, 512, 64), float16] */;
    reshape(%412, newshape=[1600, 1024]) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16]) -> Tensor[(1600, 1024), float16] */;
  %1694 = %1693(%1692) /* ty=Tensor[(1600, 1024), float16] */;
  %1695 = fn (%p0233: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1160: Tensor[(1024, 1024), float16] /* ty=Tensor[(1024, 1024), float16] */, %p255: Tensor[(1, 1024), float16] /* ty=Tensor[(1, 1024), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %410 = nn.dense(%p0233, %p1160, units=1024, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */;
    add(%410, %p255) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024, 1024), float16], Tensor[(1, 1024), float16]) -> Tensor[(1600, 1024), float16] */;
  %1696 = %1695(%1694, meta[relay.Constant][164] /* ty=Tensor[(1024, 1024), float16] span=/encoder/layers/encoder_layer_13/self_attention/Gemm.encoder.layers.encoder_layer_13.self_attention.out_proj.weight:0:0 */, meta[relay.Constant][165] /* ty=Tensor[(1, 1024), float16] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1697 = fn (%p0232: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1159: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %408 = reshape(%p0232, newshape=[50, 32, 1024]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %409 = transpose(%408, axes=[1, 0, 2]) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%409, %p1159) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1698 = %1697(%1696, %1660) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1699 = fn (%p0231: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0231, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1700 = %1699(%1698) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1701 = fn (%p0590: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0590, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1702 = %1701(%1700) /* ty=Tensor[(32, 50, 1), float32] */;
  %1703 = fn (%p0230: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p1158: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0230, %p1158) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %1704 = %1703(%1700, %1702) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1705 = fn (%p0229: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %407 = power(%p0229, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%407, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1706 = %1705(%1704) /* ty=Tensor[(32, 50, 1), float32] */;
  %1707 = fn (%p0228: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p1157: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p254: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p321: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %401 = add(%p0228, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %402 = rsqrt(%401) /* ty=Tensor[(32, 50, 1), float32] */;
    %403 = multiply(%p1157, %402) /* ty=Tensor[(32, 50, 1024), float32] */;
    %404 = multiply(%403, %p254) /* ty=Tensor[(32, 50, 1024), float32] */;
    %405 = add(%404, %p321) /* ty=Tensor[(32, 50, 1024), float32] */;
    %406 = reshape(%405, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%406, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %1708 = %1707(%1706, %1704, meta[relay.Constant][166] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][167] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1709 = fn (%p0227: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1156: Tensor[(4096, 1024), float16] /* ty=Tensor[(4096, 1024), float16] */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    nn.dense(%p0227, %p1156, units=None, out_dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(4096, 1024), float16]) -> Tensor[(1600, 4096), float16] */;
  %1710 = %1709(%1708, meta[relay.Constant][168] /* ty=Tensor[(4096, 1024), float16] span=/encoder/layers/encoder_layer_13/mlp/mlp.0/MatMul:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1711 = fn (%p0226: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p1155: Tensor[(4096), float16] /* ty=Tensor[(4096), float16] */, %p253: float16 /* ty=float16 */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    %391 = reshape(%p0226, newshape=[32, 50, 4096]) /* ty=Tensor[(32, 50, 4096), float16] */;
    %392 = add(%p1155, %391) /* ty=Tensor[(32, 50, 4096), float16] */;
    %393 = divide(%392, %p253) /* ty=Tensor[(32, 50, 4096), float16] */;
    %394 = cast(%393, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %395 = erf(%394) /* ty=Tensor[(32, 50, 4096), float32] */;
    %396 = cast(%392, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %397 = add(%395, 1f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %398 = multiply(%396, %397) /* ty=Tensor[(32, 50, 4096), float32] */;
    %399 = multiply(%398, 0.5f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %400 = reshape(%399, newshape=[-1, 4096]) /* ty=Tensor[(1600, 4096), float32] */;
    cast(%400, dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(4096), float16], float16) -> Tensor[(1600, 4096), float16] */;
  %1712 = %1711(%1710, meta[relay.Constant][169] /* ty=Tensor[(4096), float16] span=/encoder/layers/encoder_layer_13/mlp/mlp.0/Add.encoder.layers.encoder_layer_13.mlp.0.bias:0:0 */, 1.41406f16 /* ty=float16 span=/encoder/layers/encoder_layer_13/mlp/mlp.1/Constant:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1713 = fn (%p0225: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p1154: Tensor[(1024, 4096), float16] /* ty=Tensor[(1024, 4096), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    nn.dense(%p0225, %p1154, units=None, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(1024, 4096), float16]) -> Tensor[(1600, 1024), float16] */;
  %1714 = %1713(%1712, meta[relay.Constant][170] /* ty=Tensor[(1024, 4096), float16] span=/encoder/layers/encoder_layer_13/mlp/mlp.3/MatMul:0:0 */) /* ty=Tensor[(1600, 1024), float16] */;
  %1715 = fn (%p0224: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1153: Tensor[(1024), float16] /* ty=Tensor[(1024), float16] */, %p252: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %389 = reshape(%p0224, newshape=[32, 50, 1024]) /* ty=Tensor[(32, 50, 1024), float16] */;
    %390 = add(%p1153, %389) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%p252, %390) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1716 = %1715(%1714, meta[relay.Constant][171] /* ty=Tensor[(1024), float16] span=/encoder/layers/encoder_layer_13/mlp/mlp.3/Add.encoder.layers.encoder_layer_13.mlp.3.bias:0:0 */, %1698) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1717 = fn (%p0223: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0223, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1718 = %1717(%1716) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1719 = fn (%p0591: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0591, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1720 = %1719(%1718) /* ty=Tensor[(32, 50, 1), float32] */;
  %1721 = fn (%p0222: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p1152: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0222, %p1152) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %1722 = %1721(%1718, %1720) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1723 = fn (%p0221: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %388 = power(%p0221, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%388, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1724 = %1723(%1722) /* ty=Tensor[(32, 50, 1), float32] */;
  %1725 = fn (%p0220: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p1151: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p251: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p320: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %381 = add(%p0220, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %382 = rsqrt(%381) /* ty=Tensor[(32, 50, 1), float32] */;
    %383 = multiply(%p1151, %382) /* ty=Tensor[(32, 50, 1024), float32] */;
    %384 = multiply(%383, %p251) /* ty=Tensor[(32, 50, 1024), float32] */;
    %385 = add(%384, %p320) /* ty=Tensor[(32, 50, 1024), float32] */;
    %386 = transpose(%385, axes=[1, 0, 2]) /* ty=Tensor[(50, 32, 1024), float32] */;
    %387 = reshape(%386, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%387, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %1726 = %1725(%1724, %1722, meta[relay.Constant][172] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][173] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1727 = fn (%p0219: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1150: Tensor[(3072, 1024), float16] /* ty=Tensor[(3072, 1024), float16] */, Primitive=1) -> Tensor[(1600, 3072), float16] {
    nn.dense(%p0219, %p1150, units=None, out_dtype="float16") /* ty=Tensor[(1600, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(3072, 1024), float16]) -> Tensor[(1600, 3072), float16] */;
  %1728 = %1727(%1726, meta[relay.Constant][174] /* ty=Tensor[(3072, 1024), float16] span=/encoder/layers/encoder_layer_14/self_attention/MatMul:0:0 */) /* ty=Tensor[(1600, 3072), float16] */;
  %1729 = fn (%p0218: Tensor[(1600, 3072), float16] /* ty=Tensor[(1600, 3072), float16] */, %p1149: Tensor[(3072), float16] /* ty=Tensor[(3072), float16] */, Primitive=1) -> Tensor[(50, 32, 3072), float16] {
    %380 = reshape(%p0218, newshape=[50, 32, 3072]) /* ty=Tensor[(50, 32, 3072), float16] */;
    add(%p1149, %380) /* ty=Tensor[(50, 32, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 3072), float16], Tensor[(3072), float16]) -> Tensor[(50, 32, 3072), float16] */;
  %1730 = %1729(%1728, meta[relay.Constant][175] /* ty=Tensor[(3072), float16] span=Identity_59:0:0 */) /* ty=Tensor[(50, 32, 3072), float16] */;
  %1731 = fn (%p0217: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, %p1148: float16 /* ty=float16 */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %377 = strided_slice(%p0217, begin=[0i64], end=[1024i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %378 = reshape(%377, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    %379 = transpose(%378, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */;
    divide(%379, %p1148) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16], float16) -> Tensor[(512, 50, 64), float16] */;
  %1734 = fn (%p0592: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %1732 = strided_slice(%p0592, begin=[1024i64], end=[2048i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1733 = reshape(%1732, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1733, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1735 = %1731(%1730, 8f16 /* ty=float16 span=/encoder/layers/encoder_layer_14/self_attention/Constant_14:0:0 */) /* ty=Tensor[(512, 50, 64), float16] */;
  %1736 = %1734(%1730) /* ty=Tensor[(512, 50, 64), float16] */;
  %1737 = fn (%p0216: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, %p1147: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    nn.batch_matmul(%p0216, %p1147, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16], Tensor[(512, 50, 64), float16]) -> Tensor[(512, 50, 50), float16] */;
  %1738 = %1737(%1735, %1736) /* ty=Tensor[(512, 50, 50), float16] */;
  %1739 = fn (%p0215: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float32] {
    %376 = reshape(%p0215, newshape=[512, 50, 50]) /* ty=Tensor[(512, 50, 50), float16] */;
    cast(%376, dtype="float32") /* ty=Tensor[(512, 50, 50), float32] */
  } /* ty=fn (Tensor[(512, 50, 50), float16]) -> Tensor[(512, 50, 50), float32] */;
  %1740 = %1739(%1738) /* ty=Tensor[(512, 50, 50), float32] */;
  %1741 = fn (%p0214: Tensor[(512, 50, 50), float32] /* ty=Tensor[(512, 50, 50), float32] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    %375 = nn.softmax(%p0214, axis=2) /* ty=Tensor[(512, 50, 50), float32] */;
    cast(%375, dtype="float16") /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float32]) -> Tensor[(512, 50, 50), float16] */;
  %1744 = fn (%p0593: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 64, 50), float16] {
    %1742 = strided_slice(%p0593, begin=[2048i64], end=[3072i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1743 = reshape(%1742, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1743, axes=[1, 2, 0]) /* ty=Tensor[(512, 64, 50), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 64, 50), float16] */;
  %1745 = %1741(%1740) /* ty=Tensor[(512, 50, 50), float16] */;
  %1746 = %1744(%1730) /* ty=Tensor[(512, 64, 50), float16] */;
  %1747 = fn (%p0213: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, %p1146: Tensor[(512, 64, 50), float16] /* ty=Tensor[(512, 64, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    nn.batch_matmul(%p0213, %p1146, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float16], Tensor[(512, 64, 50), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1748 = %1747(%1745, %1746) /* ty=Tensor[(512, 50, 64), float16] */;
  %1749 = fn (%p0212: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %373 = reshape(%p0212, newshape=[512, 50, 64]) /* ty=Tensor[(512, 50, 64), float16] */;
    %374 = transpose(%373, axes=[1, 0, 2]) /* ty=Tensor[(50, 512, 64), float16] */;
    reshape(%374, newshape=[1600, 1024]) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16]) -> Tensor[(1600, 1024), float16] */;
  %1750 = %1749(%1748) /* ty=Tensor[(1600, 1024), float16] */;
  %1751 = fn (%p0211: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1145: Tensor[(1024, 1024), float16] /* ty=Tensor[(1024, 1024), float16] */, %p250: Tensor[(1, 1024), float16] /* ty=Tensor[(1, 1024), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %372 = nn.dense(%p0211, %p1145, units=1024, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */;
    add(%372, %p250) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024, 1024), float16], Tensor[(1, 1024), float16]) -> Tensor[(1600, 1024), float16] */;
  %1752 = %1751(%1750, meta[relay.Constant][176] /* ty=Tensor[(1024, 1024), float16] span=/encoder/layers/encoder_layer_14/self_attention/Gemm.encoder.layers.encoder_layer_14.self_attention.out_proj.weight:0:0 */, meta[relay.Constant][177] /* ty=Tensor[(1, 1024), float16] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1753 = fn (%p0210: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1144: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %370 = reshape(%p0210, newshape=[50, 32, 1024]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %371 = transpose(%370, axes=[1, 0, 2]) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%371, %p1144) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1754 = %1753(%1752, %1716) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1755 = fn (%p0209: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0209, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1756 = %1755(%1754) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1757 = fn (%p0594: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0594, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1758 = %1757(%1756) /* ty=Tensor[(32, 50, 1), float32] */;
  %1759 = fn (%p0208: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p1143: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0208, %p1143) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %1760 = %1759(%1756, %1758) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1761 = fn (%p0207: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %369 = power(%p0207, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%369, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1762 = %1761(%1760) /* ty=Tensor[(32, 50, 1), float32] */;
  %1763 = fn (%p0206: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p1142: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p249: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p319: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %363 = add(%p0206, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %364 = rsqrt(%363) /* ty=Tensor[(32, 50, 1), float32] */;
    %365 = multiply(%p1142, %364) /* ty=Tensor[(32, 50, 1024), float32] */;
    %366 = multiply(%365, %p249) /* ty=Tensor[(32, 50, 1024), float32] */;
    %367 = add(%366, %p319) /* ty=Tensor[(32, 50, 1024), float32] */;
    %368 = reshape(%367, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%368, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %1764 = %1763(%1762, %1760, meta[relay.Constant][178] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][179] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1765 = fn (%p0205: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1141: Tensor[(4096, 1024), float16] /* ty=Tensor[(4096, 1024), float16] */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    nn.dense(%p0205, %p1141, units=None, out_dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(4096, 1024), float16]) -> Tensor[(1600, 4096), float16] */;
  %1766 = %1765(%1764, meta[relay.Constant][180] /* ty=Tensor[(4096, 1024), float16] span=/encoder/layers/encoder_layer_14/mlp/mlp.0/MatMul:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1767 = fn (%p0204: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p1140: Tensor[(4096), float16] /* ty=Tensor[(4096), float16] */, %p248: float16 /* ty=float16 */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    %353 = reshape(%p0204, newshape=[32, 50, 4096]) /* ty=Tensor[(32, 50, 4096), float16] */;
    %354 = add(%p1140, %353) /* ty=Tensor[(32, 50, 4096), float16] */;
    %355 = divide(%354, %p248) /* ty=Tensor[(32, 50, 4096), float16] */;
    %356 = cast(%355, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %357 = erf(%356) /* ty=Tensor[(32, 50, 4096), float32] */;
    %358 = cast(%354, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %359 = add(%357, 1f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %360 = multiply(%358, %359) /* ty=Tensor[(32, 50, 4096), float32] */;
    %361 = multiply(%360, 0.5f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %362 = reshape(%361, newshape=[-1, 4096]) /* ty=Tensor[(1600, 4096), float32] */;
    cast(%362, dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(4096), float16], float16) -> Tensor[(1600, 4096), float16] */;
  %1768 = %1767(%1766, meta[relay.Constant][181] /* ty=Tensor[(4096), float16] span=/encoder/layers/encoder_layer_14/mlp/mlp.0/Add.encoder.layers.encoder_layer_14.mlp.0.bias:0:0 */, 1.41406f16 /* ty=float16 span=/encoder/layers/encoder_layer_14/mlp/mlp.1/Constant:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1769 = fn (%p0203: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p1139: Tensor[(1024, 4096), float16] /* ty=Tensor[(1024, 4096), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    nn.dense(%p0203, %p1139, units=None, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(1024, 4096), float16]) -> Tensor[(1600, 1024), float16] */;
  %1770 = %1769(%1768, meta[relay.Constant][182] /* ty=Tensor[(1024, 4096), float16] span=/encoder/layers/encoder_layer_14/mlp/mlp.3/MatMul:0:0 */) /* ty=Tensor[(1600, 1024), float16] */;
  %1771 = fn (%p0202: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1138: Tensor[(1024), float16] /* ty=Tensor[(1024), float16] */, %p247: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %351 = reshape(%p0202, newshape=[32, 50, 1024]) /* ty=Tensor[(32, 50, 1024), float16] */;
    %352 = add(%p1138, %351) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%p247, %352) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1772 = %1771(%1770, meta[relay.Constant][183] /* ty=Tensor[(1024), float16] span=/encoder/layers/encoder_layer_14/mlp/mlp.3/Add.encoder.layers.encoder_layer_14.mlp.3.bias:0:0 */, %1754) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1773 = fn (%p0201: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0201, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1774 = %1773(%1772) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1775 = fn (%p0595: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0595, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1776 = %1775(%1774) /* ty=Tensor[(32, 50, 1), float32] */;
  %1777 = fn (%p0200: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p1137: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0200, %p1137) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %1778 = %1777(%1774, %1776) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1779 = fn (%p0199: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %350 = power(%p0199, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%350, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1780 = %1779(%1778) /* ty=Tensor[(32, 50, 1), float32] */;
  %1781 = fn (%p0198: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p1136: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p246: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p318: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %343 = add(%p0198, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %344 = rsqrt(%343) /* ty=Tensor[(32, 50, 1), float32] */;
    %345 = multiply(%p1136, %344) /* ty=Tensor[(32, 50, 1024), float32] */;
    %346 = multiply(%345, %p246) /* ty=Tensor[(32, 50, 1024), float32] */;
    %347 = add(%346, %p318) /* ty=Tensor[(32, 50, 1024), float32] */;
    %348 = transpose(%347, axes=[1, 0, 2]) /* ty=Tensor[(50, 32, 1024), float32] */;
    %349 = reshape(%348, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%349, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %1782 = %1781(%1780, %1778, meta[relay.Constant][184] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][185] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1783 = fn (%p0197: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1135: Tensor[(3072, 1024), float16] /* ty=Tensor[(3072, 1024), float16] */, Primitive=1) -> Tensor[(1600, 3072), float16] {
    nn.dense(%p0197, %p1135, units=None, out_dtype="float16") /* ty=Tensor[(1600, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(3072, 1024), float16]) -> Tensor[(1600, 3072), float16] */;
  %1784 = %1783(%1782, meta[relay.Constant][186] /* ty=Tensor[(3072, 1024), float16] span=/encoder/layers/encoder_layer_15/self_attention/MatMul:0:0 */) /* ty=Tensor[(1600, 3072), float16] */;
  %1785 = fn (%p0196: Tensor[(1600, 3072), float16] /* ty=Tensor[(1600, 3072), float16] */, %p1134: Tensor[(3072), float16] /* ty=Tensor[(3072), float16] */, Primitive=1) -> Tensor[(50, 32, 3072), float16] {
    %342 = reshape(%p0196, newshape=[50, 32, 3072]) /* ty=Tensor[(50, 32, 3072), float16] */;
    add(%p1134, %342) /* ty=Tensor[(50, 32, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 3072), float16], Tensor[(3072), float16]) -> Tensor[(50, 32, 3072), float16] */;
  %1786 = %1785(%1784, meta[relay.Constant][187] /* ty=Tensor[(3072), float16] span=Identity_53:0:0 */) /* ty=Tensor[(50, 32, 3072), float16] */;
  %1787 = fn (%p0195: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, %p1133: float16 /* ty=float16 */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %339 = strided_slice(%p0195, begin=[0i64], end=[1024i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %340 = reshape(%339, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    %341 = transpose(%340, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */;
    divide(%341, %p1133) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16], float16) -> Tensor[(512, 50, 64), float16] */;
  %1790 = fn (%p0596: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %1788 = strided_slice(%p0596, begin=[1024i64], end=[2048i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1789 = reshape(%1788, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1789, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1791 = %1787(%1786, 8f16 /* ty=float16 span=/encoder/layers/encoder_layer_15/self_attention/Constant_14:0:0 */) /* ty=Tensor[(512, 50, 64), float16] */;
  %1792 = %1790(%1786) /* ty=Tensor[(512, 50, 64), float16] */;
  %1793 = fn (%p0194: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, %p1132: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    nn.batch_matmul(%p0194, %p1132, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16], Tensor[(512, 50, 64), float16]) -> Tensor[(512, 50, 50), float16] */;
  %1794 = %1793(%1791, %1792) /* ty=Tensor[(512, 50, 50), float16] */;
  %1795 = fn (%p0193: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float32] {
    %338 = reshape(%p0193, newshape=[512, 50, 50]) /* ty=Tensor[(512, 50, 50), float16] */;
    cast(%338, dtype="float32") /* ty=Tensor[(512, 50, 50), float32] */
  } /* ty=fn (Tensor[(512, 50, 50), float16]) -> Tensor[(512, 50, 50), float32] */;
  %1796 = %1795(%1794) /* ty=Tensor[(512, 50, 50), float32] */;
  %1797 = fn (%p0192: Tensor[(512, 50, 50), float32] /* ty=Tensor[(512, 50, 50), float32] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    %337 = nn.softmax(%p0192, axis=2) /* ty=Tensor[(512, 50, 50), float32] */;
    cast(%337, dtype="float16") /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float32]) -> Tensor[(512, 50, 50), float16] */;
  %1800 = fn (%p0597: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 64, 50), float16] {
    %1798 = strided_slice(%p0597, begin=[2048i64], end=[3072i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1799 = reshape(%1798, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1799, axes=[1, 2, 0]) /* ty=Tensor[(512, 64, 50), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 64, 50), float16] */;
  %1801 = %1797(%1796) /* ty=Tensor[(512, 50, 50), float16] */;
  %1802 = %1800(%1786) /* ty=Tensor[(512, 64, 50), float16] */;
  %1803 = fn (%p0191: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, %p1131: Tensor[(512, 64, 50), float16] /* ty=Tensor[(512, 64, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    nn.batch_matmul(%p0191, %p1131, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float16], Tensor[(512, 64, 50), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1804 = %1803(%1801, %1802) /* ty=Tensor[(512, 50, 64), float16] */;
  %1805 = fn (%p0190: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %335 = reshape(%p0190, newshape=[512, 50, 64]) /* ty=Tensor[(512, 50, 64), float16] */;
    %336 = transpose(%335, axes=[1, 0, 2]) /* ty=Tensor[(50, 512, 64), float16] */;
    reshape(%336, newshape=[1600, 1024]) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16]) -> Tensor[(1600, 1024), float16] */;
  %1806 = %1805(%1804) /* ty=Tensor[(1600, 1024), float16] */;
  %1807 = fn (%p0189: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1130: Tensor[(1024, 1024), float16] /* ty=Tensor[(1024, 1024), float16] */, %p245: Tensor[(1, 1024), float16] /* ty=Tensor[(1, 1024), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %334 = nn.dense(%p0189, %p1130, units=1024, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */;
    add(%334, %p245) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024, 1024), float16], Tensor[(1, 1024), float16]) -> Tensor[(1600, 1024), float16] */;
  %1808 = %1807(%1806, meta[relay.Constant][188] /* ty=Tensor[(1024, 1024), float16] span=/encoder/layers/encoder_layer_15/self_attention/Gemm.encoder.layers.encoder_layer_15.self_attention.out_proj.weight:0:0 */, meta[relay.Constant][189] /* ty=Tensor[(1, 1024), float16] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1809 = fn (%p0188: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1129: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %332 = reshape(%p0188, newshape=[50, 32, 1024]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %333 = transpose(%332, axes=[1, 0, 2]) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%333, %p1129) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1810 = %1809(%1808, %1772) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1811 = fn (%p0187: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0187, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1812 = %1811(%1810) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1813 = fn (%p0598: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0598, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1814 = %1813(%1812) /* ty=Tensor[(32, 50, 1), float32] */;
  %1815 = fn (%p0186: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p1128: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0186, %p1128) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %1816 = %1815(%1812, %1814) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1817 = fn (%p0185: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %331 = power(%p0185, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%331, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1818 = %1817(%1816) /* ty=Tensor[(32, 50, 1), float32] */;
  %1819 = fn (%p0184: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p1127: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p244: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p317: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %325 = add(%p0184, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %326 = rsqrt(%325) /* ty=Tensor[(32, 50, 1), float32] */;
    %327 = multiply(%p1127, %326) /* ty=Tensor[(32, 50, 1024), float32] */;
    %328 = multiply(%327, %p244) /* ty=Tensor[(32, 50, 1024), float32] */;
    %329 = add(%328, %p317) /* ty=Tensor[(32, 50, 1024), float32] */;
    %330 = reshape(%329, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%330, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %1820 = %1819(%1818, %1816, meta[relay.Constant][190] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][191] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1821 = fn (%p0183: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1126: Tensor[(4096, 1024), float16] /* ty=Tensor[(4096, 1024), float16] */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    nn.dense(%p0183, %p1126, units=None, out_dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(4096, 1024), float16]) -> Tensor[(1600, 4096), float16] */;
  %1822 = %1821(%1820, meta[relay.Constant][192] /* ty=Tensor[(4096, 1024), float16] span=/encoder/layers/encoder_layer_15/mlp/mlp.0/MatMul:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1823 = fn (%p0182: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p1125: Tensor[(4096), float16] /* ty=Tensor[(4096), float16] */, %p243: float16 /* ty=float16 */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    %315 = reshape(%p0182, newshape=[32, 50, 4096]) /* ty=Tensor[(32, 50, 4096), float16] */;
    %316 = add(%p1125, %315) /* ty=Tensor[(32, 50, 4096), float16] */;
    %317 = divide(%316, %p243) /* ty=Tensor[(32, 50, 4096), float16] */;
    %318 = cast(%317, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %319 = erf(%318) /* ty=Tensor[(32, 50, 4096), float32] */;
    %320 = cast(%316, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %321 = add(%319, 1f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %322 = multiply(%320, %321) /* ty=Tensor[(32, 50, 4096), float32] */;
    %323 = multiply(%322, 0.5f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %324 = reshape(%323, newshape=[-1, 4096]) /* ty=Tensor[(1600, 4096), float32] */;
    cast(%324, dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(4096), float16], float16) -> Tensor[(1600, 4096), float16] */;
  %1824 = %1823(%1822, meta[relay.Constant][193] /* ty=Tensor[(4096), float16] span=/encoder/layers/encoder_layer_15/mlp/mlp.0/Add.encoder.layers.encoder_layer_15.mlp.0.bias:0:0 */, 1.41406f16 /* ty=float16 span=/encoder/layers/encoder_layer_15/mlp/mlp.1/Constant:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1825 = fn (%p0181: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p1124: Tensor[(1024, 4096), float16] /* ty=Tensor[(1024, 4096), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    nn.dense(%p0181, %p1124, units=None, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(1024, 4096), float16]) -> Tensor[(1600, 1024), float16] */;
  %1826 = %1825(%1824, meta[relay.Constant][194] /* ty=Tensor[(1024, 4096), float16] span=/encoder/layers/encoder_layer_15/mlp/mlp.3/MatMul:0:0 */) /* ty=Tensor[(1600, 1024), float16] */;
  %1827 = fn (%p0180: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1123: Tensor[(1024), float16] /* ty=Tensor[(1024), float16] */, %p242: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %313 = reshape(%p0180, newshape=[32, 50, 1024]) /* ty=Tensor[(32, 50, 1024), float16] */;
    %314 = add(%p1123, %313) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%p242, %314) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1828 = %1827(%1826, meta[relay.Constant][195] /* ty=Tensor[(1024), float16] span=/encoder/layers/encoder_layer_15/mlp/mlp.3/Add.encoder.layers.encoder_layer_15.mlp.3.bias:0:0 */, %1810) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1829 = fn (%p0179: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0179, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1830 = %1829(%1828) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1831 = fn (%p0599: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0599, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1832 = %1831(%1830) /* ty=Tensor[(32, 50, 1), float32] */;
  %1833 = fn (%p0178: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p1122: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0178, %p1122) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %1834 = %1833(%1830, %1832) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1835 = fn (%p0177: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %312 = power(%p0177, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%312, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1836 = %1835(%1834) /* ty=Tensor[(32, 50, 1), float32] */;
  %1837 = fn (%p0176: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p1121: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p241: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p316: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %305 = add(%p0176, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %306 = rsqrt(%305) /* ty=Tensor[(32, 50, 1), float32] */;
    %307 = multiply(%p1121, %306) /* ty=Tensor[(32, 50, 1024), float32] */;
    %308 = multiply(%307, %p241) /* ty=Tensor[(32, 50, 1024), float32] */;
    %309 = add(%308, %p316) /* ty=Tensor[(32, 50, 1024), float32] */;
    %310 = transpose(%309, axes=[1, 0, 2]) /* ty=Tensor[(50, 32, 1024), float32] */;
    %311 = reshape(%310, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%311, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %1838 = %1837(%1836, %1834, meta[relay.Constant][196] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][197] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1839 = fn (%p0175: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1120: Tensor[(3072, 1024), float16] /* ty=Tensor[(3072, 1024), float16] */, Primitive=1) -> Tensor[(1600, 3072), float16] {
    nn.dense(%p0175, %p1120, units=None, out_dtype="float16") /* ty=Tensor[(1600, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(3072, 1024), float16]) -> Tensor[(1600, 3072), float16] */;
  %1840 = %1839(%1838, meta[relay.Constant][198] /* ty=Tensor[(3072, 1024), float16] span=/encoder/layers/encoder_layer_16/self_attention/MatMul:0:0 */) /* ty=Tensor[(1600, 3072), float16] */;
  %1841 = fn (%p0174: Tensor[(1600, 3072), float16] /* ty=Tensor[(1600, 3072), float16] */, %p1119: Tensor[(3072), float16] /* ty=Tensor[(3072), float16] */, Primitive=1) -> Tensor[(50, 32, 3072), float16] {
    %304 = reshape(%p0174, newshape=[50, 32, 3072]) /* ty=Tensor[(50, 32, 3072), float16] */;
    add(%p1119, %304) /* ty=Tensor[(50, 32, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 3072), float16], Tensor[(3072), float16]) -> Tensor[(50, 32, 3072), float16] */;
  %1842 = %1841(%1840, meta[relay.Constant][199] /* ty=Tensor[(3072), float16] span=Identity_47:0:0 */) /* ty=Tensor[(50, 32, 3072), float16] */;
  %1843 = fn (%p0173: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, %p1118: float16 /* ty=float16 */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %301 = strided_slice(%p0173, begin=[0i64], end=[1024i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %302 = reshape(%301, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    %303 = transpose(%302, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */;
    divide(%303, %p1118) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16], float16) -> Tensor[(512, 50, 64), float16] */;
  %1846 = fn (%p0600: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %1844 = strided_slice(%p0600, begin=[1024i64], end=[2048i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1845 = reshape(%1844, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1845, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1847 = %1843(%1842, 8f16 /* ty=float16 span=/encoder/layers/encoder_layer_16/self_attention/Constant_14:0:0 */) /* ty=Tensor[(512, 50, 64), float16] */;
  %1848 = %1846(%1842) /* ty=Tensor[(512, 50, 64), float16] */;
  %1849 = fn (%p0172: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, %p1117: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    nn.batch_matmul(%p0172, %p1117, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16], Tensor[(512, 50, 64), float16]) -> Tensor[(512, 50, 50), float16] */;
  %1850 = %1849(%1847, %1848) /* ty=Tensor[(512, 50, 50), float16] */;
  %1851 = fn (%p0171: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float32] {
    %300 = reshape(%p0171, newshape=[512, 50, 50]) /* ty=Tensor[(512, 50, 50), float16] */;
    cast(%300, dtype="float32") /* ty=Tensor[(512, 50, 50), float32] */
  } /* ty=fn (Tensor[(512, 50, 50), float16]) -> Tensor[(512, 50, 50), float32] */;
  %1852 = %1851(%1850) /* ty=Tensor[(512, 50, 50), float32] */;
  %1853 = fn (%p0170: Tensor[(512, 50, 50), float32] /* ty=Tensor[(512, 50, 50), float32] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    %299 = nn.softmax(%p0170, axis=2) /* ty=Tensor[(512, 50, 50), float32] */;
    cast(%299, dtype="float16") /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float32]) -> Tensor[(512, 50, 50), float16] */;
  %1856 = fn (%p0601: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 64, 50), float16] {
    %1854 = strided_slice(%p0601, begin=[2048i64], end=[3072i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1855 = reshape(%1854, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1855, axes=[1, 2, 0]) /* ty=Tensor[(512, 64, 50), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 64, 50), float16] */;
  %1857 = %1853(%1852) /* ty=Tensor[(512, 50, 50), float16] */;
  %1858 = %1856(%1842) /* ty=Tensor[(512, 64, 50), float16] */;
  %1859 = fn (%p0169: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, %p1116: Tensor[(512, 64, 50), float16] /* ty=Tensor[(512, 64, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    nn.batch_matmul(%p0169, %p1116, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float16], Tensor[(512, 64, 50), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1860 = %1859(%1857, %1858) /* ty=Tensor[(512, 50, 64), float16] */;
  %1861 = fn (%p0168: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %297 = reshape(%p0168, newshape=[512, 50, 64]) /* ty=Tensor[(512, 50, 64), float16] */;
    %298 = transpose(%297, axes=[1, 0, 2]) /* ty=Tensor[(50, 512, 64), float16] */;
    reshape(%298, newshape=[1600, 1024]) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16]) -> Tensor[(1600, 1024), float16] */;
  %1862 = %1861(%1860) /* ty=Tensor[(1600, 1024), float16] */;
  %1863 = fn (%p0167: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1115: Tensor[(1024, 1024), float16] /* ty=Tensor[(1024, 1024), float16] */, %p240: Tensor[(1, 1024), float16] /* ty=Tensor[(1, 1024), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %296 = nn.dense(%p0167, %p1115, units=1024, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */;
    add(%296, %p240) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024, 1024), float16], Tensor[(1, 1024), float16]) -> Tensor[(1600, 1024), float16] */;
  %1864 = %1863(%1862, meta[relay.Constant][200] /* ty=Tensor[(1024, 1024), float16] span=/encoder/layers/encoder_layer_16/self_attention/Gemm.encoder.layers.encoder_layer_16.self_attention.out_proj.weight:0:0 */, meta[relay.Constant][201] /* ty=Tensor[(1, 1024), float16] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1865 = fn (%p0166: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1114: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %294 = reshape(%p0166, newshape=[50, 32, 1024]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %295 = transpose(%294, axes=[1, 0, 2]) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%295, %p1114) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1866 = %1865(%1864, %1828) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1867 = fn (%p0165: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0165, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1868 = %1867(%1866) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1869 = fn (%p0602: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0602, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1870 = %1869(%1868) /* ty=Tensor[(32, 50, 1), float32] */;
  %1871 = fn (%p0164: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p1113: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0164, %p1113) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %1872 = %1871(%1868, %1870) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1873 = fn (%p0163: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %293 = power(%p0163, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%293, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1874 = %1873(%1872) /* ty=Tensor[(32, 50, 1), float32] */;
  %1875 = fn (%p0162: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p1112: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p239: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p315: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %287 = add(%p0162, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %288 = rsqrt(%287) /* ty=Tensor[(32, 50, 1), float32] */;
    %289 = multiply(%p1112, %288) /* ty=Tensor[(32, 50, 1024), float32] */;
    %290 = multiply(%289, %p239) /* ty=Tensor[(32, 50, 1024), float32] */;
    %291 = add(%290, %p315) /* ty=Tensor[(32, 50, 1024), float32] */;
    %292 = reshape(%291, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%292, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %1876 = %1875(%1874, %1872, meta[relay.Constant][202] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][203] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1877 = fn (%p0161: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1111: Tensor[(4096, 1024), float16] /* ty=Tensor[(4096, 1024), float16] */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    nn.dense(%p0161, %p1111, units=None, out_dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(4096, 1024), float16]) -> Tensor[(1600, 4096), float16] */;
  %1878 = %1877(%1876, meta[relay.Constant][204] /* ty=Tensor[(4096, 1024), float16] span=/encoder/layers/encoder_layer_16/mlp/mlp.0/MatMul:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1879 = fn (%p0160: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p1110: Tensor[(4096), float16] /* ty=Tensor[(4096), float16] */, %p238: float16 /* ty=float16 */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    %277 = reshape(%p0160, newshape=[32, 50, 4096]) /* ty=Tensor[(32, 50, 4096), float16] */;
    %278 = add(%p1110, %277) /* ty=Tensor[(32, 50, 4096), float16] */;
    %279 = divide(%278, %p238) /* ty=Tensor[(32, 50, 4096), float16] */;
    %280 = cast(%279, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %281 = erf(%280) /* ty=Tensor[(32, 50, 4096), float32] */;
    %282 = cast(%278, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %283 = add(%281, 1f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %284 = multiply(%282, %283) /* ty=Tensor[(32, 50, 4096), float32] */;
    %285 = multiply(%284, 0.5f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %286 = reshape(%285, newshape=[-1, 4096]) /* ty=Tensor[(1600, 4096), float32] */;
    cast(%286, dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(4096), float16], float16) -> Tensor[(1600, 4096), float16] */;
  %1880 = %1879(%1878, meta[relay.Constant][205] /* ty=Tensor[(4096), float16] span=/encoder/layers/encoder_layer_16/mlp/mlp.0/Add.encoder.layers.encoder_layer_16.mlp.0.bias:0:0 */, 1.41406f16 /* ty=float16 span=/encoder/layers/encoder_layer_16/mlp/mlp.1/Constant:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1881 = fn (%p0159: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p1109: Tensor[(1024, 4096), float16] /* ty=Tensor[(1024, 4096), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    nn.dense(%p0159, %p1109, units=None, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(1024, 4096), float16]) -> Tensor[(1600, 1024), float16] */;
  %1882 = %1881(%1880, meta[relay.Constant][206] /* ty=Tensor[(1024, 4096), float16] span=/encoder/layers/encoder_layer_16/mlp/mlp.3/MatMul:0:0 */) /* ty=Tensor[(1600, 1024), float16] */;
  %1883 = fn (%p0158: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1108: Tensor[(1024), float16] /* ty=Tensor[(1024), float16] */, %p237: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %275 = reshape(%p0158, newshape=[32, 50, 1024]) /* ty=Tensor[(32, 50, 1024), float16] */;
    %276 = add(%p1108, %275) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%p237, %276) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1884 = %1883(%1882, meta[relay.Constant][207] /* ty=Tensor[(1024), float16] span=/encoder/layers/encoder_layer_16/mlp/mlp.3/Add.encoder.layers.encoder_layer_16.mlp.3.bias:0:0 */, %1866) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1885 = fn (%p0157: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0157, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1886 = %1885(%1884) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1887 = fn (%p0603: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0603, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1888 = %1887(%1886) /* ty=Tensor[(32, 50, 1), float32] */;
  %1889 = fn (%p0156: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p1107: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0156, %p1107) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %1890 = %1889(%1886, %1888) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1891 = fn (%p0155: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %274 = power(%p0155, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%274, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1892 = %1891(%1890) /* ty=Tensor[(32, 50, 1), float32] */;
  %1893 = fn (%p0154: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p1106: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p236: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p314: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %267 = add(%p0154, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %268 = rsqrt(%267) /* ty=Tensor[(32, 50, 1), float32] */;
    %269 = multiply(%p1106, %268) /* ty=Tensor[(32, 50, 1024), float32] */;
    %270 = multiply(%269, %p236) /* ty=Tensor[(32, 50, 1024), float32] */;
    %271 = add(%270, %p314) /* ty=Tensor[(32, 50, 1024), float32] */;
    %272 = transpose(%271, axes=[1, 0, 2]) /* ty=Tensor[(50, 32, 1024), float32] */;
    %273 = reshape(%272, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%273, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %1894 = %1893(%1892, %1890, meta[relay.Constant][208] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][209] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1895 = fn (%p0153: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1105: Tensor[(3072, 1024), float16] /* ty=Tensor[(3072, 1024), float16] */, Primitive=1) -> Tensor[(1600, 3072), float16] {
    nn.dense(%p0153, %p1105, units=None, out_dtype="float16") /* ty=Tensor[(1600, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(3072, 1024), float16]) -> Tensor[(1600, 3072), float16] */;
  %1896 = %1895(%1894, meta[relay.Constant][210] /* ty=Tensor[(3072, 1024), float16] span=/encoder/layers/encoder_layer_17/self_attention/MatMul:0:0 */) /* ty=Tensor[(1600, 3072), float16] */;
  %1897 = fn (%p0152: Tensor[(1600, 3072), float16] /* ty=Tensor[(1600, 3072), float16] */, %p1104: Tensor[(3072), float16] /* ty=Tensor[(3072), float16] */, Primitive=1) -> Tensor[(50, 32, 3072), float16] {
    %266 = reshape(%p0152, newshape=[50, 32, 3072]) /* ty=Tensor[(50, 32, 3072), float16] */;
    add(%p1104, %266) /* ty=Tensor[(50, 32, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 3072), float16], Tensor[(3072), float16]) -> Tensor[(50, 32, 3072), float16] */;
  %1898 = %1897(%1896, meta[relay.Constant][211] /* ty=Tensor[(3072), float16] span=Identity_41:0:0 */) /* ty=Tensor[(50, 32, 3072), float16] */;
  %1899 = fn (%p0151: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, %p1103: float16 /* ty=float16 */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %263 = strided_slice(%p0151, begin=[0i64], end=[1024i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %264 = reshape(%263, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    %265 = transpose(%264, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */;
    divide(%265, %p1103) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16], float16) -> Tensor[(512, 50, 64), float16] */;
  %1902 = fn (%p0604: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %1900 = strided_slice(%p0604, begin=[1024i64], end=[2048i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1901 = reshape(%1900, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1901, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1903 = %1899(%1898, 8f16 /* ty=float16 span=/encoder/layers/encoder_layer_17/self_attention/Constant_14:0:0 */) /* ty=Tensor[(512, 50, 64), float16] */;
  %1904 = %1902(%1898) /* ty=Tensor[(512, 50, 64), float16] */;
  %1905 = fn (%p0150: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, %p1102: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    nn.batch_matmul(%p0150, %p1102, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16], Tensor[(512, 50, 64), float16]) -> Tensor[(512, 50, 50), float16] */;
  %1906 = %1905(%1903, %1904) /* ty=Tensor[(512, 50, 50), float16] */;
  %1907 = fn (%p0149: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float32] {
    %262 = reshape(%p0149, newshape=[512, 50, 50]) /* ty=Tensor[(512, 50, 50), float16] */;
    cast(%262, dtype="float32") /* ty=Tensor[(512, 50, 50), float32] */
  } /* ty=fn (Tensor[(512, 50, 50), float16]) -> Tensor[(512, 50, 50), float32] */;
  %1908 = %1907(%1906) /* ty=Tensor[(512, 50, 50), float32] */;
  %1909 = fn (%p0148: Tensor[(512, 50, 50), float32] /* ty=Tensor[(512, 50, 50), float32] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    %261 = nn.softmax(%p0148, axis=2) /* ty=Tensor[(512, 50, 50), float32] */;
    cast(%261, dtype="float16") /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float32]) -> Tensor[(512, 50, 50), float16] */;
  %1912 = fn (%p0605: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 64, 50), float16] {
    %1910 = strided_slice(%p0605, begin=[2048i64], end=[3072i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1911 = reshape(%1910, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1911, axes=[1, 2, 0]) /* ty=Tensor[(512, 64, 50), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 64, 50), float16] */;
  %1913 = %1909(%1908) /* ty=Tensor[(512, 50, 50), float16] */;
  %1914 = %1912(%1898) /* ty=Tensor[(512, 64, 50), float16] */;
  %1915 = fn (%p0147: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, %p1101: Tensor[(512, 64, 50), float16] /* ty=Tensor[(512, 64, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    nn.batch_matmul(%p0147, %p1101, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float16], Tensor[(512, 64, 50), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1916 = %1915(%1913, %1914) /* ty=Tensor[(512, 50, 64), float16] */;
  %1917 = fn (%p0146: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %259 = reshape(%p0146, newshape=[512, 50, 64]) /* ty=Tensor[(512, 50, 64), float16] */;
    %260 = transpose(%259, axes=[1, 0, 2]) /* ty=Tensor[(50, 512, 64), float16] */;
    reshape(%260, newshape=[1600, 1024]) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16]) -> Tensor[(1600, 1024), float16] */;
  %1918 = %1917(%1916) /* ty=Tensor[(1600, 1024), float16] */;
  %1919 = fn (%p0145: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p1100: Tensor[(1024, 1024), float16] /* ty=Tensor[(1024, 1024), float16] */, %p235: Tensor[(1, 1024), float16] /* ty=Tensor[(1, 1024), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %258 = nn.dense(%p0145, %p1100, units=1024, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */;
    add(%258, %p235) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024, 1024), float16], Tensor[(1, 1024), float16]) -> Tensor[(1600, 1024), float16] */;
  %1920 = %1919(%1918, meta[relay.Constant][212] /* ty=Tensor[(1024, 1024), float16] span=/encoder/layers/encoder_layer_17/self_attention/Gemm.encoder.layers.encoder_layer_17.self_attention.out_proj.weight:0:0 */, meta[relay.Constant][213] /* ty=Tensor[(1, 1024), float16] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1921 = fn (%p0144: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p199: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %256 = reshape(%p0144, newshape=[50, 32, 1024]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %257 = transpose(%256, axes=[1, 0, 2]) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%257, %p199) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1922 = %1921(%1920, %1884) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1923 = fn (%p0143: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0143, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1924 = %1923(%1922) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1925 = fn (%p0606: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0606, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1926 = %1925(%1924) /* ty=Tensor[(32, 50, 1), float32] */;
  %1927 = fn (%p0142: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p198: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0142, %p198) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %1928 = %1927(%1924, %1926) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1929 = fn (%p0141: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %255 = power(%p0141, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%255, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1930 = %1929(%1928) /* ty=Tensor[(32, 50, 1), float32] */;
  %1931 = fn (%p0140: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p197: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p234: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p313: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %249 = add(%p0140, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %250 = rsqrt(%249) /* ty=Tensor[(32, 50, 1), float32] */;
    %251 = multiply(%p197, %250) /* ty=Tensor[(32, 50, 1024), float32] */;
    %252 = multiply(%251, %p234) /* ty=Tensor[(32, 50, 1024), float32] */;
    %253 = add(%252, %p313) /* ty=Tensor[(32, 50, 1024), float32] */;
    %254 = reshape(%253, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%254, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %1932 = %1931(%1930, %1928, meta[relay.Constant][214] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][215] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1933 = fn (%p0139: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p196: Tensor[(4096, 1024), float16] /* ty=Tensor[(4096, 1024), float16] */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    nn.dense(%p0139, %p196, units=None, out_dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(4096, 1024), float16]) -> Tensor[(1600, 4096), float16] */;
  %1934 = %1933(%1932, meta[relay.Constant][216] /* ty=Tensor[(4096, 1024), float16] span=/encoder/layers/encoder_layer_17/mlp/mlp.0/MatMul:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1935 = fn (%p0138: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p195: Tensor[(4096), float16] /* ty=Tensor[(4096), float16] */, %p233: float16 /* ty=float16 */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    %239 = reshape(%p0138, newshape=[32, 50, 4096]) /* ty=Tensor[(32, 50, 4096), float16] */;
    %240 = add(%p195, %239) /* ty=Tensor[(32, 50, 4096), float16] */;
    %241 = divide(%240, %p233) /* ty=Tensor[(32, 50, 4096), float16] */;
    %242 = cast(%241, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %243 = erf(%242) /* ty=Tensor[(32, 50, 4096), float32] */;
    %244 = cast(%240, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %245 = add(%243, 1f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %246 = multiply(%244, %245) /* ty=Tensor[(32, 50, 4096), float32] */;
    %247 = multiply(%246, 0.5f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %248 = reshape(%247, newshape=[-1, 4096]) /* ty=Tensor[(1600, 4096), float32] */;
    cast(%248, dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(4096), float16], float16) -> Tensor[(1600, 4096), float16] */;
  %1936 = %1935(%1934, meta[relay.Constant][217] /* ty=Tensor[(4096), float16] span=/encoder/layers/encoder_layer_17/mlp/mlp.0/Add.encoder.layers.encoder_layer_17.mlp.0.bias:0:0 */, 1.41406f16 /* ty=float16 span=/encoder/layers/encoder_layer_17/mlp/mlp.1/Constant:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1937 = fn (%p0137: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p194: Tensor[(1024, 4096), float16] /* ty=Tensor[(1024, 4096), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    nn.dense(%p0137, %p194, units=None, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(1024, 4096), float16]) -> Tensor[(1600, 1024), float16] */;
  %1938 = %1937(%1936, meta[relay.Constant][218] /* ty=Tensor[(1024, 4096), float16] span=/encoder/layers/encoder_layer_17/mlp/mlp.3/MatMul:0:0 */) /* ty=Tensor[(1600, 1024), float16] */;
  %1939 = fn (%p0136: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p193: Tensor[(1024), float16] /* ty=Tensor[(1024), float16] */, %p232: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %237 = reshape(%p0136, newshape=[32, 50, 1024]) /* ty=Tensor[(32, 50, 1024), float16] */;
    %238 = add(%p193, %237) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%p232, %238) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1940 = %1939(%1938, meta[relay.Constant][219] /* ty=Tensor[(1024), float16] span=/encoder/layers/encoder_layer_17/mlp/mlp.3/Add.encoder.layers.encoder_layer_17.mlp.3.bias:0:0 */, %1922) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1941 = fn (%p0135: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0135, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1942 = %1941(%1940) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1943 = fn (%p0607: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0607, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1944 = %1943(%1942) /* ty=Tensor[(32, 50, 1), float32] */;
  %1945 = fn (%p0134: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p192: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0134, %p192) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %1946 = %1945(%1942, %1944) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1947 = fn (%p0133: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %236 = power(%p0133, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%236, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1948 = %1947(%1946) /* ty=Tensor[(32, 50, 1), float32] */;
  %1949 = fn (%p0132: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p191: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p231: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p312: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %229 = add(%p0132, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %230 = rsqrt(%229) /* ty=Tensor[(32, 50, 1), float32] */;
    %231 = multiply(%p191, %230) /* ty=Tensor[(32, 50, 1024), float32] */;
    %232 = multiply(%231, %p231) /* ty=Tensor[(32, 50, 1024), float32] */;
    %233 = add(%232, %p312) /* ty=Tensor[(32, 50, 1024), float32] */;
    %234 = transpose(%233, axes=[1, 0, 2]) /* ty=Tensor[(50, 32, 1024), float32] */;
    %235 = reshape(%234, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%235, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %1950 = %1949(%1948, %1946, meta[relay.Constant][220] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][221] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1951 = fn (%p0131: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p190: Tensor[(3072, 1024), float16] /* ty=Tensor[(3072, 1024), float16] */, Primitive=1) -> Tensor[(1600, 3072), float16] {
    nn.dense(%p0131, %p190, units=None, out_dtype="float16") /* ty=Tensor[(1600, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(3072, 1024), float16]) -> Tensor[(1600, 3072), float16] */;
  %1952 = %1951(%1950, meta[relay.Constant][222] /* ty=Tensor[(3072, 1024), float16] span=/encoder/layers/encoder_layer_18/self_attention/MatMul:0:0 */) /* ty=Tensor[(1600, 3072), float16] */;
  %1953 = fn (%p0130: Tensor[(1600, 3072), float16] /* ty=Tensor[(1600, 3072), float16] */, %p189: Tensor[(3072), float16] /* ty=Tensor[(3072), float16] */, Primitive=1) -> Tensor[(50, 32, 3072), float16] {
    %228 = reshape(%p0130, newshape=[50, 32, 3072]) /* ty=Tensor[(50, 32, 3072), float16] */;
    add(%p189, %228) /* ty=Tensor[(50, 32, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 3072), float16], Tensor[(3072), float16]) -> Tensor[(50, 32, 3072), float16] */;
  %1954 = %1953(%1952, meta[relay.Constant][223] /* ty=Tensor[(3072), float16] span=Identity_35:0:0 */) /* ty=Tensor[(50, 32, 3072), float16] */;
  %1955 = fn (%p0129: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, %p188: float16 /* ty=float16 */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %225 = strided_slice(%p0129, begin=[0i64], end=[1024i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %226 = reshape(%225, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    %227 = transpose(%226, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */;
    divide(%227, %p188) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16], float16) -> Tensor[(512, 50, 64), float16] */;
  %1958 = fn (%p0608: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %1956 = strided_slice(%p0608, begin=[1024i64], end=[2048i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1957 = reshape(%1956, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1957, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1959 = %1955(%1954, 8f16 /* ty=float16 span=/encoder/layers/encoder_layer_18/self_attention/Constant_14:0:0 */) /* ty=Tensor[(512, 50, 64), float16] */;
  %1960 = %1958(%1954) /* ty=Tensor[(512, 50, 64), float16] */;
  %1961 = fn (%p0128: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, %p187: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    nn.batch_matmul(%p0128, %p187, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16], Tensor[(512, 50, 64), float16]) -> Tensor[(512, 50, 50), float16] */;
  %1962 = %1961(%1959, %1960) /* ty=Tensor[(512, 50, 50), float16] */;
  %1963 = fn (%p0127: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float32] {
    %224 = reshape(%p0127, newshape=[512, 50, 50]) /* ty=Tensor[(512, 50, 50), float16] */;
    cast(%224, dtype="float32") /* ty=Tensor[(512, 50, 50), float32] */
  } /* ty=fn (Tensor[(512, 50, 50), float16]) -> Tensor[(512, 50, 50), float32] */;
  %1964 = %1963(%1962) /* ty=Tensor[(512, 50, 50), float32] */;
  %1965 = fn (%p0126: Tensor[(512, 50, 50), float32] /* ty=Tensor[(512, 50, 50), float32] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    %223 = nn.softmax(%p0126, axis=2) /* ty=Tensor[(512, 50, 50), float32] */;
    cast(%223, dtype="float16") /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float32]) -> Tensor[(512, 50, 50), float16] */;
  %1968 = fn (%p0609: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 64, 50), float16] {
    %1966 = strided_slice(%p0609, begin=[2048i64], end=[3072i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %1967 = reshape(%1966, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%1967, axes=[1, 2, 0]) /* ty=Tensor[(512, 64, 50), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 64, 50), float16] */;
  %1969 = %1965(%1964) /* ty=Tensor[(512, 50, 50), float16] */;
  %1970 = %1968(%1954) /* ty=Tensor[(512, 64, 50), float16] */;
  %1971 = fn (%p0125: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, %p186: Tensor[(512, 64, 50), float16] /* ty=Tensor[(512, 64, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    nn.batch_matmul(%p0125, %p186, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float16], Tensor[(512, 64, 50), float16]) -> Tensor[(512, 50, 64), float16] */;
  %1972 = %1971(%1969, %1970) /* ty=Tensor[(512, 50, 64), float16] */;
  %1973 = fn (%p0124: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %221 = reshape(%p0124, newshape=[512, 50, 64]) /* ty=Tensor[(512, 50, 64), float16] */;
    %222 = transpose(%221, axes=[1, 0, 2]) /* ty=Tensor[(50, 512, 64), float16] */;
    reshape(%222, newshape=[1600, 1024]) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16]) -> Tensor[(1600, 1024), float16] */;
  %1974 = %1973(%1972) /* ty=Tensor[(1600, 1024), float16] */;
  %1975 = fn (%p0123: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p185: Tensor[(1024, 1024), float16] /* ty=Tensor[(1024, 1024), float16] */, %p230: Tensor[(1, 1024), float16] /* ty=Tensor[(1, 1024), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %220 = nn.dense(%p0123, %p185, units=1024, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */;
    add(%220, %p230) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024, 1024), float16], Tensor[(1, 1024), float16]) -> Tensor[(1600, 1024), float16] */;
  %1976 = %1975(%1974, meta[relay.Constant][224] /* ty=Tensor[(1024, 1024), float16] span=/encoder/layers/encoder_layer_18/self_attention/Gemm.encoder.layers.encoder_layer_18.self_attention.out_proj.weight:0:0 */, meta[relay.Constant][225] /* ty=Tensor[(1, 1024), float16] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1977 = fn (%p0122: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p184: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %218 = reshape(%p0122, newshape=[50, 32, 1024]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %219 = transpose(%218, axes=[1, 0, 2]) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%219, %p184) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1978 = %1977(%1976, %1940) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1979 = fn (%p0121: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0121, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1980 = %1979(%1978) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1981 = fn (%p0610: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0610, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1982 = %1981(%1980) /* ty=Tensor[(32, 50, 1), float32] */;
  %1983 = fn (%p0120: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p183: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0120, %p183) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %1984 = %1983(%1980, %1982) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1985 = fn (%p0119: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %217 = power(%p0119, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%217, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %1986 = %1985(%1984) /* ty=Tensor[(32, 50, 1), float32] */;
  %1987 = fn (%p0118: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p182: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p229: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p311: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %211 = add(%p0118, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %212 = rsqrt(%211) /* ty=Tensor[(32, 50, 1), float32] */;
    %213 = multiply(%p182, %212) /* ty=Tensor[(32, 50, 1024), float32] */;
    %214 = multiply(%213, %p229) /* ty=Tensor[(32, 50, 1024), float32] */;
    %215 = add(%214, %p311) /* ty=Tensor[(32, 50, 1024), float32] */;
    %216 = reshape(%215, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%216, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %1988 = %1987(%1986, %1984, meta[relay.Constant][226] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][227] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %1989 = fn (%p0117: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p181: Tensor[(4096, 1024), float16] /* ty=Tensor[(4096, 1024), float16] */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    nn.dense(%p0117, %p181, units=None, out_dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(4096, 1024), float16]) -> Tensor[(1600, 4096), float16] */;
  %1990 = %1989(%1988, meta[relay.Constant][228] /* ty=Tensor[(4096, 1024), float16] span=/encoder/layers/encoder_layer_18/mlp/mlp.0/MatMul:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1991 = fn (%p0116: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p180: Tensor[(4096), float16] /* ty=Tensor[(4096), float16] */, %p228: float16 /* ty=float16 */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    %201 = reshape(%p0116, newshape=[32, 50, 4096]) /* ty=Tensor[(32, 50, 4096), float16] */;
    %202 = add(%p180, %201) /* ty=Tensor[(32, 50, 4096), float16] */;
    %203 = divide(%202, %p228) /* ty=Tensor[(32, 50, 4096), float16] */;
    %204 = cast(%203, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %205 = erf(%204) /* ty=Tensor[(32, 50, 4096), float32] */;
    %206 = cast(%202, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %207 = add(%205, 1f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %208 = multiply(%206, %207) /* ty=Tensor[(32, 50, 4096), float32] */;
    %209 = multiply(%208, 0.5f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %210 = reshape(%209, newshape=[-1, 4096]) /* ty=Tensor[(1600, 4096), float32] */;
    cast(%210, dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(4096), float16], float16) -> Tensor[(1600, 4096), float16] */;
  %1992 = %1991(%1990, meta[relay.Constant][229] /* ty=Tensor[(4096), float16] span=/encoder/layers/encoder_layer_18/mlp/mlp.0/Add.encoder.layers.encoder_layer_18.mlp.0.bias:0:0 */, 1.41406f16 /* ty=float16 span=/encoder/layers/encoder_layer_18/mlp/mlp.1/Constant:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %1993 = fn (%p0115: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p179: Tensor[(1024, 4096), float16] /* ty=Tensor[(1024, 4096), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    nn.dense(%p0115, %p179, units=None, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(1024, 4096), float16]) -> Tensor[(1600, 1024), float16] */;
  %1994 = %1993(%1992, meta[relay.Constant][230] /* ty=Tensor[(1024, 4096), float16] span=/encoder/layers/encoder_layer_18/mlp/mlp.3/MatMul:0:0 */) /* ty=Tensor[(1600, 1024), float16] */;
  %1995 = fn (%p0114: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p178: Tensor[(1024), float16] /* ty=Tensor[(1024), float16] */, %p227: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %199 = reshape(%p0114, newshape=[32, 50, 1024]) /* ty=Tensor[(32, 50, 1024), float16] */;
    %200 = add(%p178, %199) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%p227, %200) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %1996 = %1995(%1994, meta[relay.Constant][231] /* ty=Tensor[(1024), float16] span=/encoder/layers/encoder_layer_18/mlp/mlp.3/Add.encoder.layers.encoder_layer_18.mlp.3.bias:0:0 */, %1978) /* ty=Tensor[(32, 50, 1024), float16] */;
  %1997 = fn (%p0113: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p0113, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %1998 = %1997(%1996) /* ty=Tensor[(32, 50, 1024), float32] */;
  %1999 = fn (%p0611: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0611, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %2000 = %1999(%1998) /* ty=Tensor[(32, 50, 1), float32] */;
  %2001 = fn (%p0112: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p177: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p0112, %p177) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %2002 = %2001(%1998, %2000) /* ty=Tensor[(32, 50, 1024), float32] */;
  %2003 = fn (%p0111: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %198 = power(%p0111, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%198, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %2004 = %2003(%2002) /* ty=Tensor[(32, 50, 1), float32] */;
  %2005 = fn (%p0110: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p176: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p226: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p310: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %191 = add(%p0110, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %192 = rsqrt(%191) /* ty=Tensor[(32, 50, 1), float32] */;
    %193 = multiply(%p176, %192) /* ty=Tensor[(32, 50, 1024), float32] */;
    %194 = multiply(%193, %p226) /* ty=Tensor[(32, 50, 1024), float32] */;
    %195 = add(%194, %p310) /* ty=Tensor[(32, 50, 1024), float32] */;
    %196 = transpose(%195, axes=[1, 0, 2]) /* ty=Tensor[(50, 32, 1024), float32] */;
    %197 = reshape(%196, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%197, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %2006 = %2005(%2004, %2002, meta[relay.Constant][232] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][233] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %2007 = fn (%p0109: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p175: Tensor[(3072, 1024), float16] /* ty=Tensor[(3072, 1024), float16] */, Primitive=1) -> Tensor[(1600, 3072), float16] {
    nn.dense(%p0109, %p175, units=None, out_dtype="float16") /* ty=Tensor[(1600, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(3072, 1024), float16]) -> Tensor[(1600, 3072), float16] */;
  %2008 = %2007(%2006, meta[relay.Constant][234] /* ty=Tensor[(3072, 1024), float16] span=/encoder/layers/encoder_layer_19/self_attention/MatMul:0:0 */) /* ty=Tensor[(1600, 3072), float16] */;
  %2009 = fn (%p0108: Tensor[(1600, 3072), float16] /* ty=Tensor[(1600, 3072), float16] */, %p174: Tensor[(3072), float16] /* ty=Tensor[(3072), float16] */, Primitive=1) -> Tensor[(50, 32, 3072), float16] {
    %190 = reshape(%p0108, newshape=[50, 32, 3072]) /* ty=Tensor[(50, 32, 3072), float16] */;
    add(%p174, %190) /* ty=Tensor[(50, 32, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 3072), float16], Tensor[(3072), float16]) -> Tensor[(50, 32, 3072), float16] */;
  %2010 = %2009(%2008, meta[relay.Constant][235] /* ty=Tensor[(3072), float16] span=Identity_29:0:0 */) /* ty=Tensor[(50, 32, 3072), float16] */;
  %2011 = fn (%p0107: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, %p173: float16 /* ty=float16 */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %187 = strided_slice(%p0107, begin=[0i64], end=[1024i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %188 = reshape(%187, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    %189 = transpose(%188, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */;
    divide(%189, %p173) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16], float16) -> Tensor[(512, 50, 64), float16] */;
  %2014 = fn (%p0612: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %2012 = strided_slice(%p0612, begin=[1024i64], end=[2048i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %2013 = reshape(%2012, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%2013, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 50, 64), float16] */;
  %2015 = %2011(%2010, 8f16 /* ty=float16 span=/encoder/layers/encoder_layer_19/self_attention/Constant_14:0:0 */) /* ty=Tensor[(512, 50, 64), float16] */;
  %2016 = %2014(%2010) /* ty=Tensor[(512, 50, 64), float16] */;
  %2017 = fn (%p0106: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, %p172: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    nn.batch_matmul(%p0106, %p172, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16], Tensor[(512, 50, 64), float16]) -> Tensor[(512, 50, 50), float16] */;
  %2018 = %2017(%2015, %2016) /* ty=Tensor[(512, 50, 50), float16] */;
  %2019 = fn (%p0105: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float32] {
    %186 = reshape(%p0105, newshape=[512, 50, 50]) /* ty=Tensor[(512, 50, 50), float16] */;
    cast(%186, dtype="float32") /* ty=Tensor[(512, 50, 50), float32] */
  } /* ty=fn (Tensor[(512, 50, 50), float16]) -> Tensor[(512, 50, 50), float32] */;
  %2020 = %2019(%2018) /* ty=Tensor[(512, 50, 50), float32] */;
  %2021 = fn (%p0104: Tensor[(512, 50, 50), float32] /* ty=Tensor[(512, 50, 50), float32] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    %185 = nn.softmax(%p0104, axis=2) /* ty=Tensor[(512, 50, 50), float32] */;
    cast(%185, dtype="float16") /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float32]) -> Tensor[(512, 50, 50), float16] */;
  %2024 = fn (%p0613: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 64, 50), float16] {
    %2022 = strided_slice(%p0613, begin=[2048i64], end=[3072i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %2023 = reshape(%2022, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%2023, axes=[1, 2, 0]) /* ty=Tensor[(512, 64, 50), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 64, 50), float16] */;
  %2025 = %2021(%2020) /* ty=Tensor[(512, 50, 50), float16] */;
  %2026 = %2024(%2010) /* ty=Tensor[(512, 64, 50), float16] */;
  %2027 = fn (%p0103: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, %p171: Tensor[(512, 64, 50), float16] /* ty=Tensor[(512, 64, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    nn.batch_matmul(%p0103, %p171, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float16], Tensor[(512, 64, 50), float16]) -> Tensor[(512, 50, 64), float16] */;
  %2028 = %2027(%2025, %2026) /* ty=Tensor[(512, 50, 64), float16] */;
  %2029 = fn (%p0102: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %183 = reshape(%p0102, newshape=[512, 50, 64]) /* ty=Tensor[(512, 50, 64), float16] */;
    %184 = transpose(%183, axes=[1, 0, 2]) /* ty=Tensor[(50, 512, 64), float16] */;
    reshape(%184, newshape=[1600, 1024]) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16]) -> Tensor[(1600, 1024), float16] */;
  %2030 = %2029(%2028) /* ty=Tensor[(1600, 1024), float16] */;
  %2031 = fn (%p0101: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p170: Tensor[(1024, 1024), float16] /* ty=Tensor[(1024, 1024), float16] */, %p225: Tensor[(1, 1024), float16] /* ty=Tensor[(1, 1024), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %182 = nn.dense(%p0101, %p170, units=1024, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */;
    add(%182, %p225) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024, 1024), float16], Tensor[(1, 1024), float16]) -> Tensor[(1600, 1024), float16] */;
  %2032 = %2031(%2030, meta[relay.Constant][236] /* ty=Tensor[(1024, 1024), float16] span=/encoder/layers/encoder_layer_19/self_attention/Gemm.encoder.layers.encoder_layer_19.self_attention.out_proj.weight:0:0 */, meta[relay.Constant][237] /* ty=Tensor[(1, 1024), float16] */) /* ty=Tensor[(1600, 1024), float16] */;
  %2033 = fn (%p0100: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p169: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %180 = reshape(%p0100, newshape=[50, 32, 1024]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %181 = transpose(%180, axes=[1, 0, 2]) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%181, %p169) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %2034 = %2033(%2032, %1996) /* ty=Tensor[(32, 50, 1024), float16] */;
  %2035 = fn (%p099: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p099, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %2036 = %2035(%2034) /* ty=Tensor[(32, 50, 1024), float32] */;
  %2037 = fn (%p0614: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0614, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %2038 = %2037(%2036) /* ty=Tensor[(32, 50, 1), float32] */;
  %2039 = fn (%p098: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p168: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p098, %p168) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %2040 = %2039(%2036, %2038) /* ty=Tensor[(32, 50, 1024), float32] */;
  %2041 = fn (%p097: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %179 = power(%p097, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%179, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %2042 = %2041(%2040) /* ty=Tensor[(32, 50, 1), float32] */;
  %2043 = fn (%p096: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p167: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p224: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p39: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %173 = add(%p096, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %174 = rsqrt(%173) /* ty=Tensor[(32, 50, 1), float32] */;
    %175 = multiply(%p167, %174) /* ty=Tensor[(32, 50, 1024), float32] */;
    %176 = multiply(%175, %p224) /* ty=Tensor[(32, 50, 1024), float32] */;
    %177 = add(%176, %p39) /* ty=Tensor[(32, 50, 1024), float32] */;
    %178 = reshape(%177, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%178, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %2044 = %2043(%2042, %2040, meta[relay.Constant][238] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][239] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %2045 = fn (%p095: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p166: Tensor[(4096, 1024), float16] /* ty=Tensor[(4096, 1024), float16] */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    nn.dense(%p095, %p166, units=None, out_dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(4096, 1024), float16]) -> Tensor[(1600, 4096), float16] */;
  %2046 = %2045(%2044, meta[relay.Constant][240] /* ty=Tensor[(4096, 1024), float16] span=/encoder/layers/encoder_layer_19/mlp/mlp.0/MatMul:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %2047 = fn (%p094: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p165: Tensor[(4096), float16] /* ty=Tensor[(4096), float16] */, %p223: float16 /* ty=float16 */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    %163 = reshape(%p094, newshape=[32, 50, 4096]) /* ty=Tensor[(32, 50, 4096), float16] */;
    %164 = add(%p165, %163) /* ty=Tensor[(32, 50, 4096), float16] */;
    %165 = divide(%164, %p223) /* ty=Tensor[(32, 50, 4096), float16] */;
    %166 = cast(%165, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %167 = erf(%166) /* ty=Tensor[(32, 50, 4096), float32] */;
    %168 = cast(%164, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %169 = add(%167, 1f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %170 = multiply(%168, %169) /* ty=Tensor[(32, 50, 4096), float32] */;
    %171 = multiply(%170, 0.5f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %172 = reshape(%171, newshape=[-1, 4096]) /* ty=Tensor[(1600, 4096), float32] */;
    cast(%172, dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(4096), float16], float16) -> Tensor[(1600, 4096), float16] */;
  %2048 = %2047(%2046, meta[relay.Constant][241] /* ty=Tensor[(4096), float16] span=/encoder/layers/encoder_layer_19/mlp/mlp.0/Add.encoder.layers.encoder_layer_19.mlp.0.bias:0:0 */, 1.41406f16 /* ty=float16 span=/encoder/layers/encoder_layer_19/mlp/mlp.1/Constant:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %2049 = fn (%p093: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p164: Tensor[(1024, 4096), float16] /* ty=Tensor[(1024, 4096), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    nn.dense(%p093, %p164, units=None, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(1024, 4096), float16]) -> Tensor[(1600, 1024), float16] */;
  %2050 = %2049(%2048, meta[relay.Constant][242] /* ty=Tensor[(1024, 4096), float16] span=/encoder/layers/encoder_layer_19/mlp/mlp.3/MatMul:0:0 */) /* ty=Tensor[(1600, 1024), float16] */;
  %2051 = fn (%p092: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p163: Tensor[(1024), float16] /* ty=Tensor[(1024), float16] */, %p222: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %161 = reshape(%p092, newshape=[32, 50, 1024]) /* ty=Tensor[(32, 50, 1024), float16] */;
    %162 = add(%p163, %161) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%p222, %162) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %2052 = %2051(%2050, meta[relay.Constant][243] /* ty=Tensor[(1024), float16] span=/encoder/layers/encoder_layer_19/mlp/mlp.3/Add.encoder.layers.encoder_layer_19.mlp.3.bias:0:0 */, %2034) /* ty=Tensor[(32, 50, 1024), float16] */;
  %2053 = fn (%p091: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p091, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %2054 = %2053(%2052) /* ty=Tensor[(32, 50, 1024), float32] */;
  %2055 = fn (%p0615: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0615, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %2056 = %2055(%2054) /* ty=Tensor[(32, 50, 1), float32] */;
  %2057 = fn (%p090: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p162: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p090, %p162) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %2058 = %2057(%2054, %2056) /* ty=Tensor[(32, 50, 1024), float32] */;
  %2059 = fn (%p089: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %160 = power(%p089, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%160, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %2060 = %2059(%2058) /* ty=Tensor[(32, 50, 1), float32] */;
  %2061 = fn (%p088: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p161: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p221: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p38: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %153 = add(%p088, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %154 = rsqrt(%153) /* ty=Tensor[(32, 50, 1), float32] */;
    %155 = multiply(%p161, %154) /* ty=Tensor[(32, 50, 1024), float32] */;
    %156 = multiply(%155, %p221) /* ty=Tensor[(32, 50, 1024), float32] */;
    %157 = add(%156, %p38) /* ty=Tensor[(32, 50, 1024), float32] */;
    %158 = transpose(%157, axes=[1, 0, 2]) /* ty=Tensor[(50, 32, 1024), float32] */;
    %159 = reshape(%158, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%159, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %2062 = %2061(%2060, %2058, meta[relay.Constant][244] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][245] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %2063 = fn (%p087: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p160: Tensor[(3072, 1024), float16] /* ty=Tensor[(3072, 1024), float16] */, Primitive=1) -> Tensor[(1600, 3072), float16] {
    nn.dense(%p087, %p160, units=None, out_dtype="float16") /* ty=Tensor[(1600, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(3072, 1024), float16]) -> Tensor[(1600, 3072), float16] */;
  %2064 = %2063(%2062, meta[relay.Constant][246] /* ty=Tensor[(3072, 1024), float16] span=/encoder/layers/encoder_layer_20/self_attention/MatMul:0:0 */) /* ty=Tensor[(1600, 3072), float16] */;
  %2065 = fn (%p086: Tensor[(1600, 3072), float16] /* ty=Tensor[(1600, 3072), float16] */, %p159: Tensor[(3072), float16] /* ty=Tensor[(3072), float16] */, Primitive=1) -> Tensor[(50, 32, 3072), float16] {
    %152 = reshape(%p086, newshape=[50, 32, 3072]) /* ty=Tensor[(50, 32, 3072), float16] */;
    add(%p159, %152) /* ty=Tensor[(50, 32, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 3072), float16], Tensor[(3072), float16]) -> Tensor[(50, 32, 3072), float16] */;
  %2066 = %2065(%2064, meta[relay.Constant][247] /* ty=Tensor[(3072), float16] span=Identity_23:0:0 */) /* ty=Tensor[(50, 32, 3072), float16] */;
  %2067 = fn (%p085: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, %p158: float16 /* ty=float16 */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %149 = strided_slice(%p085, begin=[0i64], end=[1024i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %150 = reshape(%149, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    %151 = transpose(%150, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */;
    divide(%151, %p158) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16], float16) -> Tensor[(512, 50, 64), float16] */;
  %2070 = fn (%p0616: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %2068 = strided_slice(%p0616, begin=[1024i64], end=[2048i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %2069 = reshape(%2068, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%2069, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 50, 64), float16] */;
  %2071 = %2067(%2066, 8f16 /* ty=float16 span=/encoder/layers/encoder_layer_20/self_attention/Constant_14:0:0 */) /* ty=Tensor[(512, 50, 64), float16] */;
  %2072 = %2070(%2066) /* ty=Tensor[(512, 50, 64), float16] */;
  %2073 = fn (%p084: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, %p157: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    nn.batch_matmul(%p084, %p157, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16], Tensor[(512, 50, 64), float16]) -> Tensor[(512, 50, 50), float16] */;
  %2074 = %2073(%2071, %2072) /* ty=Tensor[(512, 50, 50), float16] */;
  %2075 = fn (%p083: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float32] {
    %148 = reshape(%p083, newshape=[512, 50, 50]) /* ty=Tensor[(512, 50, 50), float16] */;
    cast(%148, dtype="float32") /* ty=Tensor[(512, 50, 50), float32] */
  } /* ty=fn (Tensor[(512, 50, 50), float16]) -> Tensor[(512, 50, 50), float32] */;
  %2076 = %2075(%2074) /* ty=Tensor[(512, 50, 50), float32] */;
  %2077 = fn (%p082: Tensor[(512, 50, 50), float32] /* ty=Tensor[(512, 50, 50), float32] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    %147 = nn.softmax(%p082, axis=2) /* ty=Tensor[(512, 50, 50), float32] */;
    cast(%147, dtype="float16") /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float32]) -> Tensor[(512, 50, 50), float16] */;
  %2080 = fn (%p0617: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 64, 50), float16] {
    %2078 = strided_slice(%p0617, begin=[2048i64], end=[3072i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %2079 = reshape(%2078, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%2079, axes=[1, 2, 0]) /* ty=Tensor[(512, 64, 50), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 64, 50), float16] */;
  %2081 = %2077(%2076) /* ty=Tensor[(512, 50, 50), float16] */;
  %2082 = %2080(%2066) /* ty=Tensor[(512, 64, 50), float16] */;
  %2083 = fn (%p081: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, %p156: Tensor[(512, 64, 50), float16] /* ty=Tensor[(512, 64, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    nn.batch_matmul(%p081, %p156, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float16], Tensor[(512, 64, 50), float16]) -> Tensor[(512, 50, 64), float16] */;
  %2084 = %2083(%2081, %2082) /* ty=Tensor[(512, 50, 64), float16] */;
  %2085 = fn (%p080: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %145 = reshape(%p080, newshape=[512, 50, 64]) /* ty=Tensor[(512, 50, 64), float16] */;
    %146 = transpose(%145, axes=[1, 0, 2]) /* ty=Tensor[(50, 512, 64), float16] */;
    reshape(%146, newshape=[1600, 1024]) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16]) -> Tensor[(1600, 1024), float16] */;
  %2086 = %2085(%2084) /* ty=Tensor[(1600, 1024), float16] */;
  %2087 = fn (%p079: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p155: Tensor[(1024, 1024), float16] /* ty=Tensor[(1024, 1024), float16] */, %p220: Tensor[(1, 1024), float16] /* ty=Tensor[(1, 1024), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %144 = nn.dense(%p079, %p155, units=1024, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */;
    add(%144, %p220) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024, 1024), float16], Tensor[(1, 1024), float16]) -> Tensor[(1600, 1024), float16] */;
  %2088 = %2087(%2086, meta[relay.Constant][248] /* ty=Tensor[(1024, 1024), float16] span=/encoder/layers/encoder_layer_20/self_attention/Gemm.encoder.layers.encoder_layer_20.self_attention.out_proj.weight:0:0 */, meta[relay.Constant][249] /* ty=Tensor[(1, 1024), float16] */) /* ty=Tensor[(1600, 1024), float16] */;
  %2089 = fn (%p078: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p154: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %142 = reshape(%p078, newshape=[50, 32, 1024]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %143 = transpose(%142, axes=[1, 0, 2]) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%143, %p154) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %2090 = %2089(%2088, %2052) /* ty=Tensor[(32, 50, 1024), float16] */;
  %2091 = fn (%p077: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p077, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %2092 = %2091(%2090) /* ty=Tensor[(32, 50, 1024), float32] */;
  %2093 = fn (%p0618: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0618, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %2094 = %2093(%2092) /* ty=Tensor[(32, 50, 1), float32] */;
  %2095 = fn (%p076: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p153: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p076, %p153) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %2096 = %2095(%2092, %2094) /* ty=Tensor[(32, 50, 1024), float32] */;
  %2097 = fn (%p075: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %141 = power(%p075, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%141, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %2098 = %2097(%2096) /* ty=Tensor[(32, 50, 1), float32] */;
  %2099 = fn (%p074: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p152: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p219: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p37: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %135 = add(%p074, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %136 = rsqrt(%135) /* ty=Tensor[(32, 50, 1), float32] */;
    %137 = multiply(%p152, %136) /* ty=Tensor[(32, 50, 1024), float32] */;
    %138 = multiply(%137, %p219) /* ty=Tensor[(32, 50, 1024), float32] */;
    %139 = add(%138, %p37) /* ty=Tensor[(32, 50, 1024), float32] */;
    %140 = reshape(%139, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%140, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %2100 = %2099(%2098, %2096, meta[relay.Constant][250] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][251] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %2101 = fn (%p073: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p151: Tensor[(4096, 1024), float16] /* ty=Tensor[(4096, 1024), float16] */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    nn.dense(%p073, %p151, units=None, out_dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(4096, 1024), float16]) -> Tensor[(1600, 4096), float16] */;
  %2102 = %2101(%2100, meta[relay.Constant][252] /* ty=Tensor[(4096, 1024), float16] span=/encoder/layers/encoder_layer_20/mlp/mlp.0/MatMul:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %2103 = fn (%p072: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p150: Tensor[(4096), float16] /* ty=Tensor[(4096), float16] */, %p218: float16 /* ty=float16 */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    %125 = reshape(%p072, newshape=[32, 50, 4096]) /* ty=Tensor[(32, 50, 4096), float16] */;
    %126 = add(%p150, %125) /* ty=Tensor[(32, 50, 4096), float16] */;
    %127 = divide(%126, %p218) /* ty=Tensor[(32, 50, 4096), float16] */;
    %128 = cast(%127, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %129 = erf(%128) /* ty=Tensor[(32, 50, 4096), float32] */;
    %130 = cast(%126, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %131 = add(%129, 1f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %132 = multiply(%130, %131) /* ty=Tensor[(32, 50, 4096), float32] */;
    %133 = multiply(%132, 0.5f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %134 = reshape(%133, newshape=[-1, 4096]) /* ty=Tensor[(1600, 4096), float32] */;
    cast(%134, dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(4096), float16], float16) -> Tensor[(1600, 4096), float16] */;
  %2104 = %2103(%2102, meta[relay.Constant][253] /* ty=Tensor[(4096), float16] span=/encoder/layers/encoder_layer_20/mlp/mlp.0/Add.encoder.layers.encoder_layer_20.mlp.0.bias:0:0 */, 1.41406f16 /* ty=float16 span=/encoder/layers/encoder_layer_20/mlp/mlp.1/Constant:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %2105 = fn (%p071: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p149: Tensor[(1024, 4096), float16] /* ty=Tensor[(1024, 4096), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    nn.dense(%p071, %p149, units=None, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(1024, 4096), float16]) -> Tensor[(1600, 1024), float16] */;
  %2106 = %2105(%2104, meta[relay.Constant][254] /* ty=Tensor[(1024, 4096), float16] span=/encoder/layers/encoder_layer_20/mlp/mlp.3/MatMul:0:0 */) /* ty=Tensor[(1600, 1024), float16] */;
  %2107 = fn (%p070: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p148: Tensor[(1024), float16] /* ty=Tensor[(1024), float16] */, %p217: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %123 = reshape(%p070, newshape=[32, 50, 1024]) /* ty=Tensor[(32, 50, 1024), float16] */;
    %124 = add(%p148, %123) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%p217, %124) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %2108 = %2107(%2106, meta[relay.Constant][255] /* ty=Tensor[(1024), float16] span=/encoder/layers/encoder_layer_20/mlp/mlp.3/Add.encoder.layers.encoder_layer_20.mlp.3.bias:0:0 */, %2090) /* ty=Tensor[(32, 50, 1024), float16] */;
  %2109 = fn (%p069: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p069, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %2110 = %2109(%2108) /* ty=Tensor[(32, 50, 1024), float32] */;
  %2111 = fn (%p0619: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0619, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %2112 = %2111(%2110) /* ty=Tensor[(32, 50, 1), float32] */;
  %2113 = fn (%p068: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p147: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p068, %p147) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %2114 = %2113(%2110, %2112) /* ty=Tensor[(32, 50, 1024), float32] */;
  %2115 = fn (%p067: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %122 = power(%p067, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%122, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %2116 = %2115(%2114) /* ty=Tensor[(32, 50, 1), float32] */;
  %2117 = fn (%p066: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p146: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p216: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p36: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %115 = add(%p066, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %116 = rsqrt(%115) /* ty=Tensor[(32, 50, 1), float32] */;
    %117 = multiply(%p146, %116) /* ty=Tensor[(32, 50, 1024), float32] */;
    %118 = multiply(%117, %p216) /* ty=Tensor[(32, 50, 1024), float32] */;
    %119 = add(%118, %p36) /* ty=Tensor[(32, 50, 1024), float32] */;
    %120 = transpose(%119, axes=[1, 0, 2]) /* ty=Tensor[(50, 32, 1024), float32] */;
    %121 = reshape(%120, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%121, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %2118 = %2117(%2116, %2114, meta[relay.Constant][256] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][257] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %2119 = fn (%p065: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p145: Tensor[(3072, 1024), float16] /* ty=Tensor[(3072, 1024), float16] */, Primitive=1) -> Tensor[(1600, 3072), float16] {
    nn.dense(%p065, %p145, units=None, out_dtype="float16") /* ty=Tensor[(1600, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(3072, 1024), float16]) -> Tensor[(1600, 3072), float16] */;
  %2120 = %2119(%2118, meta[relay.Constant][258] /* ty=Tensor[(3072, 1024), float16] span=/encoder/layers/encoder_layer_21/self_attention/MatMul:0:0 */) /* ty=Tensor[(1600, 3072), float16] */;
  %2121 = fn (%p064: Tensor[(1600, 3072), float16] /* ty=Tensor[(1600, 3072), float16] */, %p144: Tensor[(3072), float16] /* ty=Tensor[(3072), float16] */, Primitive=1) -> Tensor[(50, 32, 3072), float16] {
    %114 = reshape(%p064, newshape=[50, 32, 3072]) /* ty=Tensor[(50, 32, 3072), float16] */;
    add(%p144, %114) /* ty=Tensor[(50, 32, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 3072), float16], Tensor[(3072), float16]) -> Tensor[(50, 32, 3072), float16] */;
  %2122 = %2121(%2120, meta[relay.Constant][259] /* ty=Tensor[(3072), float16] span=Identity_17:0:0 */) /* ty=Tensor[(50, 32, 3072), float16] */;
  %2123 = fn (%p063: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, %p143: float16 /* ty=float16 */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %111 = strided_slice(%p063, begin=[0i64], end=[1024i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %112 = reshape(%111, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    %113 = transpose(%112, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */;
    divide(%113, %p143) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16], float16) -> Tensor[(512, 50, 64), float16] */;
  %2126 = fn (%p0620: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %2124 = strided_slice(%p0620, begin=[1024i64], end=[2048i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %2125 = reshape(%2124, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%2125, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 50, 64), float16] */;
  %2127 = %2123(%2122, 8f16 /* ty=float16 span=/encoder/layers/encoder_layer_21/self_attention/Constant_14:0:0 */) /* ty=Tensor[(512, 50, 64), float16] */;
  %2128 = %2126(%2122) /* ty=Tensor[(512, 50, 64), float16] */;
  %2129 = fn (%p062: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, %p142: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    nn.batch_matmul(%p062, %p142, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16], Tensor[(512, 50, 64), float16]) -> Tensor[(512, 50, 50), float16] */;
  %2130 = %2129(%2127, %2128) /* ty=Tensor[(512, 50, 50), float16] */;
  %2131 = fn (%p061: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float32] {
    %110 = reshape(%p061, newshape=[512, 50, 50]) /* ty=Tensor[(512, 50, 50), float16] */;
    cast(%110, dtype="float32") /* ty=Tensor[(512, 50, 50), float32] */
  } /* ty=fn (Tensor[(512, 50, 50), float16]) -> Tensor[(512, 50, 50), float32] */;
  %2132 = %2131(%2130) /* ty=Tensor[(512, 50, 50), float32] */;
  %2133 = fn (%p060: Tensor[(512, 50, 50), float32] /* ty=Tensor[(512, 50, 50), float32] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    %109 = nn.softmax(%p060, axis=2) /* ty=Tensor[(512, 50, 50), float32] */;
    cast(%109, dtype="float16") /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float32]) -> Tensor[(512, 50, 50), float16] */;
  %2136 = fn (%p0621: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 64, 50), float16] {
    %2134 = strided_slice(%p0621, begin=[2048i64], end=[3072i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %2135 = reshape(%2134, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%2135, axes=[1, 2, 0]) /* ty=Tensor[(512, 64, 50), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 64, 50), float16] */;
  %2137 = %2133(%2132) /* ty=Tensor[(512, 50, 50), float16] */;
  %2138 = %2136(%2122) /* ty=Tensor[(512, 64, 50), float16] */;
  %2139 = fn (%p059: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, %p141: Tensor[(512, 64, 50), float16] /* ty=Tensor[(512, 64, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    nn.batch_matmul(%p059, %p141, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float16], Tensor[(512, 64, 50), float16]) -> Tensor[(512, 50, 64), float16] */;
  %2140 = %2139(%2137, %2138) /* ty=Tensor[(512, 50, 64), float16] */;
  %2141 = fn (%p058: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %107 = reshape(%p058, newshape=[512, 50, 64]) /* ty=Tensor[(512, 50, 64), float16] */;
    %108 = transpose(%107, axes=[1, 0, 2]) /* ty=Tensor[(50, 512, 64), float16] */;
    reshape(%108, newshape=[1600, 1024]) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16]) -> Tensor[(1600, 1024), float16] */;
  %2142 = %2141(%2140) /* ty=Tensor[(1600, 1024), float16] */;
  %2143 = fn (%p057: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p140: Tensor[(1024, 1024), float16] /* ty=Tensor[(1024, 1024), float16] */, %p215: Tensor[(1, 1024), float16] /* ty=Tensor[(1, 1024), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %106 = nn.dense(%p057, %p140, units=1024, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */;
    add(%106, %p215) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024, 1024), float16], Tensor[(1, 1024), float16]) -> Tensor[(1600, 1024), float16] */;
  %2144 = %2143(%2142, meta[relay.Constant][260] /* ty=Tensor[(1024, 1024), float16] span=/encoder/layers/encoder_layer_21/self_attention/Gemm.encoder.layers.encoder_layer_21.self_attention.out_proj.weight:0:0 */, meta[relay.Constant][261] /* ty=Tensor[(1, 1024), float16] */) /* ty=Tensor[(1600, 1024), float16] */;
  %2145 = fn (%p056: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p139: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %104 = reshape(%p056, newshape=[50, 32, 1024]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %105 = transpose(%104, axes=[1, 0, 2]) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%105, %p139) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %2146 = %2145(%2144, %2108) /* ty=Tensor[(32, 50, 1024), float16] */;
  %2147 = fn (%p055: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p055, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %2148 = %2147(%2146) /* ty=Tensor[(32, 50, 1024), float32] */;
  %2149 = fn (%p0622: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0622, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %2150 = %2149(%2148) /* ty=Tensor[(32, 50, 1), float32] */;
  %2151 = fn (%p054: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p138: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p054, %p138) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %2152 = %2151(%2148, %2150) /* ty=Tensor[(32, 50, 1024), float32] */;
  %2153 = fn (%p053: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %103 = power(%p053, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%103, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %2154 = %2153(%2152) /* ty=Tensor[(32, 50, 1), float32] */;
  %2155 = fn (%p052: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p137: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p214: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p35: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %97 = add(%p052, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %98 = rsqrt(%97) /* ty=Tensor[(32, 50, 1), float32] */;
    %99 = multiply(%p137, %98) /* ty=Tensor[(32, 50, 1024), float32] */;
    %100 = multiply(%99, %p214) /* ty=Tensor[(32, 50, 1024), float32] */;
    %101 = add(%100, %p35) /* ty=Tensor[(32, 50, 1024), float32] */;
    %102 = reshape(%101, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%102, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %2156 = %2155(%2154, %2152, meta[relay.Constant][262] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][263] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %2157 = fn (%p051: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p136: Tensor[(4096, 1024), float16] /* ty=Tensor[(4096, 1024), float16] */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    nn.dense(%p051, %p136, units=None, out_dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(4096, 1024), float16]) -> Tensor[(1600, 4096), float16] */;
  %2158 = %2157(%2156, meta[relay.Constant][264] /* ty=Tensor[(4096, 1024), float16] span=/encoder/layers/encoder_layer_21/mlp/mlp.0/MatMul:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %2159 = fn (%p050: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p135: Tensor[(4096), float16] /* ty=Tensor[(4096), float16] */, %p213: float16 /* ty=float16 */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    %87 = reshape(%p050, newshape=[32, 50, 4096]) /* ty=Tensor[(32, 50, 4096), float16] */;
    %88 = add(%p135, %87) /* ty=Tensor[(32, 50, 4096), float16] */;
    %89 = divide(%88, %p213) /* ty=Tensor[(32, 50, 4096), float16] */;
    %90 = cast(%89, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %91 = erf(%90) /* ty=Tensor[(32, 50, 4096), float32] */;
    %92 = cast(%88, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %93 = add(%91, 1f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %94 = multiply(%92, %93) /* ty=Tensor[(32, 50, 4096), float32] */;
    %95 = multiply(%94, 0.5f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %96 = reshape(%95, newshape=[-1, 4096]) /* ty=Tensor[(1600, 4096), float32] */;
    cast(%96, dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(4096), float16], float16) -> Tensor[(1600, 4096), float16] */;
  %2160 = %2159(%2158, meta[relay.Constant][265] /* ty=Tensor[(4096), float16] span=/encoder/layers/encoder_layer_21/mlp/mlp.0/Add.encoder.layers.encoder_layer_21.mlp.0.bias:0:0 */, 1.41406f16 /* ty=float16 span=/encoder/layers/encoder_layer_21/mlp/mlp.1/Constant:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %2161 = fn (%p049: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p134: Tensor[(1024, 4096), float16] /* ty=Tensor[(1024, 4096), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    nn.dense(%p049, %p134, units=None, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(1024, 4096), float16]) -> Tensor[(1600, 1024), float16] */;
  %2162 = %2161(%2160, meta[relay.Constant][266] /* ty=Tensor[(1024, 4096), float16] span=/encoder/layers/encoder_layer_21/mlp/mlp.3/MatMul:0:0 */) /* ty=Tensor[(1600, 1024), float16] */;
  %2163 = fn (%p048: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p133: Tensor[(1024), float16] /* ty=Tensor[(1024), float16] */, %p212: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %85 = reshape(%p048, newshape=[32, 50, 1024]) /* ty=Tensor[(32, 50, 1024), float16] */;
    %86 = add(%p133, %85) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%p212, %86) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %2164 = %2163(%2162, meta[relay.Constant][267] /* ty=Tensor[(1024), float16] span=/encoder/layers/encoder_layer_21/mlp/mlp.3/Add.encoder.layers.encoder_layer_21.mlp.3.bias:0:0 */, %2146) /* ty=Tensor[(32, 50, 1024), float16] */;
  %2165 = fn (%p047: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p047, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %2166 = %2165(%2164) /* ty=Tensor[(32, 50, 1024), float32] */;
  %2167 = fn (%p0623: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0623, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %2168 = %2167(%2166) /* ty=Tensor[(32, 50, 1), float32] */;
  %2169 = fn (%p046: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p132: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p046, %p132) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %2170 = %2169(%2166, %2168) /* ty=Tensor[(32, 50, 1024), float32] */;
  %2171 = fn (%p045: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %84 = power(%p045, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%84, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %2172 = %2171(%2170) /* ty=Tensor[(32, 50, 1), float32] */;
  %2173 = fn (%p044: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p131: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p211: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p34: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %77 = add(%p044, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %78 = rsqrt(%77) /* ty=Tensor[(32, 50, 1), float32] */;
    %79 = multiply(%p131, %78) /* ty=Tensor[(32, 50, 1024), float32] */;
    %80 = multiply(%79, %p211) /* ty=Tensor[(32, 50, 1024), float32] */;
    %81 = add(%80, %p34) /* ty=Tensor[(32, 50, 1024), float32] */;
    %82 = transpose(%81, axes=[1, 0, 2]) /* ty=Tensor[(50, 32, 1024), float32] */;
    %83 = reshape(%82, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%83, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %2174 = %2173(%2172, %2170, meta[relay.Constant][268] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][269] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %2175 = fn (%p043: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p130: Tensor[(3072, 1024), float16] /* ty=Tensor[(3072, 1024), float16] */, Primitive=1) -> Tensor[(1600, 3072), float16] {
    nn.dense(%p043, %p130, units=None, out_dtype="float16") /* ty=Tensor[(1600, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(3072, 1024), float16]) -> Tensor[(1600, 3072), float16] */;
  %2176 = %2175(%2174, meta[relay.Constant][270] /* ty=Tensor[(3072, 1024), float16] span=/encoder/layers/encoder_layer_22/self_attention/MatMul:0:0 */) /* ty=Tensor[(1600, 3072), float16] */;
  %2177 = fn (%p042: Tensor[(1600, 3072), float16] /* ty=Tensor[(1600, 3072), float16] */, %p129: Tensor[(3072), float16] /* ty=Tensor[(3072), float16] */, Primitive=1) -> Tensor[(50, 32, 3072), float16] {
    %76 = reshape(%p042, newshape=[50, 32, 3072]) /* ty=Tensor[(50, 32, 3072), float16] */;
    add(%p129, %76) /* ty=Tensor[(50, 32, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 3072), float16], Tensor[(3072), float16]) -> Tensor[(50, 32, 3072), float16] */;
  %2178 = %2177(%2176, meta[relay.Constant][271] /* ty=Tensor[(3072), float16] span=Identity_11:0:0 */) /* ty=Tensor[(50, 32, 3072), float16] */;
  %2179 = fn (%p041: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, %p128: float16 /* ty=float16 */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %73 = strided_slice(%p041, begin=[0i64], end=[1024i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %74 = reshape(%73, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    %75 = transpose(%74, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */;
    divide(%75, %p128) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16], float16) -> Tensor[(512, 50, 64), float16] */;
  %2182 = fn (%p0624: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %2180 = strided_slice(%p0624, begin=[1024i64], end=[2048i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %2181 = reshape(%2180, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%2181, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 50, 64), float16] */;
  %2183 = %2179(%2178, 8f16 /* ty=float16 span=/encoder/layers/encoder_layer_22/self_attention/Constant_14:0:0 */) /* ty=Tensor[(512, 50, 64), float16] */;
  %2184 = %2182(%2178) /* ty=Tensor[(512, 50, 64), float16] */;
  %2185 = fn (%p040: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, %p127: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    nn.batch_matmul(%p040, %p127, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16], Tensor[(512, 50, 64), float16]) -> Tensor[(512, 50, 50), float16] */;
  %2186 = %2185(%2183, %2184) /* ty=Tensor[(512, 50, 50), float16] */;
  %2187 = fn (%p039: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float32] {
    %72 = reshape(%p039, newshape=[512, 50, 50]) /* ty=Tensor[(512, 50, 50), float16] */;
    cast(%72, dtype="float32") /* ty=Tensor[(512, 50, 50), float32] */
  } /* ty=fn (Tensor[(512, 50, 50), float16]) -> Tensor[(512, 50, 50), float32] */;
  %2188 = %2187(%2186) /* ty=Tensor[(512, 50, 50), float32] */;
  %2189 = fn (%p038: Tensor[(512, 50, 50), float32] /* ty=Tensor[(512, 50, 50), float32] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    %71 = nn.softmax(%p038, axis=2) /* ty=Tensor[(512, 50, 50), float32] */;
    cast(%71, dtype="float16") /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float32]) -> Tensor[(512, 50, 50), float16] */;
  %2192 = fn (%p0625: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 64, 50), float16] {
    %2190 = strided_slice(%p0625, begin=[2048i64], end=[3072i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %2191 = reshape(%2190, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%2191, axes=[1, 2, 0]) /* ty=Tensor[(512, 64, 50), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 64, 50), float16] */;
  %2193 = %2189(%2188) /* ty=Tensor[(512, 50, 50), float16] */;
  %2194 = %2192(%2178) /* ty=Tensor[(512, 64, 50), float16] */;
  %2195 = fn (%p037: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, %p126: Tensor[(512, 64, 50), float16] /* ty=Tensor[(512, 64, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    nn.batch_matmul(%p037, %p126, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float16], Tensor[(512, 64, 50), float16]) -> Tensor[(512, 50, 64), float16] */;
  %2196 = %2195(%2193, %2194) /* ty=Tensor[(512, 50, 64), float16] */;
  %2197 = fn (%p036: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %69 = reshape(%p036, newshape=[512, 50, 64]) /* ty=Tensor[(512, 50, 64), float16] */;
    %70 = transpose(%69, axes=[1, 0, 2]) /* ty=Tensor[(50, 512, 64), float16] */;
    reshape(%70, newshape=[1600, 1024]) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16]) -> Tensor[(1600, 1024), float16] */;
  %2198 = %2197(%2196) /* ty=Tensor[(1600, 1024), float16] */;
  %2199 = fn (%p035: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p125: Tensor[(1024, 1024), float16] /* ty=Tensor[(1024, 1024), float16] */, %p210: Tensor[(1, 1024), float16] /* ty=Tensor[(1, 1024), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %68 = nn.dense(%p035, %p125, units=1024, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */;
    add(%68, %p210) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024, 1024), float16], Tensor[(1, 1024), float16]) -> Tensor[(1600, 1024), float16] */;
  %2200 = %2199(%2198, meta[relay.Constant][272] /* ty=Tensor[(1024, 1024), float16] span=/encoder/layers/encoder_layer_22/self_attention/Gemm.encoder.layers.encoder_layer_22.self_attention.out_proj.weight:0:0 */, meta[relay.Constant][273] /* ty=Tensor[(1, 1024), float16] */) /* ty=Tensor[(1600, 1024), float16] */;
  %2201 = fn (%p034: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p124: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %66 = reshape(%p034, newshape=[50, 32, 1024]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %67 = transpose(%66, axes=[1, 0, 2]) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%67, %p124) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %2202 = %2201(%2200, %2164) /* ty=Tensor[(32, 50, 1024), float16] */;
  %2203 = fn (%p033: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p033, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %2204 = %2203(%2202) /* ty=Tensor[(32, 50, 1024), float32] */;
  %2205 = fn (%p0626: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0626, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %2206 = %2205(%2204) /* ty=Tensor[(32, 50, 1), float32] */;
  %2207 = fn (%p032: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p123: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p032, %p123) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %2208 = %2207(%2204, %2206) /* ty=Tensor[(32, 50, 1024), float32] */;
  %2209 = fn (%p031: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %65 = power(%p031, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%65, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %2210 = %2209(%2208) /* ty=Tensor[(32, 50, 1), float32] */;
  %2211 = fn (%p030: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p122: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p29: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p33: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %59 = add(%p030, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %60 = rsqrt(%59) /* ty=Tensor[(32, 50, 1), float32] */;
    %61 = multiply(%p122, %60) /* ty=Tensor[(32, 50, 1024), float32] */;
    %62 = multiply(%61, %p29) /* ty=Tensor[(32, 50, 1024), float32] */;
    %63 = add(%62, %p33) /* ty=Tensor[(32, 50, 1024), float32] */;
    %64 = reshape(%63, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%64, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %2212 = %2211(%2210, %2208, meta[relay.Constant][274] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][275] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %2213 = fn (%p029: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p121: Tensor[(4096, 1024), float16] /* ty=Tensor[(4096, 1024), float16] */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    nn.dense(%p029, %p121, units=None, out_dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(4096, 1024), float16]) -> Tensor[(1600, 4096), float16] */;
  %2214 = %2213(%2212, meta[relay.Constant][276] /* ty=Tensor[(4096, 1024), float16] span=/encoder/layers/encoder_layer_22/mlp/mlp.0/MatMul:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %2215 = fn (%p028: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p120: Tensor[(4096), float16] /* ty=Tensor[(4096), float16] */, %p28: float16 /* ty=float16 */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    %49 = reshape(%p028, newshape=[32, 50, 4096]) /* ty=Tensor[(32, 50, 4096), float16] */;
    %50 = add(%p120, %49) /* ty=Tensor[(32, 50, 4096), float16] */;
    %51 = divide(%50, %p28) /* ty=Tensor[(32, 50, 4096), float16] */;
    %52 = cast(%51, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %53 = erf(%52) /* ty=Tensor[(32, 50, 4096), float32] */;
    %54 = cast(%50, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %55 = add(%53, 1f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %56 = multiply(%54, %55) /* ty=Tensor[(32, 50, 4096), float32] */;
    %57 = multiply(%56, 0.5f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %58 = reshape(%57, newshape=[-1, 4096]) /* ty=Tensor[(1600, 4096), float32] */;
    cast(%58, dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(4096), float16], float16) -> Tensor[(1600, 4096), float16] */;
  %2216 = %2215(%2214, meta[relay.Constant][277] /* ty=Tensor[(4096), float16] span=/encoder/layers/encoder_layer_22/mlp/mlp.0/Add.encoder.layers.encoder_layer_22.mlp.0.bias:0:0 */, 1.41406f16 /* ty=float16 span=/encoder/layers/encoder_layer_22/mlp/mlp.1/Constant:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %2217 = fn (%p027: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p119: Tensor[(1024, 4096), float16] /* ty=Tensor[(1024, 4096), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    nn.dense(%p027, %p119, units=None, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(1024, 4096), float16]) -> Tensor[(1600, 1024), float16] */;
  %2218 = %2217(%2216, meta[relay.Constant][278] /* ty=Tensor[(1024, 4096), float16] span=/encoder/layers/encoder_layer_22/mlp/mlp.3/MatMul:0:0 */) /* ty=Tensor[(1600, 1024), float16] */;
  %2219 = fn (%p026: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p118: Tensor[(1024), float16] /* ty=Tensor[(1024), float16] */, %p27: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %47 = reshape(%p026, newshape=[32, 50, 1024]) /* ty=Tensor[(32, 50, 1024), float16] */;
    %48 = add(%p118, %47) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%p27, %48) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %2220 = %2219(%2218, meta[relay.Constant][279] /* ty=Tensor[(1024), float16] span=/encoder/layers/encoder_layer_22/mlp/mlp.3/Add.encoder.layers.encoder_layer_22.mlp.3.bias:0:0 */, %2202) /* ty=Tensor[(32, 50, 1024), float16] */;
  %2221 = fn (%p025: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p025, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %2222 = %2221(%2220) /* ty=Tensor[(32, 50, 1024), float32] */;
  %2223 = fn (%p0627: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0627, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %2224 = %2223(%2222) /* ty=Tensor[(32, 50, 1), float32] */;
  %2225 = fn (%p024: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p117: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p024, %p117) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %2226 = %2225(%2222, %2224) /* ty=Tensor[(32, 50, 1024), float32] */;
  %2227 = fn (%p023: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %46 = power(%p023, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%46, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %2228 = %2227(%2226) /* ty=Tensor[(32, 50, 1), float32] */;
  %2229 = fn (%p022: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p116: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p26: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p32: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %39 = add(%p022, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %40 = rsqrt(%39) /* ty=Tensor[(32, 50, 1), float32] */;
    %41 = multiply(%p116, %40) /* ty=Tensor[(32, 50, 1024), float32] */;
    %42 = multiply(%41, %p26) /* ty=Tensor[(32, 50, 1024), float32] */;
    %43 = add(%42, %p32) /* ty=Tensor[(32, 50, 1024), float32] */;
    %44 = transpose(%43, axes=[1, 0, 2]) /* ty=Tensor[(50, 32, 1024), float32] */;
    %45 = reshape(%44, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%45, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %2230 = %2229(%2228, %2226, meta[relay.Constant][280] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][281] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %2231 = fn (%p021: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p115: Tensor[(3072, 1024), float16] /* ty=Tensor[(3072, 1024), float16] */, Primitive=1) -> Tensor[(1600, 3072), float16] {
    nn.dense(%p021, %p115, units=None, out_dtype="float16") /* ty=Tensor[(1600, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(3072, 1024), float16]) -> Tensor[(1600, 3072), float16] */;
  %2232 = %2231(%2230, meta[relay.Constant][282] /* ty=Tensor[(3072, 1024), float16] span=/encoder/layers/encoder_layer_23/self_attention/MatMul:0:0 */) /* ty=Tensor[(1600, 3072), float16] */;
  %2233 = fn (%p020: Tensor[(1600, 3072), float16] /* ty=Tensor[(1600, 3072), float16] */, %p114: Tensor[(3072), float16] /* ty=Tensor[(3072), float16] */, Primitive=1) -> Tensor[(50, 32, 3072), float16] {
    %38 = reshape(%p020, newshape=[50, 32, 3072]) /* ty=Tensor[(50, 32, 3072), float16] */;
    add(%p114, %38) /* ty=Tensor[(50, 32, 3072), float16] */
  } /* ty=fn (Tensor[(1600, 3072), float16], Tensor[(3072), float16]) -> Tensor[(50, 32, 3072), float16] */;
  %2234 = %2233(%2232, meta[relay.Constant][283] /* ty=Tensor[(3072), float16] span=Identity_5:0:0 */) /* ty=Tensor[(50, 32, 3072), float16] */;
  %2235 = fn (%p019: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, %p113: float16 /* ty=float16 */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %35 = strided_slice(%p019, begin=[0i64], end=[1024i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %36 = reshape(%35, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    %37 = transpose(%36, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */;
    divide(%37, %p113) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16], float16) -> Tensor[(512, 50, 64), float16] */;
  %2238 = fn (%p0628: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    %2236 = strided_slice(%p0628, begin=[1024i64], end=[2048i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %2237 = reshape(%2236, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%2237, axes=[1, 0, 2]) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 50, 64), float16] */;
  %2239 = %2235(%2234, 8f16 /* ty=float16 span=/encoder/layers/encoder_layer_23/self_attention/Constant_14:0:0 */) /* ty=Tensor[(512, 50, 64), float16] */;
  %2240 = %2238(%2234) /* ty=Tensor[(512, 50, 64), float16] */;
  %2241 = fn (%p018: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, %p112: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    nn.batch_matmul(%p018, %p112, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16], Tensor[(512, 50, 64), float16]) -> Tensor[(512, 50, 50), float16] */;
  %2242 = %2241(%2239, %2240) /* ty=Tensor[(512, 50, 50), float16] */;
  %2243 = fn (%p017: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 50), float32] {
    %34 = reshape(%p017, newshape=[512, 50, 50]) /* ty=Tensor[(512, 50, 50), float16] */;
    cast(%34, dtype="float32") /* ty=Tensor[(512, 50, 50), float32] */
  } /* ty=fn (Tensor[(512, 50, 50), float16]) -> Tensor[(512, 50, 50), float32] */;
  %2244 = %2243(%2242) /* ty=Tensor[(512, 50, 50), float32] */;
  %2245 = fn (%p016: Tensor[(512, 50, 50), float32] /* ty=Tensor[(512, 50, 50), float32] */, Primitive=1) -> Tensor[(512, 50, 50), float16] {
    %33 = nn.softmax(%p016, axis=2) /* ty=Tensor[(512, 50, 50), float32] */;
    cast(%33, dtype="float16") /* ty=Tensor[(512, 50, 50), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float32]) -> Tensor[(512, 50, 50), float16] */;
  %2248 = fn (%p0629: Tensor[(50, 32, 3072), float16] /* ty=Tensor[(50, 32, 3072), float16] */, Primitive=1) -> Tensor[(512, 64, 50), float16] {
    %2246 = strided_slice(%p0629, begin=[2048i64], end=[3072i64], strides=[1i64], axes=[2i64]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %2247 = reshape(%2246, newshape=[50, 512, 64]) /* ty=Tensor[(50, 512, 64), float16] */;
    transpose(%2247, axes=[1, 2, 0]) /* ty=Tensor[(512, 64, 50), float16] */
  } /* ty=fn (Tensor[(50, 32, 3072), float16]) -> Tensor[(512, 64, 50), float16] */;
  %2249 = %2245(%2244) /* ty=Tensor[(512, 50, 50), float16] */;
  %2250 = %2248(%2234) /* ty=Tensor[(512, 64, 50), float16] */;
  %2251 = fn (%p015: Tensor[(512, 50, 50), float16] /* ty=Tensor[(512, 50, 50), float16] */, %p111: Tensor[(512, 64, 50), float16] /* ty=Tensor[(512, 64, 50), float16] */, Primitive=1) -> Tensor[(512, 50, 64), float16] {
    nn.batch_matmul(%p015, %p111, out_dtype="float16", transpose_b=True) /* ty=Tensor[(512, 50, 64), float16] */
  } /* ty=fn (Tensor[(512, 50, 50), float16], Tensor[(512, 64, 50), float16]) -> Tensor[(512, 50, 64), float16] */;
  %2252 = %2251(%2249, %2250) /* ty=Tensor[(512, 50, 64), float16] */;
  %2253 = fn (%p014: Tensor[(512, 50, 64), float16] /* ty=Tensor[(512, 50, 64), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %31 = reshape(%p014, newshape=[512, 50, 64]) /* ty=Tensor[(512, 50, 64), float16] */;
    %32 = transpose(%31, axes=[1, 0, 2]) /* ty=Tensor[(50, 512, 64), float16] */;
    reshape(%32, newshape=[1600, 1024]) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(512, 50, 64), float16]) -> Tensor[(1600, 1024), float16] */;
  %2254 = %2253(%2252) /* ty=Tensor[(1600, 1024), float16] */;
  %2255 = fn (%p013: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p110: Tensor[(1024, 1024), float16] /* ty=Tensor[(1024, 1024), float16] */, %p25: Tensor[(1, 1024), float16] /* ty=Tensor[(1, 1024), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %30 = nn.dense(%p013, %p110, units=1024, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */;
    add(%30, %p25) /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024, 1024), float16], Tensor[(1, 1024), float16]) -> Tensor[(1600, 1024), float16] */;
  %2256 = %2255(%2254, meta[relay.Constant][284] /* ty=Tensor[(1024, 1024), float16] span=/encoder/layers/encoder_layer_23/self_attention/Gemm.encoder.layers.encoder_layer_23.self_attention.out_proj.weight:0:0 */, meta[relay.Constant][285] /* ty=Tensor[(1, 1024), float16] */) /* ty=Tensor[(1600, 1024), float16] */;
  %2257 = fn (%p012: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p19: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float16] {
    %28 = reshape(%p012, newshape=[50, 32, 1024]) /* ty=Tensor[(50, 32, 1024), float16] */;
    %29 = transpose(%28, axes=[1, 0, 2]) /* ty=Tensor[(32, 50, 1024), float16] */;
    add(%29, %p19) /* ty=Tensor[(32, 50, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float16] */;
  %2258 = %2257(%2256, %2220) /* ty=Tensor[(32, 50, 1024), float16] */;
  %2259 = fn (%p011: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    cast(%p011, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %2260 = %2259(%2258) /* ty=Tensor[(32, 50, 1024), float32] */;
  %2261 = fn (%p0630: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0630, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %2262 = %2261(%2260) /* ty=Tensor[(32, 50, 1), float32] */;
  %2263 = fn (%p010: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p18: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p010, %p18) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %2264 = %2263(%2260, %2262) /* ty=Tensor[(32, 50, 1024), float32] */;
  %2265 = fn (%p09: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %27 = power(%p09, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%27, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %2266 = %2265(%2264) /* ty=Tensor[(32, 50, 1), float32] */;
  %2267 = fn (%p08: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p17: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p24: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p31: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    %21 = add(%p08, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %22 = rsqrt(%21) /* ty=Tensor[(32, 50, 1), float32] */;
    %23 = multiply(%p17, %22) /* ty=Tensor[(32, 50, 1024), float32] */;
    %24 = multiply(%23, %p24) /* ty=Tensor[(32, 50, 1024), float32] */;
    %25 = add(%24, %p31) /* ty=Tensor[(32, 50, 1024), float32] */;
    %26 = reshape(%25, newshape=[-1, 1024]) /* ty=Tensor[(1600, 1024), float32] */;
    cast(%26, dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(1600, 1024), float16] */;
  %2268 = %2267(%2266, %2264, meta[relay.Constant][286] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][287] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1600, 1024), float16] */;
  %2269 = fn (%p07: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p16: Tensor[(4096, 1024), float16] /* ty=Tensor[(4096, 1024), float16] */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    nn.dense(%p07, %p16, units=None, out_dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(4096, 1024), float16]) -> Tensor[(1600, 4096), float16] */;
  %2270 = %2269(%2268, meta[relay.Constant][288] /* ty=Tensor[(4096, 1024), float16] span=/encoder/layers/encoder_layer_23/mlp/mlp.0/MatMul:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %2271 = fn (%p06: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p15: Tensor[(4096), float16] /* ty=Tensor[(4096), float16] */, %p23: float16 /* ty=float16 */, Primitive=1) -> Tensor[(1600, 4096), float16] {
    %11 = reshape(%p06, newshape=[32, 50, 4096]) /* ty=Tensor[(32, 50, 4096), float16] */;
    %12 = add(%p15, %11) /* ty=Tensor[(32, 50, 4096), float16] */;
    %13 = divide(%12, %p23) /* ty=Tensor[(32, 50, 4096), float16] */;
    %14 = cast(%13, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %15 = erf(%14) /* ty=Tensor[(32, 50, 4096), float32] */;
    %16 = cast(%12, dtype="float32") /* ty=Tensor[(32, 50, 4096), float32] */;
    %17 = add(%15, 1f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %18 = multiply(%16, %17) /* ty=Tensor[(32, 50, 4096), float32] */;
    %19 = multiply(%18, 0.5f /* ty=float32 */) /* ty=Tensor[(32, 50, 4096), float32] */;
    %20 = reshape(%19, newshape=[-1, 4096]) /* ty=Tensor[(1600, 4096), float32] */;
    cast(%20, dtype="float16") /* ty=Tensor[(1600, 4096), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(4096), float16], float16) -> Tensor[(1600, 4096), float16] */;
  %2272 = %2271(%2270, meta[relay.Constant][289] /* ty=Tensor[(4096), float16] span=/encoder/layers/encoder_layer_23/mlp/mlp.0/Add.encoder.layers.encoder_layer_23.mlp.0.bias:0:0 */, 1.41406f16 /* ty=float16 span=/encoder/layers/encoder_layer_23/mlp/mlp.1/Constant:0:0 */) /* ty=Tensor[(1600, 4096), float16] */;
  %2273 = fn (%p05: Tensor[(1600, 4096), float16] /* ty=Tensor[(1600, 4096), float16] */, %p14: Tensor[(1024, 4096), float16] /* ty=Tensor[(1024, 4096), float16] */, Primitive=1) -> Tensor[(1600, 1024), float16] {
    nn.dense(%p05, %p14, units=None, out_dtype="float16") /* ty=Tensor[(1600, 1024), float16] */
  } /* ty=fn (Tensor[(1600, 4096), float16], Tensor[(1024, 4096), float16]) -> Tensor[(1600, 1024), float16] */;
  %2274 = %2273(%2272, meta[relay.Constant][290] /* ty=Tensor[(1024, 4096), float16] span=/encoder/layers/encoder_layer_23/mlp/mlp.3/MatMul:0:0 */) /* ty=Tensor[(1600, 1024), float16] */;
  %2275 = fn (%p04: Tensor[(1600, 1024), float16] /* ty=Tensor[(1600, 1024), float16] */, %p13: Tensor[(1024), float16] /* ty=Tensor[(1024), float16] */, %p22: Tensor[(32, 50, 1024), float16] /* ty=Tensor[(32, 50, 1024), float16] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    %8 = reshape(%p04, newshape=[32, 50, 1024]) /* ty=Tensor[(32, 50, 1024), float16] */;
    %9 = add(%p13, %8) /* ty=Tensor[(32, 50, 1024), float16] */;
    %10 = add(%p22, %9) /* ty=Tensor[(32, 50, 1024), float16] */;
    cast(%10, dtype="float32") /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(1600, 1024), float16], Tensor[(1024), float16], Tensor[(32, 50, 1024), float16]) -> Tensor[(32, 50, 1024), float32] */;
  %2276 = %2275(%2274, meta[relay.Constant][291] /* ty=Tensor[(1024), float16] span=/encoder/layers/encoder_layer_23/mlp/mlp.3/Add.encoder.layers.encoder_layer_23.mlp.3.bias:0:0 */, %2258) /* ty=Tensor[(32, 50, 1024), float32] */;
  %2277 = fn (%p0631: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    mean(%p0631, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %2278 = %2277(%2276) /* ty=Tensor[(32, 50, 1), float32] */;
  %2279 = fn (%p03: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p12: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, Primitive=1) -> Tensor[(32, 50, 1024), float32] {
    subtract(%p03, %p12) /* ty=Tensor[(32, 50, 1024), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32], Tensor[(32, 50, 1), float32]) -> Tensor[(32, 50, 1024), float32] */;
  %2280 = %2279(%2276, %2278) /* ty=Tensor[(32, 50, 1024), float32] */;
  %2281 = fn (%p02: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, Primitive=1) -> Tensor[(32, 50, 1), float32] {
    %7 = power(%p02, 2f /* ty=float32 */) /* ty=Tensor[(32, 50, 1024), float32] */;
    mean(%7, axis=[-1], keepdims=True) /* ty=Tensor[(32, 50, 1), float32] */
  } /* ty=fn (Tensor[(32, 50, 1024), float32]) -> Tensor[(32, 50, 1), float32] */;
  %2282 = %2281(%2280) /* ty=Tensor[(32, 50, 1), float32] */;
  %2283 = fn (%p01: Tensor[(32, 50, 1), float32] /* ty=Tensor[(32, 50, 1), float32] */, %p11: Tensor[(32, 50, 1024), float32] /* ty=Tensor[(32, 50, 1024), float32] */, %p21: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p3: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> Tensor[(32, 1024), float16] {
    %1 = add(%p01, 1.01328e-06f /* ty=float32 */) /* ty=Tensor[(32, 50, 1), float32] */;
    %2 = rsqrt(%1) /* ty=Tensor[(32, 50, 1), float32] */;
    %3 = multiply(%p11, %2) /* ty=Tensor[(32, 50, 1024), float32] */;
    %4 = multiply(%3, %p21) /* ty=Tensor[(32, 50, 1024), float32] */;
    %5 = add(%4, %p3) /* ty=Tensor[(32, 50, 1024), float32] */;
    %6 = take(%5, 0i64 /* ty=int64 span=/Constant:0:0 */, axis=1) /* ty=Tensor[(32, 1024), float32] */;
    cast(%6, dtype="float16") /* ty=Tensor[(32, 1024), float16] */
  } /* ty=fn (Tensor[(32, 50, 1), float32], Tensor[(32, 50, 1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> Tensor[(32, 1024), float16] */;
  %2284 = %2283(%2282, %2280, meta[relay.Constant][292] /* ty=Tensor[(1024), float32] */, meta[relay.Constant][293] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(32, 1024), float16] */;
  %2285 = fn (%p0: Tensor[(32, 1024), float16] /* ty=Tensor[(32, 1024), float16] */, %p1: Tensor[(1000, 1024), float16] /* ty=Tensor[(1000, 1024), float16] */, %p2: Tensor[(1, 1000), float16] /* ty=Tensor[(1, 1000), float16] */, Primitive=1) -> Tensor[(32, 1000), float16] {
    %0 = nn.dense(%p0, %p1, units=1000, out_dtype="float16") /* ty=Tensor[(32, 1000), float16] */;
    add(%0, %p2) /* ty=Tensor[(32, 1000), float16] */
  } /* ty=fn (Tensor[(32, 1024), float16], Tensor[(1000, 1024), float16], Tensor[(1, 1000), float16]) -> Tensor[(32, 1000), float16] */;
  %2285(%2284, meta[relay.Constant][294] /* ty=Tensor[(1000, 1024), float16] span=/heads/head/Gemm.heads.head.weight:0:0 */, meta[relay.Constant][295] /* ty=Tensor[(1, 1000), float16] */) /* ty=Tensor[(32, 1000), float16] */
}


