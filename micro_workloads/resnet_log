def @main(%input0: Tensor[(32, 3, 224, 224), float16] /* ty=Tensor[(32, 3, 224, 224), float16] span=/conv1/Conv.input0:0:0 */) -> Tensor[(32, 1000), float16] {
  %118 = fn (%p053: Tensor[(32, 3, 224, 224), float16] /* ty=Tensor[(32, 3, 224, 224), float16] */, Primitive=1) -> Tensor[(32, 224, 224, 3), float16] {
    layout_transform(%p053, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(32, 224, 224, 3), float16] */
  } /* ty=fn (Tensor[(32, 3, 224, 224), float16]) -> Tensor[(32, 224, 224, 3), float16] */;
  %119 = %118(%input0) /* ty=Tensor[(32, 224, 224, 3), float16] */;
  %120 = fn (%p052: Tensor[(32, 224, 224, 3), float16] /* ty=Tensor[(32, 224, 224, 3), float16] */, %p149: Tensor[(64, 7, 7, 3), float16] /* ty=Tensor[(64, 7, 7, 3), float16] */, %p249: Tensor[(1, 1, 1, 64), float16] /* ty=Tensor[(1, 1, 1, 64), float16] */, Primitive=1) -> Tensor[(32, 112, 112, 64), float16] {
    %116 = nn.conv2d(%p052, %p149, strides=[2, 2], padding=[3, 3, 3, 3], channels=64, kernel_size=[7, 7], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 112, 112, 64), float16] */;
    %117 = add(%116, %p249) /* ty=Tensor[(32, 112, 112, 64), float16] */;
    nn.relu(%117) /* ty=Tensor[(32, 112, 112, 64), float16] */
  } /* ty=fn (Tensor[(32, 224, 224, 3), float16], Tensor[(64, 7, 7, 3), float16], Tensor[(1, 1, 1, 64), float16]) -> Tensor[(32, 112, 112, 64), float16] */;
  %121 = %120(%119, meta[relay.Constant][0] /* ty=Tensor[(64, 7, 7, 3), float16] */, meta[relay.Constant][1] /* ty=Tensor[(1, 1, 1, 64), float16] */) /* ty=Tensor[(32, 112, 112, 64), float16] */;
  %122 = fn (%p051: Tensor[(32, 112, 112, 64), float16] /* ty=Tensor[(32, 112, 112, 64), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 64), float16] {
    nn.max_pool2d(%p051, pool_size=[3, 3], strides=[2, 2], padding=[1, 1, 1, 1], layout="NHWC") /* ty=Tensor[(32, 56, 56, 64), float16] */
  } /* ty=fn (Tensor[(32, 112, 112, 64), float16]) -> Tensor[(32, 56, 56, 64), float16] */;
  %123 = %122(%121) /* ty=Tensor[(32, 56, 56, 64), float16] */;
  %124 = fn (%p050: Tensor[(32, 56, 56, 64), float16] /* ty=Tensor[(32, 56, 56, 64), float16] */, %p148: Tensor[(64, 1, 1, 64), float16] /* ty=Tensor[(64, 1, 1, 64), float16] */, %p248: Tensor[(1, 1, 1, 64), float16] /* ty=Tensor[(1, 1, 1, 64), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 64), float16] {
    %114 = nn.conv2d(%p050, %p148, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 56, 56, 64), float16] */;
    %115 = add(%114, %p248) /* ty=Tensor[(32, 56, 56, 64), float16] */;
    nn.relu(%115) /* ty=Tensor[(32, 56, 56, 64), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 64), float16], Tensor[(64, 1, 1, 64), float16], Tensor[(1, 1, 1, 64), float16]) -> Tensor[(32, 56, 56, 64), float16] */;
  %125 = %124(%123, meta[relay.Constant][2] /* ty=Tensor[(64, 1, 1, 64), float16] */, meta[relay.Constant][3] /* ty=Tensor[(1, 1, 1, 64), float16] */) /* ty=Tensor[(32, 56, 56, 64), float16] */;
  %126 = fn (%p049: Tensor[(32, 56, 56, 64), float16] /* ty=Tensor[(32, 56, 56, 64), float16] */, %p147: Tensor[(64, 3, 3, 64), float16] /* ty=Tensor[(64, 3, 3, 64), float16] */, %p247: Tensor[(1, 1, 1, 64), float16] /* ty=Tensor[(1, 1, 1, 64), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 64), float16] {
    %112 = nn.conv2d(%p049, %p147, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 56, 56, 64), float16] */;
    %113 = add(%112, %p247) /* ty=Tensor[(32, 56, 56, 64), float16] */;
    nn.relu(%113) /* ty=Tensor[(32, 56, 56, 64), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 64), float16], Tensor[(64, 3, 3, 64), float16], Tensor[(1, 1, 1, 64), float16]) -> Tensor[(32, 56, 56, 64), float16] */;
  %128 = fn (%p054: Tensor[(32, 56, 56, 64), float16] /* ty=Tensor[(32, 56, 56, 64), float16] */, %p150: Tensor[(256, 1, 1, 64), float16] /* ty=Tensor[(256, 1, 1, 64), float16] */, %p250: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 256), float16] {
    %127 = nn.conv2d(%p054, %p150, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 56, 56, 256), float16] */;
    add(%127, %p250) /* ty=Tensor[(32, 56, 56, 256), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 64), float16], Tensor[(256, 1, 1, 64), float16], Tensor[(1, 1, 1, 256), float16]) -> Tensor[(32, 56, 56, 256), float16] */;
  %129 = %126(%125, meta[relay.Constant][4] /* ty=Tensor[(64, 3, 3, 64), float16] */, meta[relay.Constant][5] /* ty=Tensor[(1, 1, 1, 64), float16] */) /* ty=Tensor[(32, 56, 56, 64), float16] */;
  %130 = %128(%123, meta[relay.Constant][8] /* ty=Tensor[(256, 1, 1, 64), float16] */, meta[relay.Constant][9] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(32, 56, 56, 256), float16] */;
  %131 = fn (%p048: Tensor[(32, 56, 56, 64), float16] /* ty=Tensor[(32, 56, 56, 64), float16] */, %p146: Tensor[(256, 1, 1, 64), float16] /* ty=Tensor[(256, 1, 1, 64), float16] */, %p246: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, %p315: Tensor[(32, 56, 56, 256), float16] /* ty=Tensor[(32, 56, 56, 256), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 256), float16] {
    %109 = nn.conv2d(%p048, %p146, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 56, 56, 256), float16] */;
    %110 = add(%109, %p246) /* ty=Tensor[(32, 56, 56, 256), float16] */;
    %111 = add(%110, %p315) /* ty=Tensor[(32, 56, 56, 256), float16] */;
    nn.relu(%111) /* ty=Tensor[(32, 56, 56, 256), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 64), float16], Tensor[(256, 1, 1, 64), float16], Tensor[(1, 1, 1, 256), float16], Tensor[(32, 56, 56, 256), float16]) -> Tensor[(32, 56, 56, 256), float16] */;
  %132 = %131(%129, meta[relay.Constant][6] /* ty=Tensor[(256, 1, 1, 64), float16] */, meta[relay.Constant][7] /* ty=Tensor[(1, 1, 1, 256), float16] */, %130) /* ty=Tensor[(32, 56, 56, 256), float16] */;
  %133 = fn (%p047: Tensor[(32, 56, 56, 256), float16] /* ty=Tensor[(32, 56, 56, 256), float16] */, %p145: Tensor[(64, 1, 1, 256), float16] /* ty=Tensor[(64, 1, 1, 256), float16] */, %p245: Tensor[(1, 1, 1, 64), float16] /* ty=Tensor[(1, 1, 1, 64), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 64), float16] {
    %107 = nn.conv2d(%p047, %p145, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 56, 56, 64), float16] */;
    %108 = add(%107, %p245) /* ty=Tensor[(32, 56, 56, 64), float16] */;
    nn.relu(%108) /* ty=Tensor[(32, 56, 56, 64), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 256), float16], Tensor[(64, 1, 1, 256), float16], Tensor[(1, 1, 1, 64), float16]) -> Tensor[(32, 56, 56, 64), float16] */;
  %134 = %133(%132, meta[relay.Constant][10] /* ty=Tensor[(64, 1, 1, 256), float16] */, meta[relay.Constant][11] /* ty=Tensor[(1, 1, 1, 64), float16] */) /* ty=Tensor[(32, 56, 56, 64), float16] */;
  %135 = fn (%p046: Tensor[(32, 56, 56, 64), float16] /* ty=Tensor[(32, 56, 56, 64), float16] */, %p144: Tensor[(64, 3, 3, 64), float16] /* ty=Tensor[(64, 3, 3, 64), float16] */, %p244: Tensor[(1, 1, 1, 64), float16] /* ty=Tensor[(1, 1, 1, 64), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 64), float16] {
    %105 = nn.conv2d(%p046, %p144, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 56, 56, 64), float16] */;
    %106 = add(%105, %p244) /* ty=Tensor[(32, 56, 56, 64), float16] */;
    nn.relu(%106) /* ty=Tensor[(32, 56, 56, 64), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 64), float16], Tensor[(64, 3, 3, 64), float16], Tensor[(1, 1, 1, 64), float16]) -> Tensor[(32, 56, 56, 64), float16] */;
  %136 = %135(%134, meta[relay.Constant][12] /* ty=Tensor[(64, 3, 3, 64), float16] */, meta[relay.Constant][13] /* ty=Tensor[(1, 1, 1, 64), float16] */) /* ty=Tensor[(32, 56, 56, 64), float16] */;
  %137 = fn (%p045: Tensor[(32, 56, 56, 64), float16] /* ty=Tensor[(32, 56, 56, 64), float16] */, %p143: Tensor[(256, 1, 1, 64), float16] /* ty=Tensor[(256, 1, 1, 64), float16] */, %p243: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, %p314: Tensor[(32, 56, 56, 256), float16] /* ty=Tensor[(32, 56, 56, 256), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 256), float16] {
    %102 = nn.conv2d(%p045, %p143, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 56, 56, 256), float16] */;
    %103 = add(%102, %p243) /* ty=Tensor[(32, 56, 56, 256), float16] */;
    %104 = add(%103, %p314) /* ty=Tensor[(32, 56, 56, 256), float16] */;
    nn.relu(%104) /* ty=Tensor[(32, 56, 56, 256), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 64), float16], Tensor[(256, 1, 1, 64), float16], Tensor[(1, 1, 1, 256), float16], Tensor[(32, 56, 56, 256), float16]) -> Tensor[(32, 56, 56, 256), float16] */;
  %138 = %137(%136, meta[relay.Constant][14] /* ty=Tensor[(256, 1, 1, 64), float16] */, meta[relay.Constant][15] /* ty=Tensor[(1, 1, 1, 256), float16] */, %132) /* ty=Tensor[(32, 56, 56, 256), float16] */;
  %139 = fn (%p044: Tensor[(32, 56, 56, 256), float16] /* ty=Tensor[(32, 56, 56, 256), float16] */, %p142: Tensor[(64, 1, 1, 256), float16] /* ty=Tensor[(64, 1, 1, 256), float16] */, %p242: Tensor[(1, 1, 1, 64), float16] /* ty=Tensor[(1, 1, 1, 64), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 64), float16] {
    %100 = nn.conv2d(%p044, %p142, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 56, 56, 64), float16] */;
    %101 = add(%100, %p242) /* ty=Tensor[(32, 56, 56, 64), float16] */;
    nn.relu(%101) /* ty=Tensor[(32, 56, 56, 64), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 256), float16], Tensor[(64, 1, 1, 256), float16], Tensor[(1, 1, 1, 64), float16]) -> Tensor[(32, 56, 56, 64), float16] */;
  %140 = %139(%138, meta[relay.Constant][16] /* ty=Tensor[(64, 1, 1, 256), float16] */, meta[relay.Constant][17] /* ty=Tensor[(1, 1, 1, 64), float16] */) /* ty=Tensor[(32, 56, 56, 64), float16] */;
  %141 = fn (%p043: Tensor[(32, 56, 56, 64), float16] /* ty=Tensor[(32, 56, 56, 64), float16] */, %p141: Tensor[(64, 3, 3, 64), float16] /* ty=Tensor[(64, 3, 3, 64), float16] */, %p241: Tensor[(1, 1, 1, 64), float16] /* ty=Tensor[(1, 1, 1, 64), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 64), float16] {
    %98 = nn.conv2d(%p043, %p141, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 56, 56, 64), float16] */;
    %99 = add(%98, %p241) /* ty=Tensor[(32, 56, 56, 64), float16] */;
    nn.relu(%99) /* ty=Tensor[(32, 56, 56, 64), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 64), float16], Tensor[(64, 3, 3, 64), float16], Tensor[(1, 1, 1, 64), float16]) -> Tensor[(32, 56, 56, 64), float16] */;
  %142 = %141(%140, meta[relay.Constant][18] /* ty=Tensor[(64, 3, 3, 64), float16] */, meta[relay.Constant][19] /* ty=Tensor[(1, 1, 1, 64), float16] */) /* ty=Tensor[(32, 56, 56, 64), float16] */;
  %143 = fn (%p042: Tensor[(32, 56, 56, 64), float16] /* ty=Tensor[(32, 56, 56, 64), float16] */, %p140: Tensor[(256, 1, 1, 64), float16] /* ty=Tensor[(256, 1, 1, 64), float16] */, %p240: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, %p313: Tensor[(32, 56, 56, 256), float16] /* ty=Tensor[(32, 56, 56, 256), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 256), float16] {
    %95 = nn.conv2d(%p042, %p140, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 56, 56, 256), float16] */;
    %96 = add(%95, %p240) /* ty=Tensor[(32, 56, 56, 256), float16] */;
    %97 = add(%96, %p313) /* ty=Tensor[(32, 56, 56, 256), float16] */;
    nn.relu(%97) /* ty=Tensor[(32, 56, 56, 256), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 64), float16], Tensor[(256, 1, 1, 64), float16], Tensor[(1, 1, 1, 256), float16], Tensor[(32, 56, 56, 256), float16]) -> Tensor[(32, 56, 56, 256), float16] */;
  %144 = %143(%142, meta[relay.Constant][20] /* ty=Tensor[(256, 1, 1, 64), float16] */, meta[relay.Constant][21] /* ty=Tensor[(1, 1, 1, 256), float16] */, %138) /* ty=Tensor[(32, 56, 56, 256), float16] */;
  %145 = fn (%p041: Tensor[(32, 56, 56, 256), float16] /* ty=Tensor[(32, 56, 56, 256), float16] */, %p139: Tensor[(128, 1, 1, 256), float16] /* ty=Tensor[(128, 1, 1, 256), float16] */, %p239: Tensor[(1, 1, 1, 128), float16] /* ty=Tensor[(1, 1, 1, 128), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 128), float16] {
    %93 = nn.conv2d(%p041, %p139, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 56, 56, 128), float16] */;
    %94 = add(%93, %p239) /* ty=Tensor[(32, 56, 56, 128), float16] */;
    nn.relu(%94) /* ty=Tensor[(32, 56, 56, 128), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 256), float16], Tensor[(128, 1, 1, 256), float16], Tensor[(1, 1, 1, 128), float16]) -> Tensor[(32, 56, 56, 128), float16] */;
  %146 = %145(%144, meta[relay.Constant][22] /* ty=Tensor[(128, 1, 1, 256), float16] */, meta[relay.Constant][23] /* ty=Tensor[(1, 1, 1, 128), float16] */) /* ty=Tensor[(32, 56, 56, 128), float16] */;
  %147 = fn (%p040: Tensor[(32, 56, 56, 128), float16] /* ty=Tensor[(32, 56, 56, 128), float16] */, %p138: Tensor[(128, 3, 3, 128), float16] /* ty=Tensor[(128, 3, 3, 128), float16] */, %p238: Tensor[(1, 1, 1, 128), float16] /* ty=Tensor[(1, 1, 1, 128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 128), float16] {
    %91 = nn.conv2d(%p040, %p138, strides=[2, 2], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %92 = add(%91, %p238) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    nn.relu(%92) /* ty=Tensor[(32, 28, 28, 128), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 128), float16], Tensor[(128, 3, 3, 128), float16], Tensor[(1, 1, 1, 128), float16]) -> Tensor[(32, 28, 28, 128), float16] */;
  %149 = fn (%p055: Tensor[(32, 56, 56, 256), float16] /* ty=Tensor[(32, 56, 56, 256), float16] */, %p151: Tensor[(512, 1, 1, 256), float16] /* ty=Tensor[(512, 1, 1, 256), float16] */, %p251: Tensor[(1, 1, 1, 512), float16] /* ty=Tensor[(1, 1, 1, 512), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 512), float16] {
    %148 = nn.conv2d(%p055, %p151, strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 512), float16] */;
    add(%148, %p251) /* ty=Tensor[(32, 28, 28, 512), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 256), float16], Tensor[(512, 1, 1, 256), float16], Tensor[(1, 1, 1, 512), float16]) -> Tensor[(32, 28, 28, 512), float16] */;
  %150 = %147(%146, meta[relay.Constant][24] /* ty=Tensor[(128, 3, 3, 128), float16] */, meta[relay.Constant][25] /* ty=Tensor[(1, 1, 1, 128), float16] */) /* ty=Tensor[(32, 28, 28, 128), float16] */;
  %151 = %149(%144, meta[relay.Constant][28] /* ty=Tensor[(512, 1, 1, 256), float16] */, meta[relay.Constant][29] /* ty=Tensor[(1, 1, 1, 512), float16] */) /* ty=Tensor[(32, 28, 28, 512), float16] */;
  %152 = fn (%p039: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p137: Tensor[(512, 1, 1, 128), float16] /* ty=Tensor[(512, 1, 1, 128), float16] */, %p237: Tensor[(1, 1, 1, 512), float16] /* ty=Tensor[(1, 1, 1, 512), float16] */, %p312: Tensor[(32, 28, 28, 512), float16] /* ty=Tensor[(32, 28, 28, 512), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 512), float16] {
    %88 = nn.conv2d(%p039, %p137, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 512), float16] */;
    %89 = add(%88, %p237) /* ty=Tensor[(32, 28, 28, 512), float16] */;
    %90 = add(%89, %p312) /* ty=Tensor[(32, 28, 28, 512), float16] */;
    nn.relu(%90) /* ty=Tensor[(32, 28, 28, 512), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(512, 1, 1, 128), float16], Tensor[(1, 1, 1, 512), float16], Tensor[(32, 28, 28, 512), float16]) -> Tensor[(32, 28, 28, 512), float16] */;
  %153 = %152(%150, meta[relay.Constant][26] /* ty=Tensor[(512, 1, 1, 128), float16] */, meta[relay.Constant][27] /* ty=Tensor[(1, 1, 1, 512), float16] */, %151) /* ty=Tensor[(32, 28, 28, 512), float16] */;
  %154 = fn (%p038: Tensor[(32, 28, 28, 512), float16] /* ty=Tensor[(32, 28, 28, 512), float16] */, %p136: Tensor[(128, 1, 1, 512), float16] /* ty=Tensor[(128, 1, 1, 512), float16] */, %p236: Tensor[(1, 1, 1, 128), float16] /* ty=Tensor[(1, 1, 1, 128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 128), float16] {
    %86 = nn.conv2d(%p038, %p136, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %87 = add(%86, %p236) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    nn.relu(%87) /* ty=Tensor[(32, 28, 28, 128), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 512), float16], Tensor[(128, 1, 1, 512), float16], Tensor[(1, 1, 1, 128), float16]) -> Tensor[(32, 28, 28, 128), float16] */;
  %155 = %154(%153, meta[relay.Constant][30] /* ty=Tensor[(128, 1, 1, 512), float16] */, meta[relay.Constant][31] /* ty=Tensor[(1, 1, 1, 128), float16] */) /* ty=Tensor[(32, 28, 28, 128), float16] */;
  %156 = fn (%p037: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p135: Tensor[(128, 3, 3, 128), float16] /* ty=Tensor[(128, 3, 3, 128), float16] */, %p235: Tensor[(1, 1, 1, 128), float16] /* ty=Tensor[(1, 1, 1, 128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 128), float16] {
    %84 = nn.conv2d(%p037, %p135, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %85 = add(%84, %p235) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    nn.relu(%85) /* ty=Tensor[(32, 28, 28, 128), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(128, 3, 3, 128), float16], Tensor[(1, 1, 1, 128), float16]) -> Tensor[(32, 28, 28, 128), float16] */;
  %157 = %156(%155, meta[relay.Constant][32] /* ty=Tensor[(128, 3, 3, 128), float16] */, meta[relay.Constant][33] /* ty=Tensor[(1, 1, 1, 128), float16] */) /* ty=Tensor[(32, 28, 28, 128), float16] */;
  %158 = fn (%p036: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p134: Tensor[(512, 1, 1, 128), float16] /* ty=Tensor[(512, 1, 1, 128), float16] */, %p234: Tensor[(1, 1, 1, 512), float16] /* ty=Tensor[(1, 1, 1, 512), float16] */, %p311: Tensor[(32, 28, 28, 512), float16] /* ty=Tensor[(32, 28, 28, 512), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 512), float16] {
    %81 = nn.conv2d(%p036, %p134, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 512), float16] */;
    %82 = add(%81, %p234) /* ty=Tensor[(32, 28, 28, 512), float16] */;
    %83 = add(%82, %p311) /* ty=Tensor[(32, 28, 28, 512), float16] */;
    nn.relu(%83) /* ty=Tensor[(32, 28, 28, 512), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(512, 1, 1, 128), float16], Tensor[(1, 1, 1, 512), float16], Tensor[(32, 28, 28, 512), float16]) -> Tensor[(32, 28, 28, 512), float16] */;
  %159 = %158(%157, meta[relay.Constant][34] /* ty=Tensor[(512, 1, 1, 128), float16] */, meta[relay.Constant][35] /* ty=Tensor[(1, 1, 1, 512), float16] */, %153) /* ty=Tensor[(32, 28, 28, 512), float16] */;
  %160 = fn (%p035: Tensor[(32, 28, 28, 512), float16] /* ty=Tensor[(32, 28, 28, 512), float16] */, %p133: Tensor[(128, 1, 1, 512), float16] /* ty=Tensor[(128, 1, 1, 512), float16] */, %p233: Tensor[(1, 1, 1, 128), float16] /* ty=Tensor[(1, 1, 1, 128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 128), float16] {
    %79 = nn.conv2d(%p035, %p133, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %80 = add(%79, %p233) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    nn.relu(%80) /* ty=Tensor[(32, 28, 28, 128), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 512), float16], Tensor[(128, 1, 1, 512), float16], Tensor[(1, 1, 1, 128), float16]) -> Tensor[(32, 28, 28, 128), float16] */;
  %161 = %160(%159, meta[relay.Constant][36] /* ty=Tensor[(128, 1, 1, 512), float16] */, meta[relay.Constant][37] /* ty=Tensor[(1, 1, 1, 128), float16] */) /* ty=Tensor[(32, 28, 28, 128), float16] */;
  %162 = fn (%p034: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p132: Tensor[(128, 3, 3, 128), float16] /* ty=Tensor[(128, 3, 3, 128), float16] */, %p232: Tensor[(1, 1, 1, 128), float16] /* ty=Tensor[(1, 1, 1, 128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 128), float16] {
    %77 = nn.conv2d(%p034, %p132, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %78 = add(%77, %p232) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    nn.relu(%78) /* ty=Tensor[(32, 28, 28, 128), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(128, 3, 3, 128), float16], Tensor[(1, 1, 1, 128), float16]) -> Tensor[(32, 28, 28, 128), float16] */;
  %163 = %162(%161, meta[relay.Constant][38] /* ty=Tensor[(128, 3, 3, 128), float16] */, meta[relay.Constant][39] /* ty=Tensor[(1, 1, 1, 128), float16] */) /* ty=Tensor[(32, 28, 28, 128), float16] */;
  %164 = fn (%p033: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p131: Tensor[(512, 1, 1, 128), float16] /* ty=Tensor[(512, 1, 1, 128), float16] */, %p231: Tensor[(1, 1, 1, 512), float16] /* ty=Tensor[(1, 1, 1, 512), float16] */, %p310: Tensor[(32, 28, 28, 512), float16] /* ty=Tensor[(32, 28, 28, 512), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 512), float16] {
    %74 = nn.conv2d(%p033, %p131, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 512), float16] */;
    %75 = add(%74, %p231) /* ty=Tensor[(32, 28, 28, 512), float16] */;
    %76 = add(%75, %p310) /* ty=Tensor[(32, 28, 28, 512), float16] */;
    nn.relu(%76) /* ty=Tensor[(32, 28, 28, 512), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(512, 1, 1, 128), float16], Tensor[(1, 1, 1, 512), float16], Tensor[(32, 28, 28, 512), float16]) -> Tensor[(32, 28, 28, 512), float16] */;
  %165 = %164(%163, meta[relay.Constant][40] /* ty=Tensor[(512, 1, 1, 128), float16] */, meta[relay.Constant][41] /* ty=Tensor[(1, 1, 1, 512), float16] */, %159) /* ty=Tensor[(32, 28, 28, 512), float16] */;
  %166 = fn (%p032: Tensor[(32, 28, 28, 512), float16] /* ty=Tensor[(32, 28, 28, 512), float16] */, %p130: Tensor[(128, 1, 1, 512), float16] /* ty=Tensor[(128, 1, 1, 512), float16] */, %p230: Tensor[(1, 1, 1, 128), float16] /* ty=Tensor[(1, 1, 1, 128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 128), float16] {
    %72 = nn.conv2d(%p032, %p130, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %73 = add(%72, %p230) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    nn.relu(%73) /* ty=Tensor[(32, 28, 28, 128), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 512), float16], Tensor[(128, 1, 1, 512), float16], Tensor[(1, 1, 1, 128), float16]) -> Tensor[(32, 28, 28, 128), float16] */;
  %167 = %166(%165, meta[relay.Constant][42] /* ty=Tensor[(128, 1, 1, 512), float16] */, meta[relay.Constant][43] /* ty=Tensor[(1, 1, 1, 128), float16] */) /* ty=Tensor[(32, 28, 28, 128), float16] */;
  %168 = fn (%p031: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p129: Tensor[(128, 3, 3, 128), float16] /* ty=Tensor[(128, 3, 3, 128), float16] */, %p229: Tensor[(1, 1, 1, 128), float16] /* ty=Tensor[(1, 1, 1, 128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 128), float16] {
    %70 = nn.conv2d(%p031, %p129, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %71 = add(%70, %p229) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    nn.relu(%71) /* ty=Tensor[(32, 28, 28, 128), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(128, 3, 3, 128), float16], Tensor[(1, 1, 1, 128), float16]) -> Tensor[(32, 28, 28, 128), float16] */;
  %169 = %168(%167, meta[relay.Constant][44] /* ty=Tensor[(128, 3, 3, 128), float16] */, meta[relay.Constant][45] /* ty=Tensor[(1, 1, 1, 128), float16] */) /* ty=Tensor[(32, 28, 28, 128), float16] */;
  %170 = fn (%p030: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p128: Tensor[(512, 1, 1, 128), float16] /* ty=Tensor[(512, 1, 1, 128), float16] */, %p228: Tensor[(1, 1, 1, 512), float16] /* ty=Tensor[(1, 1, 1, 512), float16] */, %p39: Tensor[(32, 28, 28, 512), float16] /* ty=Tensor[(32, 28, 28, 512), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 512), float16] {
    %67 = nn.conv2d(%p030, %p128, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 512), float16] */;
    %68 = add(%67, %p228) /* ty=Tensor[(32, 28, 28, 512), float16] */;
    %69 = add(%68, %p39) /* ty=Tensor[(32, 28, 28, 512), float16] */;
    nn.relu(%69) /* ty=Tensor[(32, 28, 28, 512), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(512, 1, 1, 128), float16], Tensor[(1, 1, 1, 512), float16], Tensor[(32, 28, 28, 512), float16]) -> Tensor[(32, 28, 28, 512), float16] */;
  %171 = %170(%169, meta[relay.Constant][46] /* ty=Tensor[(512, 1, 1, 128), float16] */, meta[relay.Constant][47] /* ty=Tensor[(1, 1, 1, 512), float16] */, %165) /* ty=Tensor[(32, 28, 28, 512), float16] */;
  %172 = fn (%p029: Tensor[(32, 28, 28, 512), float16] /* ty=Tensor[(32, 28, 28, 512), float16] */, %p127: Tensor[(256, 1, 1, 512), float16] /* ty=Tensor[(256, 1, 1, 512), float16] */, %p227: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 256), float16] {
    %65 = nn.conv2d(%p029, %p127, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 256), float16] */;
    %66 = add(%65, %p227) /* ty=Tensor[(32, 28, 28, 256), float16] */;
    nn.relu(%66) /* ty=Tensor[(32, 28, 28, 256), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 512), float16], Tensor[(256, 1, 1, 512), float16], Tensor[(1, 1, 1, 256), float16]) -> Tensor[(32, 28, 28, 256), float16] */;
  %173 = %172(%171, meta[relay.Constant][48] /* ty=Tensor[(256, 1, 1, 512), float16] */, meta[relay.Constant][49] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(32, 28, 28, 256), float16] */;
  %174 = fn (%p028: Tensor[(32, 28, 28, 256), float16] /* ty=Tensor[(32, 28, 28, 256), float16] */, %p126: Tensor[(256, 3, 3, 256), float16] /* ty=Tensor[(256, 3, 3, 256), float16] */, %p226: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 256), float16] {
    %63 = nn.conv2d(%p028, %p126, strides=[2, 2], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 256), float16] */;
    %64 = add(%63, %p226) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    nn.relu(%64) /* ty=Tensor[(32, 14, 14, 256), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 256), float16], Tensor[(256, 3, 3, 256), float16], Tensor[(1, 1, 1, 256), float16]) -> Tensor[(32, 14, 14, 256), float16] */;
  %176 = fn (%p056: Tensor[(32, 28, 28, 512), float16] /* ty=Tensor[(32, 28, 28, 512), float16] */, %p152: Tensor[(1024, 1, 1, 512), float16] /* ty=Tensor[(1024, 1, 1, 512), float16] */, %p252: Tensor[(1, 1, 1, 1024), float16] /* ty=Tensor[(1, 1, 1, 1024), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 1024), float16] {
    %175 = nn.conv2d(%p056, %p152, strides=[2, 2], padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    add(%175, %p252) /* ty=Tensor[(32, 14, 14, 1024), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 512), float16], Tensor[(1024, 1, 1, 512), float16], Tensor[(1, 1, 1, 1024), float16]) -> Tensor[(32, 14, 14, 1024), float16] */;
  %177 = %174(%173, meta[relay.Constant][50] /* ty=Tensor[(256, 3, 3, 256), float16] */, meta[relay.Constant][51] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(32, 14, 14, 256), float16] */;
  %178 = %176(%171, meta[relay.Constant][54] /* ty=Tensor[(1024, 1, 1, 512), float16] */, meta[relay.Constant][55] /* ty=Tensor[(1, 1, 1, 1024), float16] */) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
  %179 = fn (%p027: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p125: Tensor[(1024, 1, 1, 256), float16] /* ty=Tensor[(1024, 1, 1, 256), float16] */, %p225: Tensor[(1, 1, 1, 1024), float16] /* ty=Tensor[(1, 1, 1, 1024), float16] */, %p38: Tensor[(32, 14, 14, 1024), float16] /* ty=Tensor[(32, 14, 14, 1024), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 1024), float16] {
    %60 = nn.conv2d(%p027, %p125, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    %61 = add(%60, %p225) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    %62 = add(%61, %p38) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    nn.relu(%62) /* ty=Tensor[(32, 14, 14, 1024), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(1024, 1, 1, 256), float16], Tensor[(1, 1, 1, 1024), float16], Tensor[(32, 14, 14, 1024), float16]) -> Tensor[(32, 14, 14, 1024), float16] */;
  %180 = %179(%177, meta[relay.Constant][52] /* ty=Tensor[(1024, 1, 1, 256), float16] */, meta[relay.Constant][53] /* ty=Tensor[(1, 1, 1, 1024), float16] */, %178) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
  %181 = fn (%p026: Tensor[(32, 14, 14, 1024), float16] /* ty=Tensor[(32, 14, 14, 1024), float16] */, %p124: Tensor[(256, 1, 1, 1024), float16] /* ty=Tensor[(256, 1, 1, 1024), float16] */, %p224: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 256), float16] {
    %58 = nn.conv2d(%p026, %p124, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 256), float16] */;
    %59 = add(%58, %p224) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    nn.relu(%59) /* ty=Tensor[(32, 14, 14, 256), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 1024), float16], Tensor[(256, 1, 1, 1024), float16], Tensor[(1, 1, 1, 256), float16]) -> Tensor[(32, 14, 14, 256), float16] */;
  %182 = %181(%180, meta[relay.Constant][56] /* ty=Tensor[(256, 1, 1, 1024), float16] */, meta[relay.Constant][57] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(32, 14, 14, 256), float16] */;
  %183 = fn (%p025: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p123: Tensor[(256, 3, 3, 256), float16] /* ty=Tensor[(256, 3, 3, 256), float16] */, %p223: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 256), float16] {
    %56 = nn.conv2d(%p025, %p123, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 256), float16] */;
    %57 = add(%56, %p223) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    nn.relu(%57) /* ty=Tensor[(32, 14, 14, 256), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(256, 3, 3, 256), float16], Tensor[(1, 1, 1, 256), float16]) -> Tensor[(32, 14, 14, 256), float16] */;
  %184 = %183(%182, meta[relay.Constant][58] /* ty=Tensor[(256, 3, 3, 256), float16] */, meta[relay.Constant][59] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(32, 14, 14, 256), float16] */;
  %185 = fn (%p024: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p122: Tensor[(1024, 1, 1, 256), float16] /* ty=Tensor[(1024, 1, 1, 256), float16] */, %p222: Tensor[(1, 1, 1, 1024), float16] /* ty=Tensor[(1, 1, 1, 1024), float16] */, %p37: Tensor[(32, 14, 14, 1024), float16] /* ty=Tensor[(32, 14, 14, 1024), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 1024), float16] {
    %53 = nn.conv2d(%p024, %p122, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    %54 = add(%53, %p222) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    %55 = add(%54, %p37) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    nn.relu(%55) /* ty=Tensor[(32, 14, 14, 1024), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(1024, 1, 1, 256), float16], Tensor[(1, 1, 1, 1024), float16], Tensor[(32, 14, 14, 1024), float16]) -> Tensor[(32, 14, 14, 1024), float16] */;
  %186 = %185(%184, meta[relay.Constant][60] /* ty=Tensor[(1024, 1, 1, 256), float16] */, meta[relay.Constant][61] /* ty=Tensor[(1, 1, 1, 1024), float16] */, %180) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
  %187 = fn (%p023: Tensor[(32, 14, 14, 1024), float16] /* ty=Tensor[(32, 14, 14, 1024), float16] */, %p121: Tensor[(256, 1, 1, 1024), float16] /* ty=Tensor[(256, 1, 1, 1024), float16] */, %p221: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 256), float16] {
    %51 = nn.conv2d(%p023, %p121, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 256), float16] */;
    %52 = add(%51, %p221) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    nn.relu(%52) /* ty=Tensor[(32, 14, 14, 256), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 1024), float16], Tensor[(256, 1, 1, 1024), float16], Tensor[(1, 1, 1, 256), float16]) -> Tensor[(32, 14, 14, 256), float16] */;
  %188 = %187(%186, meta[relay.Constant][62] /* ty=Tensor[(256, 1, 1, 1024), float16] */, meta[relay.Constant][63] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(32, 14, 14, 256), float16] */;
  %189 = fn (%p022: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p120: Tensor[(256, 3, 3, 256), float16] /* ty=Tensor[(256, 3, 3, 256), float16] */, %p220: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 256), float16] {
    %49 = nn.conv2d(%p022, %p120, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 256), float16] */;
    %50 = add(%49, %p220) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    nn.relu(%50) /* ty=Tensor[(32, 14, 14, 256), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(256, 3, 3, 256), float16], Tensor[(1, 1, 1, 256), float16]) -> Tensor[(32, 14, 14, 256), float16] */;
  %190 = %189(%188, meta[relay.Constant][64] /* ty=Tensor[(256, 3, 3, 256), float16] */, meta[relay.Constant][65] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(32, 14, 14, 256), float16] */;
  %191 = fn (%p021: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p119: Tensor[(1024, 1, 1, 256), float16] /* ty=Tensor[(1024, 1, 1, 256), float16] */, %p219: Tensor[(1, 1, 1, 1024), float16] /* ty=Tensor[(1, 1, 1, 1024), float16] */, %p36: Tensor[(32, 14, 14, 1024), float16] /* ty=Tensor[(32, 14, 14, 1024), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 1024), float16] {
    %46 = nn.conv2d(%p021, %p119, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    %47 = add(%46, %p219) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    %48 = add(%47, %p36) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    nn.relu(%48) /* ty=Tensor[(32, 14, 14, 1024), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(1024, 1, 1, 256), float16], Tensor[(1, 1, 1, 1024), float16], Tensor[(32, 14, 14, 1024), float16]) -> Tensor[(32, 14, 14, 1024), float16] */;
  %192 = %191(%190, meta[relay.Constant][66] /* ty=Tensor[(1024, 1, 1, 256), float16] */, meta[relay.Constant][67] /* ty=Tensor[(1, 1, 1, 1024), float16] */, %186) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
  %193 = fn (%p020: Tensor[(32, 14, 14, 1024), float16] /* ty=Tensor[(32, 14, 14, 1024), float16] */, %p118: Tensor[(256, 1, 1, 1024), float16] /* ty=Tensor[(256, 1, 1, 1024), float16] */, %p218: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 256), float16] {
    %44 = nn.conv2d(%p020, %p118, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 256), float16] */;
    %45 = add(%44, %p218) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    nn.relu(%45) /* ty=Tensor[(32, 14, 14, 256), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 1024), float16], Tensor[(256, 1, 1, 1024), float16], Tensor[(1, 1, 1, 256), float16]) -> Tensor[(32, 14, 14, 256), float16] */;
  %194 = %193(%192, meta[relay.Constant][68] /* ty=Tensor[(256, 1, 1, 1024), float16] */, meta[relay.Constant][69] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(32, 14, 14, 256), float16] */;
  %195 = fn (%p019: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p117: Tensor[(256, 3, 3, 256), float16] /* ty=Tensor[(256, 3, 3, 256), float16] */, %p217: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 256), float16] {
    %42 = nn.conv2d(%p019, %p117, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 256), float16] */;
    %43 = add(%42, %p217) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    nn.relu(%43) /* ty=Tensor[(32, 14, 14, 256), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(256, 3, 3, 256), float16], Tensor[(1, 1, 1, 256), float16]) -> Tensor[(32, 14, 14, 256), float16] */;
  %196 = %195(%194, meta[relay.Constant][70] /* ty=Tensor[(256, 3, 3, 256), float16] */, meta[relay.Constant][71] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(32, 14, 14, 256), float16] */;
  %197 = fn (%p018: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p116: Tensor[(1024, 1, 1, 256), float16] /* ty=Tensor[(1024, 1, 1, 256), float16] */, %p216: Tensor[(1, 1, 1, 1024), float16] /* ty=Tensor[(1, 1, 1, 1024), float16] */, %p35: Tensor[(32, 14, 14, 1024), float16] /* ty=Tensor[(32, 14, 14, 1024), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 1024), float16] {
    %39 = nn.conv2d(%p018, %p116, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    %40 = add(%39, %p216) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    %41 = add(%40, %p35) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    nn.relu(%41) /* ty=Tensor[(32, 14, 14, 1024), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(1024, 1, 1, 256), float16], Tensor[(1, 1, 1, 1024), float16], Tensor[(32, 14, 14, 1024), float16]) -> Tensor[(32, 14, 14, 1024), float16] */;
  %198 = %197(%196, meta[relay.Constant][72] /* ty=Tensor[(1024, 1, 1, 256), float16] */, meta[relay.Constant][73] /* ty=Tensor[(1, 1, 1, 1024), float16] */, %192) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
  %199 = fn (%p017: Tensor[(32, 14, 14, 1024), float16] /* ty=Tensor[(32, 14, 14, 1024), float16] */, %p115: Tensor[(256, 1, 1, 1024), float16] /* ty=Tensor[(256, 1, 1, 1024), float16] */, %p215: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 256), float16] {
    %37 = nn.conv2d(%p017, %p115, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 256), float16] */;
    %38 = add(%37, %p215) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    nn.relu(%38) /* ty=Tensor[(32, 14, 14, 256), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 1024), float16], Tensor[(256, 1, 1, 1024), float16], Tensor[(1, 1, 1, 256), float16]) -> Tensor[(32, 14, 14, 256), float16] */;
  %200 = %199(%198, meta[relay.Constant][74] /* ty=Tensor[(256, 1, 1, 1024), float16] */, meta[relay.Constant][75] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(32, 14, 14, 256), float16] */;
  %201 = fn (%p016: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p114: Tensor[(256, 3, 3, 256), float16] /* ty=Tensor[(256, 3, 3, 256), float16] */, %p214: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 256), float16] {
    %35 = nn.conv2d(%p016, %p114, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 256), float16] */;
    %36 = add(%35, %p214) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    nn.relu(%36) /* ty=Tensor[(32, 14, 14, 256), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(256, 3, 3, 256), float16], Tensor[(1, 1, 1, 256), float16]) -> Tensor[(32, 14, 14, 256), float16] */;
  %202 = %201(%200, meta[relay.Constant][76] /* ty=Tensor[(256, 3, 3, 256), float16] */, meta[relay.Constant][77] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(32, 14, 14, 256), float16] */;
  %203 = fn (%p015: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p113: Tensor[(1024, 1, 1, 256), float16] /* ty=Tensor[(1024, 1, 1, 256), float16] */, %p213: Tensor[(1, 1, 1, 1024), float16] /* ty=Tensor[(1, 1, 1, 1024), float16] */, %p34: Tensor[(32, 14, 14, 1024), float16] /* ty=Tensor[(32, 14, 14, 1024), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 1024), float16] {
    %32 = nn.conv2d(%p015, %p113, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    %33 = add(%32, %p213) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    %34 = add(%33, %p34) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    nn.relu(%34) /* ty=Tensor[(32, 14, 14, 1024), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(1024, 1, 1, 256), float16], Tensor[(1, 1, 1, 1024), float16], Tensor[(32, 14, 14, 1024), float16]) -> Tensor[(32, 14, 14, 1024), float16] */;
  %204 = %203(%202, meta[relay.Constant][78] /* ty=Tensor[(1024, 1, 1, 256), float16] */, meta[relay.Constant][79] /* ty=Tensor[(1, 1, 1, 1024), float16] */, %198) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
  %205 = fn (%p014: Tensor[(32, 14, 14, 1024), float16] /* ty=Tensor[(32, 14, 14, 1024), float16] */, %p112: Tensor[(256, 1, 1, 1024), float16] /* ty=Tensor[(256, 1, 1, 1024), float16] */, %p212: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 256), float16] {
    %30 = nn.conv2d(%p014, %p112, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 256), float16] */;
    %31 = add(%30, %p212) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    nn.relu(%31) /* ty=Tensor[(32, 14, 14, 256), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 1024), float16], Tensor[(256, 1, 1, 1024), float16], Tensor[(1, 1, 1, 256), float16]) -> Tensor[(32, 14, 14, 256), float16] */;
  %206 = %205(%204, meta[relay.Constant][80] /* ty=Tensor[(256, 1, 1, 1024), float16] */, meta[relay.Constant][81] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(32, 14, 14, 256), float16] */;
  %207 = fn (%p013: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p111: Tensor[(256, 3, 3, 256), float16] /* ty=Tensor[(256, 3, 3, 256), float16] */, %p211: Tensor[(1, 1, 1, 256), float16] /* ty=Tensor[(1, 1, 1, 256), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 256), float16] {
    %28 = nn.conv2d(%p013, %p111, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 256), float16] */;
    %29 = add(%28, %p211) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    nn.relu(%29) /* ty=Tensor[(32, 14, 14, 256), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(256, 3, 3, 256), float16], Tensor[(1, 1, 1, 256), float16]) -> Tensor[(32, 14, 14, 256), float16] */;
  %208 = %207(%206, meta[relay.Constant][82] /* ty=Tensor[(256, 3, 3, 256), float16] */, meta[relay.Constant][83] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(32, 14, 14, 256), float16] */;
  %209 = fn (%p012: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p110: Tensor[(1024, 1, 1, 256), float16] /* ty=Tensor[(1024, 1, 1, 256), float16] */, %p210: Tensor[(1, 1, 1, 1024), float16] /* ty=Tensor[(1, 1, 1, 1024), float16] */, %p33: Tensor[(32, 14, 14, 1024), float16] /* ty=Tensor[(32, 14, 14, 1024), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 1024), float16] {
    %25 = nn.conv2d(%p012, %p110, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    %26 = add(%25, %p210) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    %27 = add(%26, %p33) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    nn.relu(%27) /* ty=Tensor[(32, 14, 14, 1024), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(1024, 1, 1, 256), float16], Tensor[(1, 1, 1, 1024), float16], Tensor[(32, 14, 14, 1024), float16]) -> Tensor[(32, 14, 14, 1024), float16] */;
  %210 = %209(%208, meta[relay.Constant][84] /* ty=Tensor[(1024, 1, 1, 256), float16] */, meta[relay.Constant][85] /* ty=Tensor[(1, 1, 1, 1024), float16] */, %204) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
  %211 = fn (%p011: Tensor[(32, 14, 14, 1024), float16] /* ty=Tensor[(32, 14, 14, 1024), float16] */, %p19: Tensor[(512, 1, 1, 1024), float16] /* ty=Tensor[(512, 1, 1, 1024), float16] */, %p29: Tensor[(1, 1, 1, 512), float16] /* ty=Tensor[(1, 1, 1, 512), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 512), float16] {
    %23 = nn.conv2d(%p011, %p19, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 512), float16] */;
    %24 = add(%23, %p29) /* ty=Tensor[(32, 14, 14, 512), float16] */;
    nn.relu(%24) /* ty=Tensor[(32, 14, 14, 512), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 1024), float16], Tensor[(512, 1, 1, 1024), float16], Tensor[(1, 1, 1, 512), float16]) -> Tensor[(32, 14, 14, 512), float16] */;
  %212 = %211(%210, meta[relay.Constant][86] /* ty=Tensor[(512, 1, 1, 1024), float16] */, meta[relay.Constant][87] /* ty=Tensor[(1, 1, 1, 512), float16] */) /* ty=Tensor[(32, 14, 14, 512), float16] */;
  %213 = fn (%p010: Tensor[(32, 14, 14, 512), float16] /* ty=Tensor[(32, 14, 14, 512), float16] */, %p18: Tensor[(512, 3, 3, 512), float16] /* ty=Tensor[(512, 3, 3, 512), float16] */, %p28: Tensor[(1, 1, 1, 512), float16] /* ty=Tensor[(1, 1, 1, 512), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 512), float16] {
    %21 = nn.conv2d(%p010, %p18, strides=[2, 2], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 512), float16] */;
    %22 = add(%21, %p28) /* ty=Tensor[(32, 7, 7, 512), float16] */;
    nn.relu(%22) /* ty=Tensor[(32, 7, 7, 512), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 512), float16], Tensor[(512, 3, 3, 512), float16], Tensor[(1, 1, 1, 512), float16]) -> Tensor[(32, 7, 7, 512), float16] */;
  %215 = fn (%p057: Tensor[(32, 14, 14, 1024), float16] /* ty=Tensor[(32, 14, 14, 1024), float16] */, %p153: Tensor[(2048, 1, 1, 1024), float16] /* ty=Tensor[(2048, 1, 1, 1024), float16] */, %p253: Tensor[(1, 1, 1, 2048), float16] /* ty=Tensor[(1, 1, 1, 2048), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 2048), float16] {
    %214 = nn.conv2d(%p057, %p153, strides=[2, 2], padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 2048), float16] */;
    add(%214, %p253) /* ty=Tensor[(32, 7, 7, 2048), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 1024), float16], Tensor[(2048, 1, 1, 1024), float16], Tensor[(1, 1, 1, 2048), float16]) -> Tensor[(32, 7, 7, 2048), float16] */;
  %216 = %213(%212, meta[relay.Constant][88] /* ty=Tensor[(512, 3, 3, 512), float16] */, meta[relay.Constant][89] /* ty=Tensor[(1, 1, 1, 512), float16] */) /* ty=Tensor[(32, 7, 7, 512), float16] */;
  %217 = %215(%210, meta[relay.Constant][92] /* ty=Tensor[(2048, 1, 1, 1024), float16] */, meta[relay.Constant][93] /* ty=Tensor[(1, 1, 1, 2048), float16] */) /* ty=Tensor[(32, 7, 7, 2048), float16] */;
  %218 = fn (%p09: Tensor[(32, 7, 7, 512), float16] /* ty=Tensor[(32, 7, 7, 512), float16] */, %p17: Tensor[(2048, 1, 1, 512), float16] /* ty=Tensor[(2048, 1, 1, 512), float16] */, %p27: Tensor[(1, 1, 1, 2048), float16] /* ty=Tensor[(1, 1, 1, 2048), float16] */, %p32: Tensor[(32, 7, 7, 2048), float16] /* ty=Tensor[(32, 7, 7, 2048), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 2048), float16] {
    %18 = nn.conv2d(%p09, %p17, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 2048), float16] */;
    %19 = add(%18, %p27) /* ty=Tensor[(32, 7, 7, 2048), float16] */;
    %20 = add(%19, %p32) /* ty=Tensor[(32, 7, 7, 2048), float16] */;
    nn.relu(%20) /* ty=Tensor[(32, 7, 7, 2048), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 512), float16], Tensor[(2048, 1, 1, 512), float16], Tensor[(1, 1, 1, 2048), float16], Tensor[(32, 7, 7, 2048), float16]) -> Tensor[(32, 7, 7, 2048), float16] */;
  %219 = %218(%216, meta[relay.Constant][90] /* ty=Tensor[(2048, 1, 1, 512), float16] */, meta[relay.Constant][91] /* ty=Tensor[(1, 1, 1, 2048), float16] */, %217) /* ty=Tensor[(32, 7, 7, 2048), float16] */;
  %220 = fn (%p08: Tensor[(32, 7, 7, 2048), float16] /* ty=Tensor[(32, 7, 7, 2048), float16] */, %p16: Tensor[(512, 1, 1, 2048), float16] /* ty=Tensor[(512, 1, 1, 2048), float16] */, %p26: Tensor[(1, 1, 1, 512), float16] /* ty=Tensor[(1, 1, 1, 512), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 512), float16] {
    %16 = nn.conv2d(%p08, %p16, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 512), float16] */;
    %17 = add(%16, %p26) /* ty=Tensor[(32, 7, 7, 512), float16] */;
    nn.relu(%17) /* ty=Tensor[(32, 7, 7, 512), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 2048), float16], Tensor[(512, 1, 1, 2048), float16], Tensor[(1, 1, 1, 512), float16]) -> Tensor[(32, 7, 7, 512), float16] */;
  %221 = %220(%219, meta[relay.Constant][94] /* ty=Tensor[(512, 1, 1, 2048), float16] */, meta[relay.Constant][95] /* ty=Tensor[(1, 1, 1, 512), float16] */) /* ty=Tensor[(32, 7, 7, 512), float16] */;
  %222 = fn (%p07: Tensor[(32, 7, 7, 512), float16] /* ty=Tensor[(32, 7, 7, 512), float16] */, %p15: Tensor[(512, 3, 3, 512), float16] /* ty=Tensor[(512, 3, 3, 512), float16] */, %p25: Tensor[(1, 1, 1, 512), float16] /* ty=Tensor[(1, 1, 1, 512), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 512), float16] {
    %14 = nn.conv2d(%p07, %p15, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 512), float16] */;
    %15 = add(%14, %p25) /* ty=Tensor[(32, 7, 7, 512), float16] */;
    nn.relu(%15) /* ty=Tensor[(32, 7, 7, 512), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 512), float16], Tensor[(512, 3, 3, 512), float16], Tensor[(1, 1, 1, 512), float16]) -> Tensor[(32, 7, 7, 512), float16] */;
  %223 = %222(%221, meta[relay.Constant][96] /* ty=Tensor[(512, 3, 3, 512), float16] */, meta[relay.Constant][97] /* ty=Tensor[(1, 1, 1, 512), float16] */) /* ty=Tensor[(32, 7, 7, 512), float16] */;
  %224 = fn (%p06: Tensor[(32, 7, 7, 512), float16] /* ty=Tensor[(32, 7, 7, 512), float16] */, %p14: Tensor[(2048, 1, 1, 512), float16] /* ty=Tensor[(2048, 1, 1, 512), float16] */, %p24: Tensor[(1, 1, 1, 2048), float16] /* ty=Tensor[(1, 1, 1, 2048), float16] */, %p31: Tensor[(32, 7, 7, 2048), float16] /* ty=Tensor[(32, 7, 7, 2048), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 2048), float16] {
    %11 = nn.conv2d(%p06, %p14, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 2048), float16] */;
    %12 = add(%11, %p24) /* ty=Tensor[(32, 7, 7, 2048), float16] */;
    %13 = add(%12, %p31) /* ty=Tensor[(32, 7, 7, 2048), float16] */;
    nn.relu(%13) /* ty=Tensor[(32, 7, 7, 2048), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 512), float16], Tensor[(2048, 1, 1, 512), float16], Tensor[(1, 1, 1, 2048), float16], Tensor[(32, 7, 7, 2048), float16]) -> Tensor[(32, 7, 7, 2048), float16] */;
  %225 = %224(%223, meta[relay.Constant][98] /* ty=Tensor[(2048, 1, 1, 512), float16] */, meta[relay.Constant][99] /* ty=Tensor[(1, 1, 1, 2048), float16] */, %219) /* ty=Tensor[(32, 7, 7, 2048), float16] */;
  %226 = fn (%p05: Tensor[(32, 7, 7, 2048), float16] /* ty=Tensor[(32, 7, 7, 2048), float16] */, %p13: Tensor[(512, 1, 1, 2048), float16] /* ty=Tensor[(512, 1, 1, 2048), float16] */, %p23: Tensor[(1, 1, 1, 512), float16] /* ty=Tensor[(1, 1, 1, 512), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 512), float16] {
    %9 = nn.conv2d(%p05, %p13, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 512), float16] */;
    %10 = add(%9, %p23) /* ty=Tensor[(32, 7, 7, 512), float16] */;
    nn.relu(%10) /* ty=Tensor[(32, 7, 7, 512), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 2048), float16], Tensor[(512, 1, 1, 2048), float16], Tensor[(1, 1, 1, 512), float16]) -> Tensor[(32, 7, 7, 512), float16] */;
  %227 = %226(%225, meta[relay.Constant][100] /* ty=Tensor[(512, 1, 1, 2048), float16] */, meta[relay.Constant][101] /* ty=Tensor[(1, 1, 1, 512), float16] */) /* ty=Tensor[(32, 7, 7, 512), float16] */;
  %228 = fn (%p04: Tensor[(32, 7, 7, 512), float16] /* ty=Tensor[(32, 7, 7, 512), float16] */, %p12: Tensor[(512, 3, 3, 512), float16] /* ty=Tensor[(512, 3, 3, 512), float16] */, %p22: Tensor[(1, 1, 1, 512), float16] /* ty=Tensor[(1, 1, 1, 512), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 512), float16] {
    %7 = nn.conv2d(%p04, %p12, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 512), float16] */;
    %8 = add(%7, %p22) /* ty=Tensor[(32, 7, 7, 512), float16] */;
    nn.relu(%8) /* ty=Tensor[(32, 7, 7, 512), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 512), float16], Tensor[(512, 3, 3, 512), float16], Tensor[(1, 1, 1, 512), float16]) -> Tensor[(32, 7, 7, 512), float16] */;
  %229 = %228(%227, meta[relay.Constant][102] /* ty=Tensor[(512, 3, 3, 512), float16] */, meta[relay.Constant][103] /* ty=Tensor[(1, 1, 1, 512), float16] */) /* ty=Tensor[(32, 7, 7, 512), float16] */;
  %230 = fn (%p03: Tensor[(32, 7, 7, 512), float16] /* ty=Tensor[(32, 7, 7, 512), float16] */, %p11: Tensor[(2048, 1, 1, 512), float16] /* ty=Tensor[(2048, 1, 1, 512), float16] */, %p21: Tensor[(1, 1, 1, 2048), float16] /* ty=Tensor[(1, 1, 1, 2048), float16] */, %p3: Tensor[(32, 7, 7, 2048), float16] /* ty=Tensor[(32, 7, 7, 2048), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 2048), float32] {
    %3 = nn.conv2d(%p03, %p11, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 2048), float16] */;
    %4 = add(%3, %p21) /* ty=Tensor[(32, 7, 7, 2048), float16] */;
    %5 = add(%4, %p3) /* ty=Tensor[(32, 7, 7, 2048), float16] */;
    %6 = nn.relu(%5) /* ty=Tensor[(32, 7, 7, 2048), float16] */;
    cast(%6, dtype="float32") /* ty=Tensor[(32, 7, 7, 2048), float32] */
  } /* ty=fn (Tensor[(32, 7, 7, 512), float16], Tensor[(2048, 1, 1, 512), float16], Tensor[(1, 1, 1, 2048), float16], Tensor[(32, 7, 7, 2048), float16]) -> Tensor[(32, 7, 7, 2048), float32] */;
  %231 = %230(%229, meta[relay.Constant][104] /* ty=Tensor[(2048, 1, 1, 512), float16] */, meta[relay.Constant][105] /* ty=Tensor[(1, 1, 1, 2048), float16] */, %225) /* ty=Tensor[(32, 7, 7, 2048), float32] */;
  %232 = fn (%p02: Tensor[(32, 7, 7, 2048), float32] /* ty=Tensor[(32, 7, 7, 2048), float32] */, Primitive=1) -> Tensor[(32, 1, 1, 2048), float32] {
    nn.global_avg_pool2d(%p02, layout="NHWC") /* ty=Tensor[(32, 1, 1, 2048), float32] */
  } /* ty=fn (Tensor[(32, 7, 7, 2048), float32]) -> Tensor[(32, 1, 1, 2048), float32] */;
  %233 = %232(%231) /* ty=Tensor[(32, 1, 1, 2048), float32] */;
  %234 = fn (%p01: Tensor[(32, 1, 1, 2048), float32] /* ty=Tensor[(32, 1, 1, 2048), float32] */, Primitive=1) -> Tensor[(32, 2048), float16] {
    %1 = layout_transform(%p01, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(32, 2048, 1, 1), float32] */;
    %2 = nn.batch_flatten(%1) /* ty=Tensor[(32, 2048), float32] */;
    cast(%2, dtype="float16") /* ty=Tensor[(32, 2048), float16] */
  } /* ty=fn (Tensor[(32, 1, 1, 2048), float32]) -> Tensor[(32, 2048), float16] */;
  %235 = %234(%233) /* ty=Tensor[(32, 2048), float16] */;
  %236 = fn (%p0: Tensor[(32, 2048), float16] /* ty=Tensor[(32, 2048), float16] */, %p1: Tensor[(1000, 2048), float16] /* ty=Tensor[(1000, 2048), float16] */, %p2: Tensor[(1, 1000), float16] /* ty=Tensor[(1, 1000), float16] */, Primitive=1) -> Tensor[(32, 1000), float16] {
    %0 = nn.dense(%p0, %p1, units=1000, out_dtype="float16") /* ty=Tensor[(32, 1000), float16] */;
    add(%0, %p2) /* ty=Tensor[(32, 1000), float16] */
  } /* ty=fn (Tensor[(32, 2048), float16], Tensor[(1000, 2048), float16], Tensor[(1, 1000), float16]) -> Tensor[(32, 1000), float16] */;
  %236(%235, meta[relay.Constant][106] /* ty=Tensor[(1000, 2048), float16] span=/fc/Gemm.fc.weight:0:0 */, meta[relay.Constant][107] /* ty=Tensor[(1, 1000), float16] */) /* ty=Tensor[(32, 1000), float16] */
}


