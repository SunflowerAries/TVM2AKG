type List[A] {
  Cons(A, List[A]),
  Nil,
}

type Option[A] {
  Some(A),
  None,
}

type Tree[A] {
  Rose(A, List[Tree[A]]),
}

type tensor_float16_t {
  tensor_nil_float16,
  tensor0_float16(float16),
  tensor1_float16(Tensor[(?), float16]),
  tensor2_float16(Tensor[(?, ?), float16]),
  tensor3_float16(Tensor[(?, ?, ?), float16]),
  tensor4_float16(Tensor[(?, ?, ?, ?), float16]),
  tensor5_float16(Tensor[(?, ?, ?, ?, ?), float16]),
  tensor6_float16(Tensor[(?, ?, ?, ?, ?, ?), float16]),
}

type tensor_float32_t {
  tensor_nil_float32,
  tensor0_float32(float32),
  tensor1_float32(Tensor[(?), float32]),
  tensor2_float32(Tensor[(?, ?), float32]),
  tensor3_float32(Tensor[(?, ?, ?), float32]),
  tensor4_float32(Tensor[(?, ?, ?, ?), float32]),
  tensor5_float32(Tensor[(?, ?, ?, ?, ?), float32]),
  tensor6_float32(Tensor[(?, ?, ?, ?, ?, ?), float32]),
}

type tensor_float64_t {
  tensor_nil_float64,
  tensor0_float64(float64),
  tensor1_float64(Tensor[(?), float64]),
  tensor2_float64(Tensor[(?, ?), float64]),
  tensor3_float64(Tensor[(?, ?, ?), float64]),
  tensor4_float64(Tensor[(?, ?, ?, ?), float64]),
  tensor5_float64(Tensor[(?, ?, ?, ?, ?), float64]),
  tensor6_float64(Tensor[(?, ?, ?, ?, ?, ?), float64]),
}

type tensor_int16_t {
  tensor_nil_int16,
  tensor0_int16(int16),
  tensor1_int16(Tensor[(?), int16]),
  tensor2_int16(Tensor[(?, ?), int16]),
  tensor3_int16(Tensor[(?, ?, ?), int16]),
  tensor4_int16(Tensor[(?, ?, ?, ?), int16]),
  tensor5_int16(Tensor[(?, ?, ?, ?, ?), int16]),
  tensor6_int16(Tensor[(?, ?, ?, ?, ?, ?), int16]),
}

type tensor_int32_t {
  tensor_nil_int32,
  tensor0_int32(int32),
  tensor1_int32(Tensor[(?), int32]),
  tensor2_int32(Tensor[(?, ?), int32]),
  tensor3_int32(Tensor[(?, ?, ?), int32]),
  tensor4_int32(Tensor[(?, ?, ?, ?), int32]),
  tensor5_int32(Tensor[(?, ?, ?, ?, ?), int32]),
  tensor6_int32(Tensor[(?, ?, ?, ?, ?, ?), int32]),
}

type tensor_int64_t {
  tensor_nil_int64,
  tensor0_int64(int64),
  tensor1_int64(Tensor[(?), int64]),
  tensor2_int64(Tensor[(?, ?), int64]),
  tensor3_int64(Tensor[(?, ?, ?), int64]),
  tensor4_int64(Tensor[(?, ?, ?, ?), int64]),
  tensor5_int64(Tensor[(?, ?, ?, ?, ?), int64]),
  tensor6_int64(Tensor[(?, ?, ?, ?, ?, ?), int64]),
}

type tensor_int8_t {
  tensor_nil_int8,
  tensor0_int8(int8),
  tensor1_int8(Tensor[(?), int8]),
  tensor2_int8(Tensor[(?, ?), int8]),
  tensor3_int8(Tensor[(?, ?, ?), int8]),
  tensor4_int8(Tensor[(?, ?, ?, ?), int8]),
  tensor5_int8(Tensor[(?, ?, ?, ?, ?), int8]),
  tensor6_int8(Tensor[(?, ?, ?, ?, ?, ?), int8]),
}

type tensor_uint16_t {
  tensor_nil_uint16,
  tensor0_uint16(uint16),
  tensor1_uint16(Tensor[(?), uint16]),
  tensor2_uint16(Tensor[(?, ?), uint16]),
  tensor3_uint16(Tensor[(?, ?, ?), uint16]),
  tensor4_uint16(Tensor[(?, ?, ?, ?), uint16]),
  tensor5_uint16(Tensor[(?, ?, ?, ?, ?), uint16]),
  tensor6_uint16(Tensor[(?, ?, ?, ?, ?, ?), uint16]),
}

type tensor_uint8_t {
  tensor_nil_uint8,
  tensor0_uint8(uint8),
  tensor1_uint8(Tensor[(?), uint8]),
  tensor2_uint8(Tensor[(?, ?), uint8]),
  tensor3_uint8(Tensor[(?, ?, ?), uint8]),
  tensor4_uint8(Tensor[(?, ?, ?, ?), uint8]),
  tensor5_uint8(Tensor[(?, ?, ?, ?, ?), uint8]),
  tensor6_uint8(Tensor[(?, ?, ?, ?, ?, ?), uint8]),
}

def @main(%input0: Tensor[(32, 3, 224, 224), float32] /* ty=Tensor[(32, 3, 224, 224), float32] span=aten::_convolution_0.input0:0:0 */) -> Tensor[(32, 1000), float16] {
  %25 = fn (%p015: Tensor[(32, 3, 224, 224), float32] /* ty=Tensor[(32, 3, 224, 224), float32] */, Primitive=1) -> Tensor[(32, 224, 224, 3), float16] {
    %24 = cast(%p015, dtype="float16") /* ty=Tensor[(32, 3, 224, 224), float16] */;
    layout_transform(%24, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(32, 224, 224, 3), float16] */
  } /* ty=fn (Tensor[(32, 3, 224, 224), float32]) -> Tensor[(32, 224, 224, 3), float16] */;
  %26 = %25(%input0) /* ty=Tensor[(32, 224, 224, 3), float16] */;
  %27 = fn (%p014: Tensor[(32, 224, 224, 3), float16] /* ty=Tensor[(32, 224, 224, 3), float16] */, %p118: Tensor[(64, 7, 7, 3), float16] /* ty=Tensor[(64, 7, 7, 3), float16] */, %p29: Tensor[(64), float16] /* ty=Tensor[(64), float16] */, %p34: Tensor[(64), float16] /* ty=Tensor[(64), float16] */, Primitive=1) -> Tensor[(32, 112, 112, 64), float16] {
    %21 = nn.conv2d(%p014, %p118, strides=[2, 2], padding=[3, 3, 3, 3], channels=64, kernel_size=[7, 7], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 112, 112, 64), float16] */;
    %22 = multiply(%21, %p29) /* ty=Tensor[(32, 112, 112, 64), float16] */;
    %23 = add(%22, %p34) /* ty=Tensor[(32, 112, 112, 64), float16] */;
    nn.relu(%23) /* ty=Tensor[(32, 112, 112, 64), float16] */
  } /* ty=fn (Tensor[(32, 224, 224, 3), float16], Tensor[(64, 7, 7, 3), float16], Tensor[(64), float16], Tensor[(64), float16]) -> Tensor[(32, 112, 112, 64), float16] */;
  %28 = %27(%26, meta[relay.Constant][0] /* ty=Tensor[(64, 7, 7, 3), float16] */, meta[relay.Constant][1] /* ty=Tensor[(64), float16] */, meta[relay.Constant][2] /* ty=Tensor[(64), float16] */) /* ty=Tensor[(32, 112, 112, 64), float16] */;
  %29 = fn (%p013: Tensor[(32, 112, 112, 64), float16] /* ty=Tensor[(32, 112, 112, 64), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 64), float16] {
    nn.max_pool2d(%p013, pool_size=[3, 3], strides=[2, 2], padding=[1, 1, 1, 1], layout="NHWC", out_layout="NHWC") /* ty=Tensor[(32, 56, 56, 64), float16] */
  } /* ty=fn (Tensor[(32, 112, 112, 64), float16]) -> Tensor[(32, 56, 56, 64), float16] */;
  %37 = %29(%28) /* ty=Tensor[(32, 56, 56, 64), float16] */;
  %38 = fn (%p018: Tensor[(32, 56, 56, 64), float16] /* ty=Tensor[(32, 56, 56, 64), float16] */, %p123: Tensor[(64), float16] /* ty=Tensor[(64), float16] */, %p212: Tensor[(64), float16] /* ty=Tensor[(64), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 64), float16] {
    %33 = (%p018,) /* ty=(Tensor[(32, 56, 56, 64), float16],) span=aten::cat_0:0:0 */;
    %34 = concatenate(%33, axis=3) /* ty=Tensor[(32, 56, 56, 64), float16] */;
    %35 = multiply(%34, %p123) /* ty=Tensor[(32, 56, 56, 64), float16] */;
    %36 = add(%35, %p212) /* ty=Tensor[(32, 56, 56, 64), float16] */;
    nn.relu(%36) /* ty=Tensor[(32, 56, 56, 64), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 64), float16], Tensor[(64), float16], Tensor[(64), float16]) -> Tensor[(32, 56, 56, 64), float16] */;
  %39 = %38(%37, meta[relay.Constant][3] /* ty=Tensor[(64), float16] */, meta[relay.Constant][4] /* ty=Tensor[(64), float16] */) /* ty=Tensor[(32, 56, 56, 64), float16] */;
  %40 = fn (%p017: Tensor[(32, 56, 56, 64), float16] /* ty=Tensor[(32, 56, 56, 64), float16] */, %p120: Tensor[(128, 1, 1, 64), float16] /* ty=Tensor[(128, 1, 1, 64), float16] */, %p210: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p35: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 128), float16] {
    %30 = nn.conv2d(%p017, %p120, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 56, 56, 128), float16] */;
    %31 = multiply(%30, %p210) /* ty=Tensor[(32, 56, 56, 128), float16] */;
    %32 = add(%31, %p35) /* ty=Tensor[(32, 56, 56, 128), float16] */;
    nn.relu(%32) /* ty=Tensor[(32, 56, 56, 128), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 64), float16], Tensor[(128, 1, 1, 64), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 56, 56, 128), float16] */;
  %41 = %40(%39, meta[relay.Constant][5] /* ty=Tensor[(128, 1, 1, 64), float16] */, meta[relay.Constant][6] /* ty=Tensor[(128), float16] */, meta[relay.Constant][7] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 56, 56, 128), float16] */;
  %42 = fn (%p016: Tensor[(32, 56, 56, 128), float16] /* ty=Tensor[(32, 56, 56, 128), float16] */, %p119: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 32), float16] {
    nn.conv2d(%p016, %p119, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 56, 56, 32), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 56, 56, 32), float16] */;
  %50 = %42(%41, meta[relay.Constant][8] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 56, 56, 32), float16] */;
  %51 = fn (%p021: Tensor[(32, 56, 56, 64), float16] /* ty=Tensor[(32, 56, 56, 64), float16] */, %p126: Tensor[(32, 56, 56, 32), float16] /* ty=Tensor[(32, 56, 56, 32), float16] */, %p214: Tensor[(96), float16] /* ty=Tensor[(96), float16] */, %p37: Tensor[(96), float16] /* ty=Tensor[(96), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 96), float16] {
    %46 = (%p021, %p126) /* ty=(Tensor[(32, 56, 56, 64), float16], Tensor[(32, 56, 56, 32), float16]) span=aten::cat_1:0:0 */;
    %47 = concatenate(%46, axis=3) /* ty=Tensor[(32, 56, 56, 96), float16] */;
    %48 = multiply(%47, %p214) /* ty=Tensor[(32, 56, 56, 96), float16] */;
    %49 = add(%48, %p37) /* ty=Tensor[(32, 56, 56, 96), float16] */;
    nn.relu(%49) /* ty=Tensor[(32, 56, 56, 96), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 64), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(96), float16], Tensor[(96), float16]) -> Tensor[(32, 56, 56, 96), float16] */;
  %52 = %51(%37, %50, meta[relay.Constant][9] /* ty=Tensor[(96), float16] */, meta[relay.Constant][10] /* ty=Tensor[(96), float16] */) /* ty=Tensor[(32, 56, 56, 96), float16] */;
  %53 = fn (%p020: Tensor[(32, 56, 56, 96), float16] /* ty=Tensor[(32, 56, 56, 96), float16] */, %p125: Tensor[(128, 1, 1, 96), float16] /* ty=Tensor[(128, 1, 1, 96), float16] */, %p213: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p36: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 128), float16] {
    %43 = nn.conv2d(%p020, %p125, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 56, 56, 128), float16] */;
    %44 = multiply(%43, %p213) /* ty=Tensor[(32, 56, 56, 128), float16] */;
    %45 = add(%44, %p36) /* ty=Tensor[(32, 56, 56, 128), float16] */;
    nn.relu(%45) /* ty=Tensor[(32, 56, 56, 128), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 96), float16], Tensor[(128, 1, 1, 96), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 56, 56, 128), float16] */;
  %54 = %53(%52, meta[relay.Constant][11] /* ty=Tensor[(128, 1, 1, 96), float16] */, meta[relay.Constant][12] /* ty=Tensor[(128), float16] */, meta[relay.Constant][13] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 56, 56, 128), float16] */;
  %55 = fn (%p019: Tensor[(32, 56, 56, 128), float16] /* ty=Tensor[(32, 56, 56, 128), float16] */, %p124: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 32), float16] {
    nn.conv2d(%p019, %p124, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 56, 56, 32), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 56, 56, 32), float16] */;
  %63 = %55(%54, meta[relay.Constant][14] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 56, 56, 32), float16] */;
  %64 = fn (%p024: Tensor[(32, 56, 56, 64), float16] /* ty=Tensor[(32, 56, 56, 64), float16] */, %p129: Tensor[(32, 56, 56, 32), float16] /* ty=Tensor[(32, 56, 56, 32), float16] */, %p216: Tensor[(32, 56, 56, 32), float16] /* ty=Tensor[(32, 56, 56, 32), float16] */, %p39: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p44: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 128), float16] {
    %59 = (%p024, %p129, %p216) /* ty=(Tensor[(32, 56, 56, 64), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(32, 56, 56, 32), float16]) span=aten::cat_2:0:0 */;
    %60 = concatenate(%59, axis=3) /* ty=Tensor[(32, 56, 56, 128), float16] */;
    %61 = multiply(%60, %p39) /* ty=Tensor[(32, 56, 56, 128), float16] */;
    %62 = add(%61, %p44) /* ty=Tensor[(32, 56, 56, 128), float16] */;
    nn.relu(%62) /* ty=Tensor[(32, 56, 56, 128), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 64), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 56, 56, 128), float16] */;
  %65 = %64(%37, %50, %63, meta[relay.Constant][15] /* ty=Tensor[(128), float16] */, meta[relay.Constant][16] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 56, 56, 128), float16] */;
  %66 = fn (%p023: Tensor[(32, 56, 56, 128), float16] /* ty=Tensor[(32, 56, 56, 128), float16] */, %p128: Tensor[(128, 1, 1, 128), float16] /* ty=Tensor[(128, 1, 1, 128), float16] */, %p215: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p38: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 128), float16] {
    %56 = nn.conv2d(%p023, %p128, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 56, 56, 128), float16] */;
    %57 = multiply(%56, %p215) /* ty=Tensor[(32, 56, 56, 128), float16] */;
    %58 = add(%57, %p38) /* ty=Tensor[(32, 56, 56, 128), float16] */;
    nn.relu(%58) /* ty=Tensor[(32, 56, 56, 128), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 128), float16], Tensor[(128, 1, 1, 128), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 56, 56, 128), float16] */;
  %67 = %66(%65, meta[relay.Constant][17] /* ty=Tensor[(128, 1, 1, 128), float16] */, meta[relay.Constant][18] /* ty=Tensor[(128), float16] */, meta[relay.Constant][19] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 56, 56, 128), float16] */;
  %68 = fn (%p022: Tensor[(32, 56, 56, 128), float16] /* ty=Tensor[(32, 56, 56, 128), float16] */, %p127: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 32), float16] {
    nn.conv2d(%p022, %p127, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 56, 56, 32), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 56, 56, 32), float16] */;
  %76 = %68(%67, meta[relay.Constant][20] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 56, 56, 32), float16] */;
  %77 = fn (%p027: Tensor[(32, 56, 56, 64), float16] /* ty=Tensor[(32, 56, 56, 64), float16] */, %p134: Tensor[(32, 56, 56, 32), float16] /* ty=Tensor[(32, 56, 56, 32), float16] */, %p218: Tensor[(32, 56, 56, 32), float16] /* ty=Tensor[(32, 56, 56, 32), float16] */, %p311: Tensor[(32, 56, 56, 32), float16] /* ty=Tensor[(32, 56, 56, 32), float16] */, %p45: Tensor[(160), float16] /* ty=Tensor[(160), float16] */, %p54: Tensor[(160), float16] /* ty=Tensor[(160), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 160), float16] {
    %72 = (%p027, %p134, %p218, %p311) /* ty=(Tensor[(32, 56, 56, 64), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(32, 56, 56, 32), float16]) span=aten::cat_3:0:0 */;
    %73 = concatenate(%72, axis=3) /* ty=Tensor[(32, 56, 56, 160), float16] */;
    %74 = multiply(%73, %p45) /* ty=Tensor[(32, 56, 56, 160), float16] */;
    %75 = add(%74, %p54) /* ty=Tensor[(32, 56, 56, 160), float16] */;
    nn.relu(%75) /* ty=Tensor[(32, 56, 56, 160), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 64), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(160), float16], Tensor[(160), float16]) -> Tensor[(32, 56, 56, 160), float16] */;
  %78 = %77(%37, %50, %63, %76, meta[relay.Constant][21] /* ty=Tensor[(160), float16] */, meta[relay.Constant][22] /* ty=Tensor[(160), float16] */) /* ty=Tensor[(32, 56, 56, 160), float16] */;
  %79 = fn (%p026: Tensor[(32, 56, 56, 160), float16] /* ty=Tensor[(32, 56, 56, 160), float16] */, %p133: Tensor[(128, 1, 1, 160), float16] /* ty=Tensor[(128, 1, 1, 160), float16] */, %p217: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p310: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 128), float16] {
    %69 = nn.conv2d(%p026, %p133, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 56, 56, 128), float16] */;
    %70 = multiply(%69, %p217) /* ty=Tensor[(32, 56, 56, 128), float16] */;
    %71 = add(%70, %p310) /* ty=Tensor[(32, 56, 56, 128), float16] */;
    nn.relu(%71) /* ty=Tensor[(32, 56, 56, 128), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 160), float16], Tensor[(128, 1, 1, 160), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 56, 56, 128), float16] */;
  %80 = %79(%78, meta[relay.Constant][23] /* ty=Tensor[(128, 1, 1, 160), float16] */, meta[relay.Constant][24] /* ty=Tensor[(128), float16] */, meta[relay.Constant][25] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 56, 56, 128), float16] */;
  %81 = fn (%p025: Tensor[(32, 56, 56, 128), float16] /* ty=Tensor[(32, 56, 56, 128), float16] */, %p130: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 32), float16] {
    nn.conv2d(%p025, %p130, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 56, 56, 32), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 56, 56, 32), float16] */;
  %89 = %81(%80, meta[relay.Constant][26] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 56, 56, 32), float16] */;
  %90 = fn (%p030: Tensor[(32, 56, 56, 64), float16] /* ty=Tensor[(32, 56, 56, 64), float16] */, %p137: Tensor[(32, 56, 56, 32), float16] /* ty=Tensor[(32, 56, 56, 32), float16] */, %p220: Tensor[(32, 56, 56, 32), float16] /* ty=Tensor[(32, 56, 56, 32), float16] */, %p313: Tensor[(32, 56, 56, 32), float16] /* ty=Tensor[(32, 56, 56, 32), float16] */, %p46: Tensor[(32, 56, 56, 32), float16] /* ty=Tensor[(32, 56, 56, 32), float16] */, %p55: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, %p64: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 192), float16] {
    %85 = (%p030, %p137, %p220, %p313, %p46) /* ty=(Tensor[(32, 56, 56, 64), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(32, 56, 56, 32), float16]) span=aten::cat_4:0:0 */;
    %86 = concatenate(%85, axis=3) /* ty=Tensor[(32, 56, 56, 192), float16] */;
    %87 = multiply(%86, %p55) /* ty=Tensor[(32, 56, 56, 192), float16] */;
    %88 = add(%87, %p64) /* ty=Tensor[(32, 56, 56, 192), float16] */;
    nn.relu(%88) /* ty=Tensor[(32, 56, 56, 192), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 64), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(192), float16], Tensor[(192), float16]) -> Tensor[(32, 56, 56, 192), float16] */;
  %91 = %90(%37, %50, %63, %76, %89, meta[relay.Constant][27] /* ty=Tensor[(192), float16] */, meta[relay.Constant][28] /* ty=Tensor[(192), float16] */) /* ty=Tensor[(32, 56, 56, 192), float16] */;
  %92 = fn (%p029: Tensor[(32, 56, 56, 192), float16] /* ty=Tensor[(32, 56, 56, 192), float16] */, %p136: Tensor[(128, 1, 1, 192), float16] /* ty=Tensor[(128, 1, 1, 192), float16] */, %p219: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p312: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 128), float16] {
    %82 = nn.conv2d(%p029, %p136, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 56, 56, 128), float16] */;
    %83 = multiply(%82, %p219) /* ty=Tensor[(32, 56, 56, 128), float16] */;
    %84 = add(%83, %p312) /* ty=Tensor[(32, 56, 56, 128), float16] */;
    nn.relu(%84) /* ty=Tensor[(32, 56, 56, 128), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 192), float16], Tensor[(128, 1, 1, 192), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 56, 56, 128), float16] */;
  %93 = %92(%91, meta[relay.Constant][29] /* ty=Tensor[(128, 1, 1, 192), float16] */, meta[relay.Constant][30] /* ty=Tensor[(128), float16] */, meta[relay.Constant][31] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 56, 56, 128), float16] */;
  %94 = fn (%p028: Tensor[(32, 56, 56, 128), float16] /* ty=Tensor[(32, 56, 56, 128), float16] */, %p135: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 32), float16] {
    nn.conv2d(%p028, %p135, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 56, 56, 32), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 56, 56, 32), float16] */;
  %102 = %94(%93, meta[relay.Constant][32] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 56, 56, 32), float16] */;
  %103 = fn (%p033: Tensor[(32, 56, 56, 64), float16] /* ty=Tensor[(32, 56, 56, 64), float16] */, %p140: Tensor[(32, 56, 56, 32), float16] /* ty=Tensor[(32, 56, 56, 32), float16] */, %p223: Tensor[(32, 56, 56, 32), float16] /* ty=Tensor[(32, 56, 56, 32), float16] */, %p315: Tensor[(32, 56, 56, 32), float16] /* ty=Tensor[(32, 56, 56, 32), float16] */, %p47: Tensor[(32, 56, 56, 32), float16] /* ty=Tensor[(32, 56, 56, 32), float16] */, %p56: Tensor[(32, 56, 56, 32), float16] /* ty=Tensor[(32, 56, 56, 32), float16] */, %p65: Tensor[(224), float16] /* ty=Tensor[(224), float16] */, %p74: Tensor[(224), float16] /* ty=Tensor[(224), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 224), float16] {
    %98 = (%p033, %p140, %p223, %p315, %p47, %p56) /* ty=(Tensor[(32, 56, 56, 64), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(32, 56, 56, 32), float16]) span=aten::cat_5:0:0 */;
    %99 = concatenate(%98, axis=3) /* ty=Tensor[(32, 56, 56, 224), float16] */;
    %100 = multiply(%99, %p65) /* ty=Tensor[(32, 56, 56, 224), float16] */;
    %101 = add(%100, %p74) /* ty=Tensor[(32, 56, 56, 224), float16] */;
    nn.relu(%101) /* ty=Tensor[(32, 56, 56, 224), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 64), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(224), float16], Tensor[(224), float16]) -> Tensor[(32, 56, 56, 224), float16] */;
  %104 = %103(%37, %50, %63, %76, %89, %102, meta[relay.Constant][33] /* ty=Tensor[(224), float16] */, meta[relay.Constant][34] /* ty=Tensor[(224), float16] */) /* ty=Tensor[(32, 56, 56, 224), float16] */;
  %105 = fn (%p032: Tensor[(32, 56, 56, 224), float16] /* ty=Tensor[(32, 56, 56, 224), float16] */, %p139: Tensor[(128, 1, 1, 224), float16] /* ty=Tensor[(128, 1, 1, 224), float16] */, %p222: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p314: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 128), float16] {
    %95 = nn.conv2d(%p032, %p139, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 56, 56, 128), float16] */;
    %96 = multiply(%95, %p222) /* ty=Tensor[(32, 56, 56, 128), float16] */;
    %97 = add(%96, %p314) /* ty=Tensor[(32, 56, 56, 128), float16] */;
    nn.relu(%97) /* ty=Tensor[(32, 56, 56, 128), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 224), float16], Tensor[(128, 1, 1, 224), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 56, 56, 128), float16] */;
  %106 = %105(%104, meta[relay.Constant][35] /* ty=Tensor[(128, 1, 1, 224), float16] */, meta[relay.Constant][36] /* ty=Tensor[(128), float16] */, meta[relay.Constant][37] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 56, 56, 128), float16] */;
  %107 = fn (%p031: Tensor[(32, 56, 56, 128), float16] /* ty=Tensor[(32, 56, 56, 128), float16] */, %p138: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 32), float16] {
    nn.conv2d(%p031, %p138, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 56, 56, 32), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 56, 56, 32), float16] */;
  %108 = %107(%106, meta[relay.Constant][38] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 56, 56, 32), float16] */;
  %109 = fn (%p012: Tensor[(32, 56, 56, 64), float16] /* ty=Tensor[(32, 56, 56, 64), float16] */, %p117: Tensor[(32, 56, 56, 32), float16] /* ty=Tensor[(32, 56, 56, 32), float16] */, %p28: Tensor[(32, 56, 56, 32), float16] /* ty=Tensor[(32, 56, 56, 32), float16] */, %p33: Tensor[(32, 56, 56, 32), float16] /* ty=Tensor[(32, 56, 56, 32), float16] */, %p43: Tensor[(32, 56, 56, 32), float16] /* ty=Tensor[(32, 56, 56, 32), float16] */, %p53: Tensor[(32, 56, 56, 32), float16] /* ty=Tensor[(32, 56, 56, 32), float16] */, %p63: Tensor[(32, 56, 56, 32), float16] /* ty=Tensor[(32, 56, 56, 32), float16] */, %p73: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, %p83: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 256), float16] {
    %17 = (%p012, %p117, %p28, %p33, %p43, %p53, %p63) /* ty=(Tensor[(32, 56, 56, 64), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(32, 56, 56, 32), float16]) span=aten::cat_6:0:0 */;
    %18 = concatenate(%17, axis=3) /* ty=Tensor[(32, 56, 56, 256), float16] */;
    %19 = multiply(%18, %p73) /* ty=Tensor[(32, 56, 56, 256), float16] */;
    %20 = add(%19, %p83) /* ty=Tensor[(32, 56, 56, 256), float16] */;
    nn.relu(%20) /* ty=Tensor[(32, 56, 56, 256), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 64), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(32, 56, 56, 32), float16], Tensor[(256), float16], Tensor[(256), float16]) -> Tensor[(32, 56, 56, 256), float16] */;
  %110 = %109(%37, %50, %63, %76, %89, %102, %108, meta[relay.Constant][39] /* ty=Tensor[(256), float16] */, meta[relay.Constant][40] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(32, 56, 56, 256), float16] */;
  %111 = fn (%p011: Tensor[(32, 56, 56, 256), float16] /* ty=Tensor[(32, 56, 56, 256), float16] */, %p116: Tensor[(128, 1, 1, 256), float16] /* ty=Tensor[(128, 1, 1, 256), float16] */, Primitive=1) -> Tensor[(32, 56, 56, 128), float16] {
    nn.conv2d(%p011, %p116, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 56, 56, 128), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 256), float16], Tensor[(128, 1, 1, 256), float16]) -> Tensor[(32, 56, 56, 128), float16] */;
  %112 = %111(%110, meta[relay.Constant][41] /* ty=Tensor[(128, 1, 1, 256), float16] */) /* ty=Tensor[(32, 56, 56, 128), float16] */;
  %113 = fn (%p010: Tensor[(32, 56, 56, 128), float16] /* ty=Tensor[(32, 56, 56, 128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 128), float16] {
    nn.avg_pool2d(%p010, pool_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0], layout="NHWC", out_layout="NHWC", count_include_pad=True) /* ty=Tensor[(32, 28, 28, 128), float16] */
  } /* ty=fn (Tensor[(32, 56, 56, 128), float16]) -> Tensor[(32, 28, 28, 128), float16] */;
  %121 = %113(%112) /* ty=Tensor[(32, 28, 28, 128), float16] */;
  %122 = fn (%p036: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p145: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p225: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 128), float16] {
    %117 = (%p036,) /* ty=(Tensor[(32, 28, 28, 128), float16],) span=aten::cat_7:0:0 */;
    %118 = concatenate(%117, axis=3) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %119 = multiply(%118, %p145) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %120 = add(%119, %p225) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    nn.relu(%120) /* ty=Tensor[(32, 28, 28, 128), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 28, 28, 128), float16] */;
  %123 = %122(%121, meta[relay.Constant][42] /* ty=Tensor[(128), float16] */, meta[relay.Constant][43] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 28, 28, 128), float16] */;
  %124 = fn (%p035: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p144: Tensor[(128, 1, 1, 128), float16] /* ty=Tensor[(128, 1, 1, 128), float16] */, %p224: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p316: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 128), float16] {
    %114 = nn.conv2d(%p035, %p144, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %115 = multiply(%114, %p224) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %116 = add(%115, %p316) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    nn.relu(%116) /* ty=Tensor[(32, 28, 28, 128), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(128, 1, 1, 128), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 28, 28, 128), float16] */;
  %125 = %124(%123, meta[relay.Constant][44] /* ty=Tensor[(128, 1, 1, 128), float16] */, meta[relay.Constant][45] /* ty=Tensor[(128), float16] */, meta[relay.Constant][46] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 28, 28, 128), float16] */;
  %126 = fn (%p034: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p143: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 32), float16] {
    nn.conv2d(%p034, %p143, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 32), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 28, 28, 32), float16] */;
  %134 = %126(%125, meta[relay.Constant][47] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 28, 28, 32), float16] */;
  %135 = fn (%p039: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p148: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p227: Tensor[(160), float16] /* ty=Tensor[(160), float16] */, %p318: Tensor[(160), float16] /* ty=Tensor[(160), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 160), float16] {
    %130 = (%p039, %p148) /* ty=(Tensor[(32, 28, 28, 128), float16], Tensor[(32, 28, 28, 32), float16]) span=aten::cat_8:0:0 */;
    %131 = concatenate(%130, axis=3) /* ty=Tensor[(32, 28, 28, 160), float16] */;
    %132 = multiply(%131, %p227) /* ty=Tensor[(32, 28, 28, 160), float16] */;
    %133 = add(%132, %p318) /* ty=Tensor[(32, 28, 28, 160), float16] */;
    nn.relu(%133) /* ty=Tensor[(32, 28, 28, 160), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(160), float16], Tensor[(160), float16]) -> Tensor[(32, 28, 28, 160), float16] */;
  %136 = %135(%121, %134, meta[relay.Constant][48] /* ty=Tensor[(160), float16] */, meta[relay.Constant][49] /* ty=Tensor[(160), float16] */) /* ty=Tensor[(32, 28, 28, 160), float16] */;
  %137 = fn (%p038: Tensor[(32, 28, 28, 160), float16] /* ty=Tensor[(32, 28, 28, 160), float16] */, %p147: Tensor[(128, 1, 1, 160), float16] /* ty=Tensor[(128, 1, 1, 160), float16] */, %p226: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p317: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 128), float16] {
    %127 = nn.conv2d(%p038, %p147, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %128 = multiply(%127, %p226) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %129 = add(%128, %p317) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    nn.relu(%129) /* ty=Tensor[(32, 28, 28, 128), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 160), float16], Tensor[(128, 1, 1, 160), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 28, 28, 128), float16] */;
  %138 = %137(%136, meta[relay.Constant][50] /* ty=Tensor[(128, 1, 1, 160), float16] */, meta[relay.Constant][51] /* ty=Tensor[(128), float16] */, meta[relay.Constant][52] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 28, 28, 128), float16] */;
  %139 = fn (%p037: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p146: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 32), float16] {
    nn.conv2d(%p037, %p146, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 32), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 28, 28, 32), float16] */;
  %147 = %139(%138, meta[relay.Constant][53] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 28, 28, 32), float16] */;
  %148 = fn (%p042: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p152: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p229: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p320: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, %p48: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 192), float16] {
    %143 = (%p042, %p152, %p229) /* ty=(Tensor[(32, 28, 28, 128), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16]) span=aten::cat_9:0:0 */;
    %144 = concatenate(%143, axis=3) /* ty=Tensor[(32, 28, 28, 192), float16] */;
    %145 = multiply(%144, %p320) /* ty=Tensor[(32, 28, 28, 192), float16] */;
    %146 = add(%145, %p48) /* ty=Tensor[(32, 28, 28, 192), float16] */;
    nn.relu(%146) /* ty=Tensor[(32, 28, 28, 192), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(192), float16], Tensor[(192), float16]) -> Tensor[(32, 28, 28, 192), float16] */;
  %149 = %148(%121, %134, %147, meta[relay.Constant][54] /* ty=Tensor[(192), float16] */, meta[relay.Constant][55] /* ty=Tensor[(192), float16] */) /* ty=Tensor[(32, 28, 28, 192), float16] */;
  %150 = fn (%p041: Tensor[(32, 28, 28, 192), float16] /* ty=Tensor[(32, 28, 28, 192), float16] */, %p150: Tensor[(128, 1, 1, 192), float16] /* ty=Tensor[(128, 1, 1, 192), float16] */, %p228: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p319: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 128), float16] {
    %140 = nn.conv2d(%p041, %p150, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %141 = multiply(%140, %p228) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %142 = add(%141, %p319) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    nn.relu(%142) /* ty=Tensor[(32, 28, 28, 128), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 192), float16], Tensor[(128, 1, 1, 192), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 28, 28, 128), float16] */;
  %151 = %150(%149, meta[relay.Constant][56] /* ty=Tensor[(128, 1, 1, 192), float16] */, meta[relay.Constant][57] /* ty=Tensor[(128), float16] */, meta[relay.Constant][58] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 28, 28, 128), float16] */;
  %152 = fn (%p040: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p149: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 32), float16] {
    nn.conv2d(%p040, %p149, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 32), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 28, 28, 32), float16] */;
  %160 = %152(%151, meta[relay.Constant][59] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 28, 28, 32), float16] */;
  %161 = fn (%p045: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p155: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p231: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p322: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p49: Tensor[(224), float16] /* ty=Tensor[(224), float16] */, %p57: Tensor[(224), float16] /* ty=Tensor[(224), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 224), float16] {
    %156 = (%p045, %p155, %p231, %p322) /* ty=(Tensor[(32, 28, 28, 128), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16]) span=aten::cat_10:0:0 */;
    %157 = concatenate(%156, axis=3) /* ty=Tensor[(32, 28, 28, 224), float16] */;
    %158 = multiply(%157, %p49) /* ty=Tensor[(32, 28, 28, 224), float16] */;
    %159 = add(%158, %p57) /* ty=Tensor[(32, 28, 28, 224), float16] */;
    nn.relu(%159) /* ty=Tensor[(32, 28, 28, 224), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(224), float16], Tensor[(224), float16]) -> Tensor[(32, 28, 28, 224), float16] */;
  %162 = %161(%121, %134, %147, %160, meta[relay.Constant][60] /* ty=Tensor[(224), float16] */, meta[relay.Constant][61] /* ty=Tensor[(224), float16] */) /* ty=Tensor[(32, 28, 28, 224), float16] */;
  %163 = fn (%p044: Tensor[(32, 28, 28, 224), float16] /* ty=Tensor[(32, 28, 28, 224), float16] */, %p154: Tensor[(128, 1, 1, 224), float16] /* ty=Tensor[(128, 1, 1, 224), float16] */, %p230: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p321: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 128), float16] {
    %153 = nn.conv2d(%p044, %p154, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %154 = multiply(%153, %p230) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %155 = add(%154, %p321) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    nn.relu(%155) /* ty=Tensor[(32, 28, 28, 128), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 224), float16], Tensor[(128, 1, 1, 224), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 28, 28, 128), float16] */;
  %164 = %163(%162, meta[relay.Constant][62] /* ty=Tensor[(128, 1, 1, 224), float16] */, meta[relay.Constant][63] /* ty=Tensor[(128), float16] */, meta[relay.Constant][64] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 28, 28, 128), float16] */;
  %165 = fn (%p043: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p153: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 32), float16] {
    nn.conv2d(%p043, %p153, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 32), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 28, 28, 32), float16] */;
  %173 = %165(%164, meta[relay.Constant][65] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 28, 28, 32), float16] */;
  %174 = fn (%p048: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p158: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p233: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p324: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p410: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p58: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, %p66: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 256), float16] {
    %169 = (%p048, %p158, %p233, %p324, %p410) /* ty=(Tensor[(32, 28, 28, 128), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16]) span=aten::cat_11:0:0 */;
    %170 = concatenate(%169, axis=3) /* ty=Tensor[(32, 28, 28, 256), float16] */;
    %171 = multiply(%170, %p58) /* ty=Tensor[(32, 28, 28, 256), float16] */;
    %172 = add(%171, %p66) /* ty=Tensor[(32, 28, 28, 256), float16] */;
    nn.relu(%172) /* ty=Tensor[(32, 28, 28, 256), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(256), float16], Tensor[(256), float16]) -> Tensor[(32, 28, 28, 256), float16] */;
  %175 = %174(%121, %134, %147, %160, %173, meta[relay.Constant][66] /* ty=Tensor[(256), float16] */, meta[relay.Constant][67] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(32, 28, 28, 256), float16] */;
  %176 = fn (%p047: Tensor[(32, 28, 28, 256), float16] /* ty=Tensor[(32, 28, 28, 256), float16] */, %p157: Tensor[(128, 1, 1, 256), float16] /* ty=Tensor[(128, 1, 1, 256), float16] */, %p232: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p323: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 128), float16] {
    %166 = nn.conv2d(%p047, %p157, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %167 = multiply(%166, %p232) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %168 = add(%167, %p323) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    nn.relu(%168) /* ty=Tensor[(32, 28, 28, 128), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 256), float16], Tensor[(128, 1, 1, 256), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 28, 28, 128), float16] */;
  %177 = %176(%175, meta[relay.Constant][68] /* ty=Tensor[(128, 1, 1, 256), float16] */, meta[relay.Constant][69] /* ty=Tensor[(128), float16] */, meta[relay.Constant][70] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 28, 28, 128), float16] */;
  %178 = fn (%p046: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p156: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 32), float16] {
    nn.conv2d(%p046, %p156, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 32), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 28, 28, 32), float16] */;
  %186 = %178(%177, meta[relay.Constant][71] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 28, 28, 32), float16] */;
  %187 = fn (%p051: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p162: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p235: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p326: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p411: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p59: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p67: Tensor[(288), float16] /* ty=Tensor[(288), float16] */, %p75: Tensor[(288), float16] /* ty=Tensor[(288), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 288), float16] {
    %182 = (%p051, %p162, %p235, %p326, %p411, %p59) /* ty=(Tensor[(32, 28, 28, 128), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16]) span=aten::cat_12:0:0 */;
    %183 = concatenate(%182, axis=3) /* ty=Tensor[(32, 28, 28, 288), float16] */;
    %184 = multiply(%183, %p67) /* ty=Tensor[(32, 28, 28, 288), float16] */;
    %185 = add(%184, %p75) /* ty=Tensor[(32, 28, 28, 288), float16] */;
    nn.relu(%185) /* ty=Tensor[(32, 28, 28, 288), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(288), float16], Tensor[(288), float16]) -> Tensor[(32, 28, 28, 288), float16] */;
  %188 = %187(%121, %134, %147, %160, %173, %186, meta[relay.Constant][72] /* ty=Tensor[(288), float16] */, meta[relay.Constant][73] /* ty=Tensor[(288), float16] */) /* ty=Tensor[(32, 28, 28, 288), float16] */;
  %189 = fn (%p050: Tensor[(32, 28, 28, 288), float16] /* ty=Tensor[(32, 28, 28, 288), float16] */, %p160: Tensor[(128, 1, 1, 288), float16] /* ty=Tensor[(128, 1, 1, 288), float16] */, %p234: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p325: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 128), float16] {
    %179 = nn.conv2d(%p050, %p160, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %180 = multiply(%179, %p234) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %181 = add(%180, %p325) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    nn.relu(%181) /* ty=Tensor[(32, 28, 28, 128), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 288), float16], Tensor[(128, 1, 1, 288), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 28, 28, 128), float16] */;
  %190 = %189(%188, meta[relay.Constant][74] /* ty=Tensor[(128, 1, 1, 288), float16] */, meta[relay.Constant][75] /* ty=Tensor[(128), float16] */, meta[relay.Constant][76] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 28, 28, 128), float16] */;
  %191 = fn (%p049: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p159: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 32), float16] {
    nn.conv2d(%p049, %p159, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 32), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 28, 28, 32), float16] */;
  %199 = %191(%190, meta[relay.Constant][77] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 28, 28, 32), float16] */;
  %200 = fn (%p054: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p165: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p237: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p328: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p412: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p510: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p68: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p76: Tensor[(320), float16] /* ty=Tensor[(320), float16] */, %p84: Tensor[(320), float16] /* ty=Tensor[(320), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 320), float16] {
    %195 = (%p054, %p165, %p237, %p328, %p412, %p510, %p68) /* ty=(Tensor[(32, 28, 28, 128), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16]) span=aten::cat_13:0:0 */;
    %196 = concatenate(%195, axis=3) /* ty=Tensor[(32, 28, 28, 320), float16] */;
    %197 = multiply(%196, %p76) /* ty=Tensor[(32, 28, 28, 320), float16] */;
    %198 = add(%197, %p84) /* ty=Tensor[(32, 28, 28, 320), float16] */;
    nn.relu(%198) /* ty=Tensor[(32, 28, 28, 320), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(320), float16], Tensor[(320), float16]) -> Tensor[(32, 28, 28, 320), float16] */;
  %201 = %200(%121, %134, %147, %160, %173, %186, %199, meta[relay.Constant][78] /* ty=Tensor[(320), float16] */, meta[relay.Constant][79] /* ty=Tensor[(320), float16] */) /* ty=Tensor[(32, 28, 28, 320), float16] */;
  %202 = fn (%p053: Tensor[(32, 28, 28, 320), float16] /* ty=Tensor[(32, 28, 28, 320), float16] */, %p164: Tensor[(128, 1, 1, 320), float16] /* ty=Tensor[(128, 1, 1, 320), float16] */, %p236: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p327: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 128), float16] {
    %192 = nn.conv2d(%p053, %p164, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %193 = multiply(%192, %p236) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %194 = add(%193, %p327) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    nn.relu(%194) /* ty=Tensor[(32, 28, 28, 128), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 320), float16], Tensor[(128, 1, 1, 320), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 28, 28, 128), float16] */;
  %203 = %202(%201, meta[relay.Constant][80] /* ty=Tensor[(128, 1, 1, 320), float16] */, meta[relay.Constant][81] /* ty=Tensor[(128), float16] */, meta[relay.Constant][82] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 28, 28, 128), float16] */;
  %204 = fn (%p052: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p163: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 32), float16] {
    nn.conv2d(%p052, %p163, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 32), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 28, 28, 32), float16] */;
  %212 = %204(%203, meta[relay.Constant][83] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 28, 28, 32), float16] */;
  %213 = fn (%p057: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p168: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p239: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p330: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p413: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p511: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p69: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p77: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p85: Tensor[(352), float16] /* ty=Tensor[(352), float16] */, %p93: Tensor[(352), float16] /* ty=Tensor[(352), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 352), float16] {
    %208 = (%p057, %p168, %p239, %p330, %p413, %p511, %p69, %p77) /* ty=(Tensor[(32, 28, 28, 128), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16]) span=aten::cat_14:0:0 */;
    %209 = concatenate(%208, axis=3) /* ty=Tensor[(32, 28, 28, 352), float16] */;
    %210 = multiply(%209, %p85) /* ty=Tensor[(32, 28, 28, 352), float16] */;
    %211 = add(%210, %p93) /* ty=Tensor[(32, 28, 28, 352), float16] */;
    nn.relu(%211) /* ty=Tensor[(32, 28, 28, 352), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(352), float16], Tensor[(352), float16]) -> Tensor[(32, 28, 28, 352), float16] */;
  %214 = %213(%121, %134, %147, %160, %173, %186, %199, %212, meta[relay.Constant][84] /* ty=Tensor[(352), float16] */, meta[relay.Constant][85] /* ty=Tensor[(352), float16] */) /* ty=Tensor[(32, 28, 28, 352), float16] */;
  %215 = fn (%p056: Tensor[(32, 28, 28, 352), float16] /* ty=Tensor[(32, 28, 28, 352), float16] */, %p167: Tensor[(128, 1, 1, 352), float16] /* ty=Tensor[(128, 1, 1, 352), float16] */, %p238: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p329: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 128), float16] {
    %205 = nn.conv2d(%p056, %p167, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %206 = multiply(%205, %p238) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %207 = add(%206, %p329) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    nn.relu(%207) /* ty=Tensor[(32, 28, 28, 128), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 352), float16], Tensor[(128, 1, 1, 352), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 28, 28, 128), float16] */;
  %216 = %215(%214, meta[relay.Constant][86] /* ty=Tensor[(128, 1, 1, 352), float16] */, meta[relay.Constant][87] /* ty=Tensor[(128), float16] */, meta[relay.Constant][88] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 28, 28, 128), float16] */;
  %217 = fn (%p055: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p166: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 32), float16] {
    nn.conv2d(%p055, %p166, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 32), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 28, 28, 32), float16] */;
  %225 = %217(%216, meta[relay.Constant][89] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 28, 28, 32), float16] */;
  %226 = fn (%p060: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p172: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p241: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p332: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p414: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p512: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p610: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p78: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p86: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p94: Tensor[(384), float16] /* ty=Tensor[(384), float16] */, %p103: Tensor[(384), float16] /* ty=Tensor[(384), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 384), float16] {
    %221 = (%p060, %p172, %p241, %p332, %p414, %p512, %p610, %p78, %p86) /* ty=(Tensor[(32, 28, 28, 128), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16]) span=aten::cat_15:0:0 */;
    %222 = concatenate(%221, axis=3) /* ty=Tensor[(32, 28, 28, 384), float16] */;
    %223 = multiply(%222, %p94) /* ty=Tensor[(32, 28, 28, 384), float16] */;
    %224 = add(%223, %p103) /* ty=Tensor[(32, 28, 28, 384), float16] */;
    nn.relu(%224) /* ty=Tensor[(32, 28, 28, 384), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(384), float16], Tensor[(384), float16]) -> Tensor[(32, 28, 28, 384), float16] */;
  %227 = %226(%121, %134, %147, %160, %173, %186, %199, %212, %225, meta[relay.Constant][90] /* ty=Tensor[(384), float16] */, meta[relay.Constant][91] /* ty=Tensor[(384), float16] */) /* ty=Tensor[(32, 28, 28, 384), float16] */;
  %228 = fn (%p059: Tensor[(32, 28, 28, 384), float16] /* ty=Tensor[(32, 28, 28, 384), float16] */, %p170: Tensor[(128, 1, 1, 384), float16] /* ty=Tensor[(128, 1, 1, 384), float16] */, %p240: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p331: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 128), float16] {
    %218 = nn.conv2d(%p059, %p170, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %219 = multiply(%218, %p240) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %220 = add(%219, %p331) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    nn.relu(%220) /* ty=Tensor[(32, 28, 28, 128), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 384), float16], Tensor[(128, 1, 1, 384), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 28, 28, 128), float16] */;
  %229 = %228(%227, meta[relay.Constant][92] /* ty=Tensor[(128, 1, 1, 384), float16] */, meta[relay.Constant][93] /* ty=Tensor[(128), float16] */, meta[relay.Constant][94] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 28, 28, 128), float16] */;
  %230 = fn (%p058: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p169: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 32), float16] {
    nn.conv2d(%p058, %p169, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 32), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 28, 28, 32), float16] */;
  %238 = %230(%229, meta[relay.Constant][95] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 28, 28, 32), float16] */;
  %239 = fn (%p063: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p175: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p243: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p334: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p415: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p513: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p611: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p79: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p87: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p95: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p104: Tensor[(416), float16] /* ty=Tensor[(416), float16] */, %p1110: Tensor[(416), float16] /* ty=Tensor[(416), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 416), float16] {
    %234 = (%p063, %p175, %p243, %p334, %p415, %p513, %p611, %p79, %p87, %p95) /* ty=(Tensor[(32, 28, 28, 128), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16]) span=aten::cat_16:0:0 */;
    %235 = concatenate(%234, axis=3) /* ty=Tensor[(32, 28, 28, 416), float16] */;
    %236 = multiply(%235, %p104) /* ty=Tensor[(32, 28, 28, 416), float16] */;
    %237 = add(%236, %p1110) /* ty=Tensor[(32, 28, 28, 416), float16] */;
    nn.relu(%237) /* ty=Tensor[(32, 28, 28, 416), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(416), float16], Tensor[(416), float16]) -> Tensor[(32, 28, 28, 416), float16] */;
  %240 = %239(%121, %134, %147, %160, %173, %186, %199, %212, %225, %238, meta[relay.Constant][96] /* ty=Tensor[(416), float16] */, meta[relay.Constant][97] /* ty=Tensor[(416), float16] */) /* ty=Tensor[(32, 28, 28, 416), float16] */;
  %241 = fn (%p062: Tensor[(32, 28, 28, 416), float16] /* ty=Tensor[(32, 28, 28, 416), float16] */, %p174: Tensor[(128, 1, 1, 416), float16] /* ty=Tensor[(128, 1, 1, 416), float16] */, %p242: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p333: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 128), float16] {
    %231 = nn.conv2d(%p062, %p174, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %232 = multiply(%231, %p242) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %233 = add(%232, %p333) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    nn.relu(%233) /* ty=Tensor[(32, 28, 28, 128), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 416), float16], Tensor[(128, 1, 1, 416), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 28, 28, 128), float16] */;
  %242 = %241(%240, meta[relay.Constant][98] /* ty=Tensor[(128, 1, 1, 416), float16] */, meta[relay.Constant][99] /* ty=Tensor[(128), float16] */, meta[relay.Constant][100] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 28, 28, 128), float16] */;
  %243 = fn (%p061: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p173: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 32), float16] {
    nn.conv2d(%p061, %p173, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 32), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 28, 28, 32), float16] */;
  %251 = %243(%242, meta[relay.Constant][101] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 28, 28, 32), float16] */;
  %252 = fn (%p066: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p178: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p245: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p336: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p416: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p514: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p612: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p710: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p88: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p96: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p105: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p1111: Tensor[(448), float16] /* ty=Tensor[(448), float16] */, %p1210: Tensor[(448), float16] /* ty=Tensor[(448), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 448), float16] {
    %247 = (%p066, %p178, %p245, %p336, %p416, %p514, %p612, %p710, %p88, %p96, %p105) /* ty=(Tensor[(32, 28, 28, 128), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16]) span=aten::cat_17:0:0 */;
    %248 = concatenate(%247, axis=3) /* ty=Tensor[(32, 28, 28, 448), float16] */;
    %249 = multiply(%248, %p1111) /* ty=Tensor[(32, 28, 28, 448), float16] */;
    %250 = add(%249, %p1210) /* ty=Tensor[(32, 28, 28, 448), float16] */;
    nn.relu(%250) /* ty=Tensor[(32, 28, 28, 448), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(448), float16], Tensor[(448), float16]) -> Tensor[(32, 28, 28, 448), float16] */;
  %253 = %252(%121, %134, %147, %160, %173, %186, %199, %212, %225, %238, %251, meta[relay.Constant][102] /* ty=Tensor[(448), float16] */, meta[relay.Constant][103] /* ty=Tensor[(448), float16] */) /* ty=Tensor[(32, 28, 28, 448), float16] */;
  %254 = fn (%p065: Tensor[(32, 28, 28, 448), float16] /* ty=Tensor[(32, 28, 28, 448), float16] */, %p177: Tensor[(128, 1, 1, 448), float16] /* ty=Tensor[(128, 1, 1, 448), float16] */, %p244: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p335: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 128), float16] {
    %244 = nn.conv2d(%p065, %p177, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %245 = multiply(%244, %p244) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %246 = add(%245, %p335) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    nn.relu(%246) /* ty=Tensor[(32, 28, 28, 128), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 448), float16], Tensor[(128, 1, 1, 448), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 28, 28, 128), float16] */;
  %255 = %254(%253, meta[relay.Constant][104] /* ty=Tensor[(128, 1, 1, 448), float16] */, meta[relay.Constant][105] /* ty=Tensor[(128), float16] */, meta[relay.Constant][106] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 28, 28, 128), float16] */;
  %256 = fn (%p064: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p176: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 32), float16] {
    nn.conv2d(%p064, %p176, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 32), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 28, 28, 32), float16] */;
  %264 = %256(%255, meta[relay.Constant][107] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 28, 28, 32), float16] */;
  %265 = fn (%p069: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p182: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p247: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p338: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p417: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p515: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p613: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p711: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p89: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p97: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p106: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p1112: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p1211: Tensor[(480), float16] /* ty=Tensor[(480), float16] */, %p1310: Tensor[(480), float16] /* ty=Tensor[(480), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 480), float16] {
    %260 = (%p069, %p182, %p247, %p338, %p417, %p515, %p613, %p711, %p89, %p97, %p106, %p1112) /* ty=(Tensor[(32, 28, 28, 128), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16]) span=aten::cat_18:0:0 */;
    %261 = concatenate(%260, axis=3) /* ty=Tensor[(32, 28, 28, 480), float16] */;
    %262 = multiply(%261, %p1211) /* ty=Tensor[(32, 28, 28, 480), float16] */;
    %263 = add(%262, %p1310) /* ty=Tensor[(32, 28, 28, 480), float16] */;
    nn.relu(%263) /* ty=Tensor[(32, 28, 28, 480), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(480), float16], Tensor[(480), float16]) -> Tensor[(32, 28, 28, 480), float16] */;
  %266 = %265(%121, %134, %147, %160, %173, %186, %199, %212, %225, %238, %251, %264, meta[relay.Constant][108] /* ty=Tensor[(480), float16] */, meta[relay.Constant][109] /* ty=Tensor[(480), float16] */) /* ty=Tensor[(32, 28, 28, 480), float16] */;
  %267 = fn (%p068: Tensor[(32, 28, 28, 480), float16] /* ty=Tensor[(32, 28, 28, 480), float16] */, %p180: Tensor[(128, 1, 1, 480), float16] /* ty=Tensor[(128, 1, 1, 480), float16] */, %p246: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p337: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 128), float16] {
    %257 = nn.conv2d(%p068, %p180, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %258 = multiply(%257, %p246) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    %259 = add(%258, %p337) /* ty=Tensor[(32, 28, 28, 128), float16] */;
    nn.relu(%259) /* ty=Tensor[(32, 28, 28, 128), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 480), float16], Tensor[(128, 1, 1, 480), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 28, 28, 128), float16] */;
  %268 = %267(%266, meta[relay.Constant][110] /* ty=Tensor[(128, 1, 1, 480), float16] */, meta[relay.Constant][111] /* ty=Tensor[(128), float16] */, meta[relay.Constant][112] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 28, 28, 128), float16] */;
  %269 = fn (%p067: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p179: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 32), float16] {
    nn.conv2d(%p067, %p179, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 32), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 28, 28, 32), float16] */;
  %270 = %269(%268, meta[relay.Constant][113] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 28, 28, 32), float16] */;
  %271 = fn (%p09: Tensor[(32, 28, 28, 128), float16] /* ty=Tensor[(32, 28, 28, 128), float16] */, %p114: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p27: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p32: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p42: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p52: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p62: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p72: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p82: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p92: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p102: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p115: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p122: Tensor[(32, 28, 28, 32), float16] /* ty=Tensor[(32, 28, 28, 32), float16] */, %p132: Tensor[(512), float16] /* ty=Tensor[(512), float16] */, %p142: Tensor[(512), float16] /* ty=Tensor[(512), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 512), float16] {
    %13 = (%p09, %p114, %p27, %p32, %p42, %p52, %p62, %p72, %p82, %p92, %p102, %p115, %p122) /* ty=(Tensor[(32, 28, 28, 128), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16]) span=aten::cat_19:0:0 */;
    %14 = concatenate(%13, axis=3) /* ty=Tensor[(32, 28, 28, 512), float16] */;
    %15 = multiply(%14, %p132) /* ty=Tensor[(32, 28, 28, 512), float16] */;
    %16 = add(%15, %p142) /* ty=Tensor[(32, 28, 28, 512), float16] */;
    nn.relu(%16) /* ty=Tensor[(32, 28, 28, 512), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 128), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(32, 28, 28, 32), float16], Tensor[(512), float16], Tensor[(512), float16]) -> Tensor[(32, 28, 28, 512), float16] */;
  %272 = %271(%121, %134, %147, %160, %173, %186, %199, %212, %225, %238, %251, %264, %270, meta[relay.Constant][114] /* ty=Tensor[(512), float16] */, meta[relay.Constant][115] /* ty=Tensor[(512), float16] */) /* ty=Tensor[(32, 28, 28, 512), float16] */;
  %273 = fn (%p08: Tensor[(32, 28, 28, 512), float16] /* ty=Tensor[(32, 28, 28, 512), float16] */, %p113: Tensor[(256, 1, 1, 512), float16] /* ty=Tensor[(256, 1, 1, 512), float16] */, Primitive=1) -> Tensor[(32, 28, 28, 256), float16] {
    nn.conv2d(%p08, %p113, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 28, 28, 256), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 512), float16], Tensor[(256, 1, 1, 512), float16]) -> Tensor[(32, 28, 28, 256), float16] */;
  %274 = %273(%272, meta[relay.Constant][116] /* ty=Tensor[(256, 1, 1, 512), float16] */) /* ty=Tensor[(32, 28, 28, 256), float16] */;
  %275 = fn (%p07: Tensor[(32, 28, 28, 256), float16] /* ty=Tensor[(32, 28, 28, 256), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 256), float16] {
    nn.avg_pool2d(%p07, pool_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0], layout="NHWC", out_layout="NHWC", count_include_pad=True) /* ty=Tensor[(32, 14, 14, 256), float16] */
  } /* ty=fn (Tensor[(32, 28, 28, 256), float16]) -> Tensor[(32, 14, 14, 256), float16] */;
  %283 = %275(%274) /* ty=Tensor[(32, 14, 14, 256), float16] */;
  %284 = fn (%p072: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p185: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, %p249: Tensor[(256), float16] /* ty=Tensor[(256), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 256), float16] {
    %279 = (%p072,) /* ty=(Tensor[(32, 14, 14, 256), float16],) span=aten::cat_20:0:0 */;
    %280 = concatenate(%279, axis=3) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    %281 = multiply(%280, %p185) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    %282 = add(%281, %p249) /* ty=Tensor[(32, 14, 14, 256), float16] */;
    nn.relu(%282) /* ty=Tensor[(32, 14, 14, 256), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(256), float16], Tensor[(256), float16]) -> Tensor[(32, 14, 14, 256), float16] */;
  %285 = %284(%283, meta[relay.Constant][117] /* ty=Tensor[(256), float16] */, meta[relay.Constant][118] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(32, 14, 14, 256), float16] */;
  %286 = fn (%p071: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p184: Tensor[(128, 1, 1, 256), float16] /* ty=Tensor[(128, 1, 1, 256), float16] */, %p248: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p339: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 128), float16] {
    %276 = nn.conv2d(%p071, %p184, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %277 = multiply(%276, %p248) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %278 = add(%277, %p339) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    nn.relu(%278) /* ty=Tensor[(32, 14, 14, 128), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(128, 1, 1, 256), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 14, 14, 128), float16] */;
  %287 = %286(%285, meta[relay.Constant][119] /* ty=Tensor[(128, 1, 1, 256), float16] */, meta[relay.Constant][120] /* ty=Tensor[(128), float16] */, meta[relay.Constant][121] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 14, 14, 128), float16] */;
  %288 = fn (%p070: Tensor[(32, 14, 14, 128), float16] /* ty=Tensor[(32, 14, 14, 128), float16] */, %p183: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 32), float16] {
    nn.conv2d(%p070, %p183, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 32), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 14, 14, 32), float16] */;
  %296 = %288(%287, meta[relay.Constant][122] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 14, 14, 32), float16] */;
  %297 = fn (%p075: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p188: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p251: Tensor[(288), float16] /* ty=Tensor[(288), float16] */, %p341: Tensor[(288), float16] /* ty=Tensor[(288), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 288), float16] {
    %292 = (%p075, %p188) /* ty=(Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16]) span=aten::cat_21:0:0 */;
    %293 = concatenate(%292, axis=3) /* ty=Tensor[(32, 14, 14, 288), float16] */;
    %294 = multiply(%293, %p251) /* ty=Tensor[(32, 14, 14, 288), float16] */;
    %295 = add(%294, %p341) /* ty=Tensor[(32, 14, 14, 288), float16] */;
    nn.relu(%295) /* ty=Tensor[(32, 14, 14, 288), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(288), float16], Tensor[(288), float16]) -> Tensor[(32, 14, 14, 288), float16] */;
  %298 = %297(%283, %296, meta[relay.Constant][123] /* ty=Tensor[(288), float16] */, meta[relay.Constant][124] /* ty=Tensor[(288), float16] */) /* ty=Tensor[(32, 14, 14, 288), float16] */;
  %299 = fn (%p074: Tensor[(32, 14, 14, 288), float16] /* ty=Tensor[(32, 14, 14, 288), float16] */, %p187: Tensor[(128, 1, 1, 288), float16] /* ty=Tensor[(128, 1, 1, 288), float16] */, %p250: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p340: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 128), float16] {
    %289 = nn.conv2d(%p074, %p187, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %290 = multiply(%289, %p250) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %291 = add(%290, %p340) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    nn.relu(%291) /* ty=Tensor[(32, 14, 14, 128), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 288), float16], Tensor[(128, 1, 1, 288), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 14, 14, 128), float16] */;
  %300 = %299(%298, meta[relay.Constant][125] /* ty=Tensor[(128, 1, 1, 288), float16] */, meta[relay.Constant][126] /* ty=Tensor[(128), float16] */, meta[relay.Constant][127] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 14, 14, 128), float16] */;
  %301 = fn (%p073: Tensor[(32, 14, 14, 128), float16] /* ty=Tensor[(32, 14, 14, 128), float16] */, %p186: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 32), float16] {
    nn.conv2d(%p073, %p186, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 32), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 14, 14, 32), float16] */;
  %309 = %301(%300, meta[relay.Constant][128] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 14, 14, 32), float16] */;
  %310 = fn (%p078: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p192: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p253: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p343: Tensor[(320), float16] /* ty=Tensor[(320), float16] */, %p418: Tensor[(320), float16] /* ty=Tensor[(320), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 320), float16] {
    %305 = (%p078, %p192, %p253) /* ty=(Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16]) span=aten::cat_22:0:0 */;
    %306 = concatenate(%305, axis=3) /* ty=Tensor[(32, 14, 14, 320), float16] */;
    %307 = multiply(%306, %p343) /* ty=Tensor[(32, 14, 14, 320), float16] */;
    %308 = add(%307, %p418) /* ty=Tensor[(32, 14, 14, 320), float16] */;
    nn.relu(%308) /* ty=Tensor[(32, 14, 14, 320), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(320), float16], Tensor[(320), float16]) -> Tensor[(32, 14, 14, 320), float16] */;
  %311 = %310(%283, %296, %309, meta[relay.Constant][129] /* ty=Tensor[(320), float16] */, meta[relay.Constant][130] /* ty=Tensor[(320), float16] */) /* ty=Tensor[(32, 14, 14, 320), float16] */;
  %312 = fn (%p077: Tensor[(32, 14, 14, 320), float16] /* ty=Tensor[(32, 14, 14, 320), float16] */, %p190: Tensor[(128, 1, 1, 320), float16] /* ty=Tensor[(128, 1, 1, 320), float16] */, %p252: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p342: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 128), float16] {
    %302 = nn.conv2d(%p077, %p190, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %303 = multiply(%302, %p252) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %304 = add(%303, %p342) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    nn.relu(%304) /* ty=Tensor[(32, 14, 14, 128), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 320), float16], Tensor[(128, 1, 1, 320), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 14, 14, 128), float16] */;
  %313 = %312(%311, meta[relay.Constant][131] /* ty=Tensor[(128, 1, 1, 320), float16] */, meta[relay.Constant][132] /* ty=Tensor[(128), float16] */, meta[relay.Constant][133] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 14, 14, 128), float16] */;
  %314 = fn (%p076: Tensor[(32, 14, 14, 128), float16] /* ty=Tensor[(32, 14, 14, 128), float16] */, %p189: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 32), float16] {
    nn.conv2d(%p076, %p189, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 32), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 14, 14, 32), float16] */;
  %322 = %314(%313, meta[relay.Constant][134] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 14, 14, 32), float16] */;
  %323 = fn (%p081: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p195: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p255: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p345: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p419: Tensor[(352), float16] /* ty=Tensor[(352), float16] */, %p516: Tensor[(352), float16] /* ty=Tensor[(352), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 352), float16] {
    %318 = (%p081, %p195, %p255, %p345) /* ty=(Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16]) span=aten::cat_23:0:0 */;
    %319 = concatenate(%318, axis=3) /* ty=Tensor[(32, 14, 14, 352), float16] */;
    %320 = multiply(%319, %p419) /* ty=Tensor[(32, 14, 14, 352), float16] */;
    %321 = add(%320, %p516) /* ty=Tensor[(32, 14, 14, 352), float16] */;
    nn.relu(%321) /* ty=Tensor[(32, 14, 14, 352), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(352), float16], Tensor[(352), float16]) -> Tensor[(32, 14, 14, 352), float16] */;
  %324 = %323(%283, %296, %309, %322, meta[relay.Constant][135] /* ty=Tensor[(352), float16] */, meta[relay.Constant][136] /* ty=Tensor[(352), float16] */) /* ty=Tensor[(32, 14, 14, 352), float16] */;
  %325 = fn (%p080: Tensor[(32, 14, 14, 352), float16] /* ty=Tensor[(32, 14, 14, 352), float16] */, %p194: Tensor[(128, 1, 1, 352), float16] /* ty=Tensor[(128, 1, 1, 352), float16] */, %p254: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p344: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 128), float16] {
    %315 = nn.conv2d(%p080, %p194, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %316 = multiply(%315, %p254) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %317 = add(%316, %p344) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    nn.relu(%317) /* ty=Tensor[(32, 14, 14, 128), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 352), float16], Tensor[(128, 1, 1, 352), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 14, 14, 128), float16] */;
  %326 = %325(%324, meta[relay.Constant][137] /* ty=Tensor[(128, 1, 1, 352), float16] */, meta[relay.Constant][138] /* ty=Tensor[(128), float16] */, meta[relay.Constant][139] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 14, 14, 128), float16] */;
  %327 = fn (%p079: Tensor[(32, 14, 14, 128), float16] /* ty=Tensor[(32, 14, 14, 128), float16] */, %p193: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 32), float16] {
    nn.conv2d(%p079, %p193, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 32), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 14, 14, 32), float16] */;
  %335 = %327(%326, meta[relay.Constant][140] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 14, 14, 32), float16] */;
  %336 = fn (%p084: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p198: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p257: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p347: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p420: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p517: Tensor[(384), float16] /* ty=Tensor[(384), float16] */, %p614: Tensor[(384), float16] /* ty=Tensor[(384), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 384), float16] {
    %331 = (%p084, %p198, %p257, %p347, %p420) /* ty=(Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16]) span=aten::cat_24:0:0 */;
    %332 = concatenate(%331, axis=3) /* ty=Tensor[(32, 14, 14, 384), float16] */;
    %333 = multiply(%332, %p517) /* ty=Tensor[(32, 14, 14, 384), float16] */;
    %334 = add(%333, %p614) /* ty=Tensor[(32, 14, 14, 384), float16] */;
    nn.relu(%334) /* ty=Tensor[(32, 14, 14, 384), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(384), float16], Tensor[(384), float16]) -> Tensor[(32, 14, 14, 384), float16] */;
  %337 = %336(%283, %296, %309, %322, %335, meta[relay.Constant][141] /* ty=Tensor[(384), float16] */, meta[relay.Constant][142] /* ty=Tensor[(384), float16] */) /* ty=Tensor[(32, 14, 14, 384), float16] */;
  %338 = fn (%p083: Tensor[(32, 14, 14, 384), float16] /* ty=Tensor[(32, 14, 14, 384), float16] */, %p197: Tensor[(128, 1, 1, 384), float16] /* ty=Tensor[(128, 1, 1, 384), float16] */, %p256: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p346: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 128), float16] {
    %328 = nn.conv2d(%p083, %p197, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %329 = multiply(%328, %p256) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %330 = add(%329, %p346) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    nn.relu(%330) /* ty=Tensor[(32, 14, 14, 128), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 384), float16], Tensor[(128, 1, 1, 384), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 14, 14, 128), float16] */;
  %339 = %338(%337, meta[relay.Constant][143] /* ty=Tensor[(128, 1, 1, 384), float16] */, meta[relay.Constant][144] /* ty=Tensor[(128), float16] */, meta[relay.Constant][145] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 14, 14, 128), float16] */;
  %340 = fn (%p082: Tensor[(32, 14, 14, 128), float16] /* ty=Tensor[(32, 14, 14, 128), float16] */, %p196: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 32), float16] {
    nn.conv2d(%p082, %p196, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 32), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 14, 14, 32), float16] */;
  %348 = %340(%339, meta[relay.Constant][146] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 14, 14, 32), float16] */;
  %349 = fn (%p087: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p1101: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p259: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p349: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p421: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p518: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p615: Tensor[(416), float16] /* ty=Tensor[(416), float16] */, %p712: Tensor[(416), float16] /* ty=Tensor[(416), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 416), float16] {
    %344 = (%p087, %p1101, %p259, %p349, %p421, %p518) /* ty=(Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16]) span=aten::cat_25:0:0 */;
    %345 = concatenate(%344, axis=3) /* ty=Tensor[(32, 14, 14, 416), float16] */;
    %346 = multiply(%345, %p615) /* ty=Tensor[(32, 14, 14, 416), float16] */;
    %347 = add(%346, %p712) /* ty=Tensor[(32, 14, 14, 416), float16] */;
    nn.relu(%347) /* ty=Tensor[(32, 14, 14, 416), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(416), float16], Tensor[(416), float16]) -> Tensor[(32, 14, 14, 416), float16] */;
  %350 = %349(%283, %296, %309, %322, %335, %348, meta[relay.Constant][147] /* ty=Tensor[(416), float16] */, meta[relay.Constant][148] /* ty=Tensor[(416), float16] */) /* ty=Tensor[(32, 14, 14, 416), float16] */;
  %351 = fn (%p086: Tensor[(32, 14, 14, 416), float16] /* ty=Tensor[(32, 14, 14, 416), float16] */, %p1100: Tensor[(128, 1, 1, 416), float16] /* ty=Tensor[(128, 1, 1, 416), float16] */, %p258: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p348: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 128), float16] {
    %341 = nn.conv2d(%p086, %p1100, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %342 = multiply(%341, %p258) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %343 = add(%342, %p348) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    nn.relu(%343) /* ty=Tensor[(32, 14, 14, 128), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 416), float16], Tensor[(128, 1, 1, 416), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 14, 14, 128), float16] */;
  %352 = %351(%350, meta[relay.Constant][149] /* ty=Tensor[(128, 1, 1, 416), float16] */, meta[relay.Constant][150] /* ty=Tensor[(128), float16] */, meta[relay.Constant][151] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 14, 14, 128), float16] */;
  %353 = fn (%p085: Tensor[(32, 14, 14, 128), float16] /* ty=Tensor[(32, 14, 14, 128), float16] */, %p199: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 32), float16] {
    nn.conv2d(%p085, %p199, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 32), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 14, 14, 32), float16] */;
  %361 = %353(%352, meta[relay.Constant][152] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 14, 14, 32), float16] */;
  %362 = fn (%p090: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p1104: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p261: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p351: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p422: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p519: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p616: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p713: Tensor[(448), float16] /* ty=Tensor[(448), float16] */, %p810: Tensor[(448), float16] /* ty=Tensor[(448), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 448), float16] {
    %357 = (%p090, %p1104, %p261, %p351, %p422, %p519, %p616) /* ty=(Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16]) span=aten::cat_26:0:0 */;
    %358 = concatenate(%357, axis=3) /* ty=Tensor[(32, 14, 14, 448), float16] */;
    %359 = multiply(%358, %p713) /* ty=Tensor[(32, 14, 14, 448), float16] */;
    %360 = add(%359, %p810) /* ty=Tensor[(32, 14, 14, 448), float16] */;
    nn.relu(%360) /* ty=Tensor[(32, 14, 14, 448), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(448), float16], Tensor[(448), float16]) -> Tensor[(32, 14, 14, 448), float16] */;
  %363 = %362(%283, %296, %309, %322, %335, %348, %361, meta[relay.Constant][153] /* ty=Tensor[(448), float16] */, meta[relay.Constant][154] /* ty=Tensor[(448), float16] */) /* ty=Tensor[(32, 14, 14, 448), float16] */;
  %364 = fn (%p089: Tensor[(32, 14, 14, 448), float16] /* ty=Tensor[(32, 14, 14, 448), float16] */, %p1103: Tensor[(128, 1, 1, 448), float16] /* ty=Tensor[(128, 1, 1, 448), float16] */, %p260: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p350: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 128), float16] {
    %354 = nn.conv2d(%p089, %p1103, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %355 = multiply(%354, %p260) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %356 = add(%355, %p350) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    nn.relu(%356) /* ty=Tensor[(32, 14, 14, 128), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 448), float16], Tensor[(128, 1, 1, 448), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 14, 14, 128), float16] */;
  %365 = %364(%363, meta[relay.Constant][155] /* ty=Tensor[(128, 1, 1, 448), float16] */, meta[relay.Constant][156] /* ty=Tensor[(128), float16] */, meta[relay.Constant][157] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 14, 14, 128), float16] */;
  %366 = fn (%p088: Tensor[(32, 14, 14, 128), float16] /* ty=Tensor[(32, 14, 14, 128), float16] */, %p1102: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 32), float16] {
    nn.conv2d(%p088, %p1102, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 32), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 14, 14, 32), float16] */;
  %374 = %366(%365, meta[relay.Constant][158] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 14, 14, 32), float16] */;
  %375 = fn (%p093: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p1107: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p263: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p353: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p423: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p520: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p617: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p714: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p811: Tensor[(480), float16] /* ty=Tensor[(480), float16] */, %p98: Tensor[(480), float16] /* ty=Tensor[(480), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 480), float16] {
    %370 = (%p093, %p1107, %p263, %p353, %p423, %p520, %p617, %p714) /* ty=(Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16]) span=aten::cat_27:0:0 */;
    %371 = concatenate(%370, axis=3) /* ty=Tensor[(32, 14, 14, 480), float16] */;
    %372 = multiply(%371, %p811) /* ty=Tensor[(32, 14, 14, 480), float16] */;
    %373 = add(%372, %p98) /* ty=Tensor[(32, 14, 14, 480), float16] */;
    nn.relu(%373) /* ty=Tensor[(32, 14, 14, 480), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(480), float16], Tensor[(480), float16]) -> Tensor[(32, 14, 14, 480), float16] */;
  %376 = %375(%283, %296, %309, %322, %335, %348, %361, %374, meta[relay.Constant][159] /* ty=Tensor[(480), float16] */, meta[relay.Constant][160] /* ty=Tensor[(480), float16] */) /* ty=Tensor[(32, 14, 14, 480), float16] */;
  %377 = fn (%p092: Tensor[(32, 14, 14, 480), float16] /* ty=Tensor[(32, 14, 14, 480), float16] */, %p1106: Tensor[(128, 1, 1, 480), float16] /* ty=Tensor[(128, 1, 1, 480), float16] */, %p262: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p352: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 128), float16] {
    %367 = nn.conv2d(%p092, %p1106, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %368 = multiply(%367, %p262) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %369 = add(%368, %p352) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    nn.relu(%369) /* ty=Tensor[(32, 14, 14, 128), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 480), float16], Tensor[(128, 1, 1, 480), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 14, 14, 128), float16] */;
  %378 = %377(%376, meta[relay.Constant][161] /* ty=Tensor[(128, 1, 1, 480), float16] */, meta[relay.Constant][162] /* ty=Tensor[(128), float16] */, meta[relay.Constant][163] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 14, 14, 128), float16] */;
  %379 = fn (%p091: Tensor[(32, 14, 14, 128), float16] /* ty=Tensor[(32, 14, 14, 128), float16] */, %p1105: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 32), float16] {
    nn.conv2d(%p091, %p1105, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 32), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 14, 14, 32), float16] */;
  %387 = %379(%378, meta[relay.Constant][164] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 14, 14, 32), float16] */;
  %388 = fn (%p096: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p1113: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p265: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p355: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p424: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p521: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p618: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p715: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p812: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p99: Tensor[(512), float16] /* ty=Tensor[(512), float16] */, %p107: Tensor[(512), float16] /* ty=Tensor[(512), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 512), float16] {
    %383 = (%p096, %p1113, %p265, %p355, %p424, %p521, %p618, %p715, %p812) /* ty=(Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16]) span=aten::cat_28:0:0 */;
    %384 = concatenate(%383, axis=3) /* ty=Tensor[(32, 14, 14, 512), float16] */;
    %385 = multiply(%384, %p99) /* ty=Tensor[(32, 14, 14, 512), float16] */;
    %386 = add(%385, %p107) /* ty=Tensor[(32, 14, 14, 512), float16] */;
    nn.relu(%386) /* ty=Tensor[(32, 14, 14, 512), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(512), float16], Tensor[(512), float16]) -> Tensor[(32, 14, 14, 512), float16] */;
  %389 = %388(%283, %296, %309, %322, %335, %348, %361, %374, %387, meta[relay.Constant][165] /* ty=Tensor[(512), float16] */, meta[relay.Constant][166] /* ty=Tensor[(512), float16] */) /* ty=Tensor[(32, 14, 14, 512), float16] */;
  %390 = fn (%p095: Tensor[(32, 14, 14, 512), float16] /* ty=Tensor[(32, 14, 14, 512), float16] */, %p1109: Tensor[(128, 1, 1, 512), float16] /* ty=Tensor[(128, 1, 1, 512), float16] */, %p264: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p354: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 128), float16] {
    %380 = nn.conv2d(%p095, %p1109, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %381 = multiply(%380, %p264) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %382 = add(%381, %p354) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    nn.relu(%382) /* ty=Tensor[(32, 14, 14, 128), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 512), float16], Tensor[(128, 1, 1, 512), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 14, 14, 128), float16] */;
  %391 = %390(%389, meta[relay.Constant][167] /* ty=Tensor[(128, 1, 1, 512), float16] */, meta[relay.Constant][168] /* ty=Tensor[(128), float16] */, meta[relay.Constant][169] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 14, 14, 128), float16] */;
  %392 = fn (%p094: Tensor[(32, 14, 14, 128), float16] /* ty=Tensor[(32, 14, 14, 128), float16] */, %p1108: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 32), float16] {
    nn.conv2d(%p094, %p1108, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 32), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 14, 14, 32), float16] */;
  %400 = %392(%391, meta[relay.Constant][170] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 14, 14, 32), float16] */;
  %401 = fn (%p099: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p1116: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p267: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p357: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p425: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p522: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p619: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p716: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p813: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p910: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p108: Tensor[(544), float16] /* ty=Tensor[(544), float16] */, %p1117: Tensor[(544), float16] /* ty=Tensor[(544), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 544), float16] {
    %396 = (%p099, %p1116, %p267, %p357, %p425, %p522, %p619, %p716, %p813, %p910) /* ty=(Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16]) span=aten::cat_29:0:0 */;
    %397 = concatenate(%396, axis=3) /* ty=Tensor[(32, 14, 14, 544), float16] */;
    %398 = multiply(%397, %p108) /* ty=Tensor[(32, 14, 14, 544), float16] */;
    %399 = add(%398, %p1117) /* ty=Tensor[(32, 14, 14, 544), float16] */;
    nn.relu(%399) /* ty=Tensor[(32, 14, 14, 544), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(544), float16], Tensor[(544), float16]) -> Tensor[(32, 14, 14, 544), float16] */;
  %402 = %401(%283, %296, %309, %322, %335, %348, %361, %374, %387, %400, meta[relay.Constant][171] /* ty=Tensor[(544), float16] */, meta[relay.Constant][172] /* ty=Tensor[(544), float16] */) /* ty=Tensor[(32, 14, 14, 544), float16] */;
  %403 = fn (%p098: Tensor[(32, 14, 14, 544), float16] /* ty=Tensor[(32, 14, 14, 544), float16] */, %p1115: Tensor[(128, 1, 1, 544), float16] /* ty=Tensor[(128, 1, 1, 544), float16] */, %p266: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p356: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 128), float16] {
    %393 = nn.conv2d(%p098, %p1115, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %394 = multiply(%393, %p266) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %395 = add(%394, %p356) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    nn.relu(%395) /* ty=Tensor[(32, 14, 14, 128), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 544), float16], Tensor[(128, 1, 1, 544), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 14, 14, 128), float16] */;
  %404 = %403(%402, meta[relay.Constant][173] /* ty=Tensor[(128, 1, 1, 544), float16] */, meta[relay.Constant][174] /* ty=Tensor[(128), float16] */, meta[relay.Constant][175] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 14, 14, 128), float16] */;
  %405 = fn (%p097: Tensor[(32, 14, 14, 128), float16] /* ty=Tensor[(32, 14, 14, 128), float16] */, %p1114: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 32), float16] {
    nn.conv2d(%p097, %p1114, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 32), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 14, 14, 32), float16] */;
  %413 = %405(%404, meta[relay.Constant][176] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 14, 14, 32), float16] */;
  %414 = fn (%p0102: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p1120: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p269: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p359: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p426: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p523: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p620: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p717: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p814: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p911: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p109: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1121: Tensor[(576), float16] /* ty=Tensor[(576), float16] */, %p1212: Tensor[(576), float16] /* ty=Tensor[(576), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 576), float16] {
    %409 = (%p0102, %p1120, %p269, %p359, %p426, %p523, %p620, %p717, %p814, %p911, %p109) /* ty=(Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16]) span=aten::cat_30:0:0 */;
    %410 = concatenate(%409, axis=3) /* ty=Tensor[(32, 14, 14, 576), float16] */;
    %411 = multiply(%410, %p1121) /* ty=Tensor[(32, 14, 14, 576), float16] */;
    %412 = add(%411, %p1212) /* ty=Tensor[(32, 14, 14, 576), float16] */;
    nn.relu(%412) /* ty=Tensor[(32, 14, 14, 576), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(576), float16], Tensor[(576), float16]) -> Tensor[(32, 14, 14, 576), float16] */;
  %415 = %414(%283, %296, %309, %322, %335, %348, %361, %374, %387, %400, %413, meta[relay.Constant][177] /* ty=Tensor[(576), float16] */, meta[relay.Constant][178] /* ty=Tensor[(576), float16] */) /* ty=Tensor[(32, 14, 14, 576), float16] */;
  %416 = fn (%p0101: Tensor[(32, 14, 14, 576), float16] /* ty=Tensor[(32, 14, 14, 576), float16] */, %p1119: Tensor[(128, 1, 1, 576), float16] /* ty=Tensor[(128, 1, 1, 576), float16] */, %p268: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p358: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 128), float16] {
    %406 = nn.conv2d(%p0101, %p1119, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %407 = multiply(%406, %p268) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %408 = add(%407, %p358) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    nn.relu(%408) /* ty=Tensor[(32, 14, 14, 128), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 576), float16], Tensor[(128, 1, 1, 576), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 14, 14, 128), float16] */;
  %417 = %416(%415, meta[relay.Constant][179] /* ty=Tensor[(128, 1, 1, 576), float16] */, meta[relay.Constant][180] /* ty=Tensor[(128), float16] */, meta[relay.Constant][181] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 14, 14, 128), float16] */;
  %418 = fn (%p0100: Tensor[(32, 14, 14, 128), float16] /* ty=Tensor[(32, 14, 14, 128), float16] */, %p1118: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 32), float16] {
    nn.conv2d(%p0100, %p1118, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 32), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 14, 14, 32), float16] */;
  %426 = %418(%417, meta[relay.Constant][182] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 14, 14, 32), float16] */;
  %427 = fn (%p0105: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p1124: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p271: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p361: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p427: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p524: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p621: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p718: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p815: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p912: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1010: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1125: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1213: Tensor[(608), float16] /* ty=Tensor[(608), float16] */, %p1311: Tensor[(608), float16] /* ty=Tensor[(608), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 608), float16] {
    %422 = (%p0105, %p1124, %p271, %p361, %p427, %p524, %p621, %p718, %p815, %p912, %p1010, %p1125) /* ty=(Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16]) span=aten::cat_31:0:0 */;
    %423 = concatenate(%422, axis=3) /* ty=Tensor[(32, 14, 14, 608), float16] */;
    %424 = multiply(%423, %p1213) /* ty=Tensor[(32, 14, 14, 608), float16] */;
    %425 = add(%424, %p1311) /* ty=Tensor[(32, 14, 14, 608), float16] */;
    nn.relu(%425) /* ty=Tensor[(32, 14, 14, 608), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(608), float16], Tensor[(608), float16]) -> Tensor[(32, 14, 14, 608), float16] */;
  %428 = %427(%283, %296, %309, %322, %335, %348, %361, %374, %387, %400, %413, %426, meta[relay.Constant][183] /* ty=Tensor[(608), float16] */, meta[relay.Constant][184] /* ty=Tensor[(608), float16] */) /* ty=Tensor[(32, 14, 14, 608), float16] */;
  %429 = fn (%p0104: Tensor[(32, 14, 14, 608), float16] /* ty=Tensor[(32, 14, 14, 608), float16] */, %p1123: Tensor[(128, 1, 1, 608), float16] /* ty=Tensor[(128, 1, 1, 608), float16] */, %p270: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p360: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 128), float16] {
    %419 = nn.conv2d(%p0104, %p1123, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %420 = multiply(%419, %p270) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %421 = add(%420, %p360) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    nn.relu(%421) /* ty=Tensor[(32, 14, 14, 128), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 608), float16], Tensor[(128, 1, 1, 608), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 14, 14, 128), float16] */;
  %430 = %429(%428, meta[relay.Constant][185] /* ty=Tensor[(128, 1, 1, 608), float16] */, meta[relay.Constant][186] /* ty=Tensor[(128), float16] */, meta[relay.Constant][187] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 14, 14, 128), float16] */;
  %431 = fn (%p0103: Tensor[(32, 14, 14, 128), float16] /* ty=Tensor[(32, 14, 14, 128), float16] */, %p1122: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 32), float16] {
    nn.conv2d(%p0103, %p1122, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 32), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 14, 14, 32), float16] */;
  %439 = %431(%430, meta[relay.Constant][188] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 14, 14, 32), float16] */;
  %440 = fn (%p0108: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p1128: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p273: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p363: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p428: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p525: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p622: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p719: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p816: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p913: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1011: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1129: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1214: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1312: Tensor[(640), float16] /* ty=Tensor[(640), float16] */, %p1410: Tensor[(640), float16] /* ty=Tensor[(640), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 640), float16] {
    %435 = (%p0108, %p1128, %p273, %p363, %p428, %p525, %p622, %p719, %p816, %p913, %p1011, %p1129, %p1214) /* ty=(Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16]) span=aten::cat_32:0:0 */;
    %436 = concatenate(%435, axis=3) /* ty=Tensor[(32, 14, 14, 640), float16] */;
    %437 = multiply(%436, %p1312) /* ty=Tensor[(32, 14, 14, 640), float16] */;
    %438 = add(%437, %p1410) /* ty=Tensor[(32, 14, 14, 640), float16] */;
    nn.relu(%438) /* ty=Tensor[(32, 14, 14, 640), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(640), float16], Tensor[(640), float16]) -> Tensor[(32, 14, 14, 640), float16] */;
  %441 = %440(%283, %296, %309, %322, %335, %348, %361, %374, %387, %400, %413, %426, %439, meta[relay.Constant][189] /* ty=Tensor[(640), float16] */, meta[relay.Constant][190] /* ty=Tensor[(640), float16] */) /* ty=Tensor[(32, 14, 14, 640), float16] */;
  %442 = fn (%p0107: Tensor[(32, 14, 14, 640), float16] /* ty=Tensor[(32, 14, 14, 640), float16] */, %p1127: Tensor[(128, 1, 1, 640), float16] /* ty=Tensor[(128, 1, 1, 640), float16] */, %p272: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p362: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 128), float16] {
    %432 = nn.conv2d(%p0107, %p1127, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %433 = multiply(%432, %p272) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %434 = add(%433, %p362) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    nn.relu(%434) /* ty=Tensor[(32, 14, 14, 128), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 640), float16], Tensor[(128, 1, 1, 640), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 14, 14, 128), float16] */;
  %443 = %442(%441, meta[relay.Constant][191] /* ty=Tensor[(128, 1, 1, 640), float16] */, meta[relay.Constant][192] /* ty=Tensor[(128), float16] */, meta[relay.Constant][193] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 14, 14, 128), float16] */;
  %444 = fn (%p0106: Tensor[(32, 14, 14, 128), float16] /* ty=Tensor[(32, 14, 14, 128), float16] */, %p1126: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 32), float16] {
    nn.conv2d(%p0106, %p1126, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 32), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 14, 14, 32), float16] */;
  %452 = %444(%443, meta[relay.Constant][194] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 14, 14, 32), float16] */;
  %453 = fn (%p0111: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p1132: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p275: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p365: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p429: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p526: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p623: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p720: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p817: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p914: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1012: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1133: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1215: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1313: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1411: Tensor[(672), float16] /* ty=Tensor[(672), float16] */, %p1510: Tensor[(672), float16] /* ty=Tensor[(672), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 672), float16] {
    %448 = (%p0111, %p1132, %p275, %p365, %p429, %p526, %p623, %p720, %p817, %p914, %p1012, %p1133, %p1215, %p1313) /* ty=(Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16]) span=aten::cat_33:0:0 */;
    %449 = concatenate(%448, axis=3) /* ty=Tensor[(32, 14, 14, 672), float16] */;
    %450 = multiply(%449, %p1411) /* ty=Tensor[(32, 14, 14, 672), float16] */;
    %451 = add(%450, %p1510) /* ty=Tensor[(32, 14, 14, 672), float16] */;
    nn.relu(%451) /* ty=Tensor[(32, 14, 14, 672), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(672), float16], Tensor[(672), float16]) -> Tensor[(32, 14, 14, 672), float16] */;
  %454 = %453(%283, %296, %309, %322, %335, %348, %361, %374, %387, %400, %413, %426, %439, %452, meta[relay.Constant][195] /* ty=Tensor[(672), float16] */, meta[relay.Constant][196] /* ty=Tensor[(672), float16] */) /* ty=Tensor[(32, 14, 14, 672), float16] */;
  %455 = fn (%p0110: Tensor[(32, 14, 14, 672), float16] /* ty=Tensor[(32, 14, 14, 672), float16] */, %p1131: Tensor[(128, 1, 1, 672), float16] /* ty=Tensor[(128, 1, 1, 672), float16] */, %p274: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p364: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 128), float16] {
    %445 = nn.conv2d(%p0110, %p1131, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %446 = multiply(%445, %p274) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %447 = add(%446, %p364) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    nn.relu(%447) /* ty=Tensor[(32, 14, 14, 128), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 672), float16], Tensor[(128, 1, 1, 672), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 14, 14, 128), float16] */;
  %456 = %455(%454, meta[relay.Constant][197] /* ty=Tensor[(128, 1, 1, 672), float16] */, meta[relay.Constant][198] /* ty=Tensor[(128), float16] */, meta[relay.Constant][199] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 14, 14, 128), float16] */;
  %457 = fn (%p0109: Tensor[(32, 14, 14, 128), float16] /* ty=Tensor[(32, 14, 14, 128), float16] */, %p1130: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 32), float16] {
    nn.conv2d(%p0109, %p1130, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 32), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 14, 14, 32), float16] */;
  %465 = %457(%456, meta[relay.Constant][200] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 14, 14, 32), float16] */;
  %466 = fn (%p0114: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p1136: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p277: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p367: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p430: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p527: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p624: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p721: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p818: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p915: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1013: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1137: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1216: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1314: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1412: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1511: Tensor[(704), float16] /* ty=Tensor[(704), float16] */, %p1610: Tensor[(704), float16] /* ty=Tensor[(704), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 704), float16] {
    %461 = (%p0114, %p1136, %p277, %p367, %p430, %p527, %p624, %p721, %p818, %p915, %p1013, %p1137, %p1216, %p1314, %p1412) /* ty=(Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16]) span=aten::cat_34:0:0 */;
    %462 = concatenate(%461, axis=3) /* ty=Tensor[(32, 14, 14, 704), float16] */;
    %463 = multiply(%462, %p1511) /* ty=Tensor[(32, 14, 14, 704), float16] */;
    %464 = add(%463, %p1610) /* ty=Tensor[(32, 14, 14, 704), float16] */;
    nn.relu(%464) /* ty=Tensor[(32, 14, 14, 704), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(704), float16], Tensor[(704), float16]) -> Tensor[(32, 14, 14, 704), float16] */;
  %467 = %466(%283, %296, %309, %322, %335, %348, %361, %374, %387, %400, %413, %426, %439, %452, %465, meta[relay.Constant][201] /* ty=Tensor[(704), float16] */, meta[relay.Constant][202] /* ty=Tensor[(704), float16] */) /* ty=Tensor[(32, 14, 14, 704), float16] */;
  %468 = fn (%p0113: Tensor[(32, 14, 14, 704), float16] /* ty=Tensor[(32, 14, 14, 704), float16] */, %p1135: Tensor[(128, 1, 1, 704), float16] /* ty=Tensor[(128, 1, 1, 704), float16] */, %p276: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p366: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 128), float16] {
    %458 = nn.conv2d(%p0113, %p1135, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %459 = multiply(%458, %p276) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %460 = add(%459, %p366) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    nn.relu(%460) /* ty=Tensor[(32, 14, 14, 128), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 704), float16], Tensor[(128, 1, 1, 704), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 14, 14, 128), float16] */;
  %469 = %468(%467, meta[relay.Constant][203] /* ty=Tensor[(128, 1, 1, 704), float16] */, meta[relay.Constant][204] /* ty=Tensor[(128), float16] */, meta[relay.Constant][205] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 14, 14, 128), float16] */;
  %470 = fn (%p0112: Tensor[(32, 14, 14, 128), float16] /* ty=Tensor[(32, 14, 14, 128), float16] */, %p1134: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 32), float16] {
    nn.conv2d(%p0112, %p1134, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 32), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 14, 14, 32), float16] */;
  %478 = %470(%469, meta[relay.Constant][206] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 14, 14, 32), float16] */;
  %479 = fn (%p0117: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p1140: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p279: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p369: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p431: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p528: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p625: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p722: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p819: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p916: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1014: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1141: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1217: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1315: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1413: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1512: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1611: Tensor[(736), float16] /* ty=Tensor[(736), float16] */, %p1710: Tensor[(736), float16] /* ty=Tensor[(736), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 736), float16] {
    %474 = (%p0117, %p1140, %p279, %p369, %p431, %p528, %p625, %p722, %p819, %p916, %p1014, %p1141, %p1217, %p1315, %p1413, %p1512) /* ty=(Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16]) span=aten::cat_35:0:0 */;
    %475 = concatenate(%474, axis=3) /* ty=Tensor[(32, 14, 14, 736), float16] */;
    %476 = multiply(%475, %p1611) /* ty=Tensor[(32, 14, 14, 736), float16] */;
    %477 = add(%476, %p1710) /* ty=Tensor[(32, 14, 14, 736), float16] */;
    nn.relu(%477) /* ty=Tensor[(32, 14, 14, 736), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(736), float16], Tensor[(736), float16]) -> Tensor[(32, 14, 14, 736), float16] */;
  %480 = %479(%283, %296, %309, %322, %335, %348, %361, %374, %387, %400, %413, %426, %439, %452, %465, %478, meta[relay.Constant][207] /* ty=Tensor[(736), float16] */, meta[relay.Constant][208] /* ty=Tensor[(736), float16] */) /* ty=Tensor[(32, 14, 14, 736), float16] */;
  %481 = fn (%p0116: Tensor[(32, 14, 14, 736), float16] /* ty=Tensor[(32, 14, 14, 736), float16] */, %p1139: Tensor[(128, 1, 1, 736), float16] /* ty=Tensor[(128, 1, 1, 736), float16] */, %p278: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p368: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 128), float16] {
    %471 = nn.conv2d(%p0116, %p1139, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %472 = multiply(%471, %p278) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %473 = add(%472, %p368) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    nn.relu(%473) /* ty=Tensor[(32, 14, 14, 128), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 736), float16], Tensor[(128, 1, 1, 736), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 14, 14, 128), float16] */;
  %482 = %481(%480, meta[relay.Constant][209] /* ty=Tensor[(128, 1, 1, 736), float16] */, meta[relay.Constant][210] /* ty=Tensor[(128), float16] */, meta[relay.Constant][211] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 14, 14, 128), float16] */;
  %483 = fn (%p0115: Tensor[(32, 14, 14, 128), float16] /* ty=Tensor[(32, 14, 14, 128), float16] */, %p1138: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 32), float16] {
    nn.conv2d(%p0115, %p1138, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 32), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 14, 14, 32), float16] */;
  %491 = %483(%482, meta[relay.Constant][212] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 14, 14, 32), float16] */;
  %492 = fn (%p0120: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p1144: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p281: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p371: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p432: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p529: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p626: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p723: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p820: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p917: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1015: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1145: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1218: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1316: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1414: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1513: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1612: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1711: Tensor[(768), float16] /* ty=Tensor[(768), float16] */, %p1810: Tensor[(768), float16] /* ty=Tensor[(768), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 768), float16] {
    %487 = (%p0120, %p1144, %p281, %p371, %p432, %p529, %p626, %p723, %p820, %p917, %p1015, %p1145, %p1218, %p1316, %p1414, %p1513, %p1612) /* ty=(Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16]) span=aten::cat_36:0:0 */;
    %488 = concatenate(%487, axis=3) /* ty=Tensor[(32, 14, 14, 768), float16] */;
    %489 = multiply(%488, %p1711) /* ty=Tensor[(32, 14, 14, 768), float16] */;
    %490 = add(%489, %p1810) /* ty=Tensor[(32, 14, 14, 768), float16] */;
    nn.relu(%490) /* ty=Tensor[(32, 14, 14, 768), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(768), float16], Tensor[(768), float16]) -> Tensor[(32, 14, 14, 768), float16] */;
  %493 = %492(%283, %296, %309, %322, %335, %348, %361, %374, %387, %400, %413, %426, %439, %452, %465, %478, %491, meta[relay.Constant][213] /* ty=Tensor[(768), float16] */, meta[relay.Constant][214] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(32, 14, 14, 768), float16] */;
  %494 = fn (%p0119: Tensor[(32, 14, 14, 768), float16] /* ty=Tensor[(32, 14, 14, 768), float16] */, %p1143: Tensor[(128, 1, 1, 768), float16] /* ty=Tensor[(128, 1, 1, 768), float16] */, %p280: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p370: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 128), float16] {
    %484 = nn.conv2d(%p0119, %p1143, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %485 = multiply(%484, %p280) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %486 = add(%485, %p370) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    nn.relu(%486) /* ty=Tensor[(32, 14, 14, 128), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 768), float16], Tensor[(128, 1, 1, 768), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 14, 14, 128), float16] */;
  %495 = %494(%493, meta[relay.Constant][215] /* ty=Tensor[(128, 1, 1, 768), float16] */, meta[relay.Constant][216] /* ty=Tensor[(128), float16] */, meta[relay.Constant][217] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 14, 14, 128), float16] */;
  %496 = fn (%p0118: Tensor[(32, 14, 14, 128), float16] /* ty=Tensor[(32, 14, 14, 128), float16] */, %p1142: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 32), float16] {
    nn.conv2d(%p0118, %p1142, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 32), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 14, 14, 32), float16] */;
  %504 = %496(%495, meta[relay.Constant][218] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 14, 14, 32), float16] */;
  %505 = fn (%p0123: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p1148: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p283: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p373: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p433: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p530: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p627: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p724: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p821: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p918: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1016: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1149: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1219: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1317: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1415: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1514: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1613: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1712: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1811: Tensor[(800), float16] /* ty=Tensor[(800), float16] */, %p1910: Tensor[(800), float16] /* ty=Tensor[(800), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 800), float16] {
    %500 = (%p0123, %p1148, %p283, %p373, %p433, %p530, %p627, %p724, %p821, %p918, %p1016, %p1149, %p1219, %p1317, %p1415, %p1514, %p1613, %p1712) /* ty=(Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16]) span=aten::cat_37:0:0 */;
    %501 = concatenate(%500, axis=3) /* ty=Tensor[(32, 14, 14, 800), float16] */;
    %502 = multiply(%501, %p1811) /* ty=Tensor[(32, 14, 14, 800), float16] */;
    %503 = add(%502, %p1910) /* ty=Tensor[(32, 14, 14, 800), float16] */;
    nn.relu(%503) /* ty=Tensor[(32, 14, 14, 800), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(800), float16], Tensor[(800), float16]) -> Tensor[(32, 14, 14, 800), float16] */;
  %506 = %505(%283, %296, %309, %322, %335, %348, %361, %374, %387, %400, %413, %426, %439, %452, %465, %478, %491, %504, meta[relay.Constant][219] /* ty=Tensor[(800), float16] */, meta[relay.Constant][220] /* ty=Tensor[(800), float16] */) /* ty=Tensor[(32, 14, 14, 800), float16] */;
  %507 = fn (%p0122: Tensor[(32, 14, 14, 800), float16] /* ty=Tensor[(32, 14, 14, 800), float16] */, %p1147: Tensor[(128, 1, 1, 800), float16] /* ty=Tensor[(128, 1, 1, 800), float16] */, %p282: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p372: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 128), float16] {
    %497 = nn.conv2d(%p0122, %p1147, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %498 = multiply(%497, %p282) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %499 = add(%498, %p372) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    nn.relu(%499) /* ty=Tensor[(32, 14, 14, 128), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 800), float16], Tensor[(128, 1, 1, 800), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 14, 14, 128), float16] */;
  %508 = %507(%506, meta[relay.Constant][221] /* ty=Tensor[(128, 1, 1, 800), float16] */, meta[relay.Constant][222] /* ty=Tensor[(128), float16] */, meta[relay.Constant][223] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 14, 14, 128), float16] */;
  %509 = fn (%p0121: Tensor[(32, 14, 14, 128), float16] /* ty=Tensor[(32, 14, 14, 128), float16] */, %p1146: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 32), float16] {
    nn.conv2d(%p0121, %p1146, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 32), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 14, 14, 32), float16] */;
  %517 = %509(%508, meta[relay.Constant][224] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 14, 14, 32), float16] */;
  %518 = fn (%p0126: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p1152: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p285: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p375: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p434: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p531: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p628: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p725: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p822: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p919: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1017: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1153: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1220: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1318: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1416: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1515: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1614: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1713: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1812: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1911: Tensor[(832), float16] /* ty=Tensor[(832), float16] */, %p201: Tensor[(832), float16] /* ty=Tensor[(832), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 832), float16] {
    %513 = (%p0126, %p1152, %p285, %p375, %p434, %p531, %p628, %p725, %p822, %p919, %p1017, %p1153, %p1220, %p1318, %p1416, %p1515, %p1614, %p1713, %p1812) /* ty=(Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16]) span=aten::cat_38:0:0 */;
    %514 = concatenate(%513, axis=3) /* ty=Tensor[(32, 14, 14, 832), float16] */;
    %515 = multiply(%514, %p1911) /* ty=Tensor[(32, 14, 14, 832), float16] */;
    %516 = add(%515, %p201) /* ty=Tensor[(32, 14, 14, 832), float16] */;
    nn.relu(%516) /* ty=Tensor[(32, 14, 14, 832), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(832), float16], Tensor[(832), float16]) -> Tensor[(32, 14, 14, 832), float16] */;
  %519 = %518(%283, %296, %309, %322, %335, %348, %361, %374, %387, %400, %413, %426, %439, %452, %465, %478, %491, %504, %517, meta[relay.Constant][225] /* ty=Tensor[(832), float16] */, meta[relay.Constant][226] /* ty=Tensor[(832), float16] */) /* ty=Tensor[(32, 14, 14, 832), float16] */;
  %520 = fn (%p0125: Tensor[(32, 14, 14, 832), float16] /* ty=Tensor[(32, 14, 14, 832), float16] */, %p1151: Tensor[(128, 1, 1, 832), float16] /* ty=Tensor[(128, 1, 1, 832), float16] */, %p284: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p374: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 128), float16] {
    %510 = nn.conv2d(%p0125, %p1151, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %511 = multiply(%510, %p284) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %512 = add(%511, %p374) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    nn.relu(%512) /* ty=Tensor[(32, 14, 14, 128), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 832), float16], Tensor[(128, 1, 1, 832), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 14, 14, 128), float16] */;
  %521 = %520(%519, meta[relay.Constant][227] /* ty=Tensor[(128, 1, 1, 832), float16] */, meta[relay.Constant][228] /* ty=Tensor[(128), float16] */, meta[relay.Constant][229] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 14, 14, 128), float16] */;
  %522 = fn (%p0124: Tensor[(32, 14, 14, 128), float16] /* ty=Tensor[(32, 14, 14, 128), float16] */, %p1150: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 32), float16] {
    nn.conv2d(%p0124, %p1150, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 32), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 14, 14, 32), float16] */;
  %530 = %522(%521, meta[relay.Constant][230] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 14, 14, 32), float16] */;
  %531 = fn (%p0129: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p1156: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p287: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p377: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p435: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p532: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p629: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p726: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p823: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p920: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1018: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1157: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1221: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1319: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1417: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1516: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1615: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1714: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1813: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1912: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p202: Tensor[(864), float16] /* ty=Tensor[(864), float16] */, %p2110: Tensor[(864), float16] /* ty=Tensor[(864), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 864), float16] {
    %526 = (%p0129, %p1156, %p287, %p377, %p435, %p532, %p629, %p726, %p823, %p920, %p1018, %p1157, %p1221, %p1319, %p1417, %p1516, %p1615, %p1714, %p1813, %p1912) /* ty=(Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16]) span=aten::cat_39:0:0 */;
    %527 = concatenate(%526, axis=3) /* ty=Tensor[(32, 14, 14, 864), float16] */;
    %528 = multiply(%527, %p202) /* ty=Tensor[(32, 14, 14, 864), float16] */;
    %529 = add(%528, %p2110) /* ty=Tensor[(32, 14, 14, 864), float16] */;
    nn.relu(%529) /* ty=Tensor[(32, 14, 14, 864), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(864), float16], Tensor[(864), float16]) -> Tensor[(32, 14, 14, 864), float16] */;
  %532 = %531(%283, %296, %309, %322, %335, %348, %361, %374, %387, %400, %413, %426, %439, %452, %465, %478, %491, %504, %517, %530, meta[relay.Constant][231] /* ty=Tensor[(864), float16] */, meta[relay.Constant][232] /* ty=Tensor[(864), float16] */) /* ty=Tensor[(32, 14, 14, 864), float16] */;
  %533 = fn (%p0128: Tensor[(32, 14, 14, 864), float16] /* ty=Tensor[(32, 14, 14, 864), float16] */, %p1155: Tensor[(128, 1, 1, 864), float16] /* ty=Tensor[(128, 1, 1, 864), float16] */, %p286: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p376: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 128), float16] {
    %523 = nn.conv2d(%p0128, %p1155, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %524 = multiply(%523, %p286) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %525 = add(%524, %p376) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    nn.relu(%525) /* ty=Tensor[(32, 14, 14, 128), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 864), float16], Tensor[(128, 1, 1, 864), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 14, 14, 128), float16] */;
  %534 = %533(%532, meta[relay.Constant][233] /* ty=Tensor[(128, 1, 1, 864), float16] */, meta[relay.Constant][234] /* ty=Tensor[(128), float16] */, meta[relay.Constant][235] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 14, 14, 128), float16] */;
  %535 = fn (%p0127: Tensor[(32, 14, 14, 128), float16] /* ty=Tensor[(32, 14, 14, 128), float16] */, %p1154: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 32), float16] {
    nn.conv2d(%p0127, %p1154, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 32), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 14, 14, 32), float16] */;
  %543 = %535(%534, meta[relay.Constant][236] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 14, 14, 32), float16] */;
  %544 = fn (%p0132: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p1160: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p289: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p379: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p436: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p533: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p630: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p727: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p824: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p921: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1019: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1161: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1222: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1320: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1418: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1517: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1616: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1715: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1814: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1913: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p203: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p2111: Tensor[(896), float16] /* ty=Tensor[(896), float16] */, %p2210: Tensor[(896), float16] /* ty=Tensor[(896), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 896), float16] {
    %539 = (%p0132, %p1160, %p289, %p379, %p436, %p533, %p630, %p727, %p824, %p921, %p1019, %p1161, %p1222, %p1320, %p1418, %p1517, %p1616, %p1715, %p1814, %p1913, %p203) /* ty=(Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16]) span=aten::cat_40:0:0 */;
    %540 = concatenate(%539, axis=3) /* ty=Tensor[(32, 14, 14, 896), float16] */;
    %541 = multiply(%540, %p2111) /* ty=Tensor[(32, 14, 14, 896), float16] */;
    %542 = add(%541, %p2210) /* ty=Tensor[(32, 14, 14, 896), float16] */;
    nn.relu(%542) /* ty=Tensor[(32, 14, 14, 896), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(896), float16], Tensor[(896), float16]) -> Tensor[(32, 14, 14, 896), float16] */;
  %545 = %544(%283, %296, %309, %322, %335, %348, %361, %374, %387, %400, %413, %426, %439, %452, %465, %478, %491, %504, %517, %530, %543, meta[relay.Constant][237] /* ty=Tensor[(896), float16] */, meta[relay.Constant][238] /* ty=Tensor[(896), float16] */) /* ty=Tensor[(32, 14, 14, 896), float16] */;
  %546 = fn (%p0131: Tensor[(32, 14, 14, 896), float16] /* ty=Tensor[(32, 14, 14, 896), float16] */, %p1159: Tensor[(128, 1, 1, 896), float16] /* ty=Tensor[(128, 1, 1, 896), float16] */, %p288: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p378: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 128), float16] {
    %536 = nn.conv2d(%p0131, %p1159, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %537 = multiply(%536, %p288) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %538 = add(%537, %p378) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    nn.relu(%538) /* ty=Tensor[(32, 14, 14, 128), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 896), float16], Tensor[(128, 1, 1, 896), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 14, 14, 128), float16] */;
  %547 = %546(%545, meta[relay.Constant][239] /* ty=Tensor[(128, 1, 1, 896), float16] */, meta[relay.Constant][240] /* ty=Tensor[(128), float16] */, meta[relay.Constant][241] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 14, 14, 128), float16] */;
  %548 = fn (%p0130: Tensor[(32, 14, 14, 128), float16] /* ty=Tensor[(32, 14, 14, 128), float16] */, %p1158: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 32), float16] {
    nn.conv2d(%p0130, %p1158, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 32), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 14, 14, 32), float16] */;
  %556 = %548(%547, meta[relay.Constant][242] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 14, 14, 32), float16] */;
  %557 = fn (%p0135: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p1164: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p291: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p381: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p437: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p534: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p631: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p728: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p825: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p922: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1020: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1165: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1223: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1321: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1419: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1518: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1617: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1716: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1815: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1914: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p204: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p2112: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p2211: Tensor[(928), float16] /* ty=Tensor[(928), float16] */, %p2310: Tensor[(928), float16] /* ty=Tensor[(928), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 928), float16] {
    %552 = (%p0135, %p1164, %p291, %p381, %p437, %p534, %p631, %p728, %p825, %p922, %p1020, %p1165, %p1223, %p1321, %p1419, %p1518, %p1617, %p1716, %p1815, %p1914, %p204, %p2112) /* ty=(Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16]) span=aten::cat_41:0:0 */;
    %553 = concatenate(%552, axis=3) /* ty=Tensor[(32, 14, 14, 928), float16] */;
    %554 = multiply(%553, %p2211) /* ty=Tensor[(32, 14, 14, 928), float16] */;
    %555 = add(%554, %p2310) /* ty=Tensor[(32, 14, 14, 928), float16] */;
    nn.relu(%555) /* ty=Tensor[(32, 14, 14, 928), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(928), float16], Tensor[(928), float16]) -> Tensor[(32, 14, 14, 928), float16] */;
  %558 = %557(%283, %296, %309, %322, %335, %348, %361, %374, %387, %400, %413, %426, %439, %452, %465, %478, %491, %504, %517, %530, %543, %556, meta[relay.Constant][243] /* ty=Tensor[(928), float16] */, meta[relay.Constant][244] /* ty=Tensor[(928), float16] */) /* ty=Tensor[(32, 14, 14, 928), float16] */;
  %559 = fn (%p0134: Tensor[(32, 14, 14, 928), float16] /* ty=Tensor[(32, 14, 14, 928), float16] */, %p1163: Tensor[(128, 1, 1, 928), float16] /* ty=Tensor[(128, 1, 1, 928), float16] */, %p290: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p380: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 128), float16] {
    %549 = nn.conv2d(%p0134, %p1163, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %550 = multiply(%549, %p290) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %551 = add(%550, %p380) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    nn.relu(%551) /* ty=Tensor[(32, 14, 14, 128), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 928), float16], Tensor[(128, 1, 1, 928), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 14, 14, 128), float16] */;
  %560 = %559(%558, meta[relay.Constant][245] /* ty=Tensor[(128, 1, 1, 928), float16] */, meta[relay.Constant][246] /* ty=Tensor[(128), float16] */, meta[relay.Constant][247] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 14, 14, 128), float16] */;
  %561 = fn (%p0133: Tensor[(32, 14, 14, 128), float16] /* ty=Tensor[(32, 14, 14, 128), float16] */, %p1162: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 32), float16] {
    nn.conv2d(%p0133, %p1162, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 32), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 14, 14, 32), float16] */;
  %569 = %561(%560, meta[relay.Constant][248] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 14, 14, 32), float16] */;
  %570 = fn (%p0138: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p1168: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p293: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p383: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p438: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p535: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p632: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p729: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p826: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p923: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1021: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1169: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1224: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1322: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1420: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1519: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1618: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1717: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1816: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1915: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p205: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p2113: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p2212: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p2311: Tensor[(960), float16] /* ty=Tensor[(960), float16] */, %p2410: Tensor[(960), float16] /* ty=Tensor[(960), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 960), float16] {
    %565 = (%p0138, %p1168, %p293, %p383, %p438, %p535, %p632, %p729, %p826, %p923, %p1021, %p1169, %p1224, %p1322, %p1420, %p1519, %p1618, %p1717, %p1816, %p1915, %p205, %p2113, %p2212) /* ty=(Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16]) span=aten::cat_42:0:0 */;
    %566 = concatenate(%565, axis=3) /* ty=Tensor[(32, 14, 14, 960), float16] */;
    %567 = multiply(%566, %p2311) /* ty=Tensor[(32, 14, 14, 960), float16] */;
    %568 = add(%567, %p2410) /* ty=Tensor[(32, 14, 14, 960), float16] */;
    nn.relu(%568) /* ty=Tensor[(32, 14, 14, 960), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(960), float16], Tensor[(960), float16]) -> Tensor[(32, 14, 14, 960), float16] */;
  %571 = %570(%283, %296, %309, %322, %335, %348, %361, %374, %387, %400, %413, %426, %439, %452, %465, %478, %491, %504, %517, %530, %543, %556, %569, meta[relay.Constant][249] /* ty=Tensor[(960), float16] */, meta[relay.Constant][250] /* ty=Tensor[(960), float16] */) /* ty=Tensor[(32, 14, 14, 960), float16] */;
  %572 = fn (%p0137: Tensor[(32, 14, 14, 960), float16] /* ty=Tensor[(32, 14, 14, 960), float16] */, %p1167: Tensor[(128, 1, 1, 960), float16] /* ty=Tensor[(128, 1, 1, 960), float16] */, %p292: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p382: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 128), float16] {
    %562 = nn.conv2d(%p0137, %p1167, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %563 = multiply(%562, %p292) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %564 = add(%563, %p382) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    nn.relu(%564) /* ty=Tensor[(32, 14, 14, 128), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 960), float16], Tensor[(128, 1, 1, 960), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 14, 14, 128), float16] */;
  %573 = %572(%571, meta[relay.Constant][251] /* ty=Tensor[(128, 1, 1, 960), float16] */, meta[relay.Constant][252] /* ty=Tensor[(128), float16] */, meta[relay.Constant][253] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 14, 14, 128), float16] */;
  %574 = fn (%p0136: Tensor[(32, 14, 14, 128), float16] /* ty=Tensor[(32, 14, 14, 128), float16] */, %p1166: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 32), float16] {
    nn.conv2d(%p0136, %p1166, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 32), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 14, 14, 32), float16] */;
  %582 = %574(%573, meta[relay.Constant][254] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 14, 14, 32), float16] */;
  %583 = fn (%p0141: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p1172: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p295: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p385: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p439: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p536: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p633: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p730: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p827: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p924: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1022: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1173: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1225: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1323: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1421: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1520: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1619: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1718: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1817: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p1916: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p206: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p2114: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p2213: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p2312: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p2411: Tensor[(992), float16] /* ty=Tensor[(992), float16] */, %p2510: Tensor[(992), float16] /* ty=Tensor[(992), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 992), float16] {
    %578 = (%p0141, %p1172, %p295, %p385, %p439, %p536, %p633, %p730, %p827, %p924, %p1022, %p1173, %p1225, %p1323, %p1421, %p1520, %p1619, %p1718, %p1817, %p1916, %p206, %p2114, %p2213, %p2312) /* ty=(Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16]) span=aten::cat_43:0:0 */;
    %579 = concatenate(%578, axis=3) /* ty=Tensor[(32, 14, 14, 992), float16] */;
    %580 = multiply(%579, %p2411) /* ty=Tensor[(32, 14, 14, 992), float16] */;
    %581 = add(%580, %p2510) /* ty=Tensor[(32, 14, 14, 992), float16] */;
    nn.relu(%581) /* ty=Tensor[(32, 14, 14, 992), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(992), float16], Tensor[(992), float16]) -> Tensor[(32, 14, 14, 992), float16] */;
  %584 = %583(%283, %296, %309, %322, %335, %348, %361, %374, %387, %400, %413, %426, %439, %452, %465, %478, %491, %504, %517, %530, %543, %556, %569, %582, meta[relay.Constant][255] /* ty=Tensor[(992), float16] */, meta[relay.Constant][256] /* ty=Tensor[(992), float16] */) /* ty=Tensor[(32, 14, 14, 992), float16] */;
  %585 = fn (%p0140: Tensor[(32, 14, 14, 992), float16] /* ty=Tensor[(32, 14, 14, 992), float16] */, %p1171: Tensor[(128, 1, 1, 992), float16] /* ty=Tensor[(128, 1, 1, 992), float16] */, %p294: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p384: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 128), float16] {
    %575 = nn.conv2d(%p0140, %p1171, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %576 = multiply(%575, %p294) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    %577 = add(%576, %p384) /* ty=Tensor[(32, 14, 14, 128), float16] */;
    nn.relu(%577) /* ty=Tensor[(32, 14, 14, 128), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 992), float16], Tensor[(128, 1, 1, 992), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 14, 14, 128), float16] */;
  %586 = %585(%584, meta[relay.Constant][257] /* ty=Tensor[(128, 1, 1, 992), float16] */, meta[relay.Constant][258] /* ty=Tensor[(128), float16] */, meta[relay.Constant][259] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 14, 14, 128), float16] */;
  %587 = fn (%p0139: Tensor[(32, 14, 14, 128), float16] /* ty=Tensor[(32, 14, 14, 128), float16] */, %p1170: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 32), float16] {
    nn.conv2d(%p0139, %p1170, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 32), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 14, 14, 32), float16] */;
  %588 = %587(%586, meta[relay.Constant][260] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 14, 14, 32), float16] */;
  %589 = fn (%p06: Tensor[(32, 14, 14, 256), float16] /* ty=Tensor[(32, 14, 14, 256), float16] */, %p110: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p22: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p31: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p41: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p51: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p61: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p71: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p81: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p91: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p101: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p112: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p121: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p131: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p141: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p151: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p161: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p171: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p181: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p191: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p20: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p211: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p221: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p23: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p24: Tensor[(32, 14, 14, 32), float16] /* ty=Tensor[(32, 14, 14, 32), float16] */, %p25: Tensor[(1024), float16] /* ty=Tensor[(1024), float16] */, %p26: Tensor[(1024), float16] /* ty=Tensor[(1024), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 1024), float16] {
    %9 = (%p06, %p110, %p22, %p31, %p41, %p51, %p61, %p71, %p81, %p91, %p101, %p112, %p121, %p131, %p141, %p151, %p161, %p171, %p181, %p191, %p20, %p211, %p221, %p23, %p24) /* ty=(Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16]) span=aten::cat_44:0:0 */;
    %10 = concatenate(%9, axis=3) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    %11 = multiply(%10, %p25) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    %12 = add(%11, %p26) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
    nn.relu(%12) /* ty=Tensor[(32, 14, 14, 1024), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 256), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(32, 14, 14, 32), float16], Tensor[(1024), float16], Tensor[(1024), float16]) -> Tensor[(32, 14, 14, 1024), float16] */;
  %590 = %589(%283, %296, %309, %322, %335, %348, %361, %374, %387, %400, %413, %426, %439, %452, %465, %478, %491, %504, %517, %530, %543, %556, %569, %582, %588, meta[relay.Constant][261] /* ty=Tensor[(1024), float16] */, meta[relay.Constant][262] /* ty=Tensor[(1024), float16] */) /* ty=Tensor[(32, 14, 14, 1024), float16] */;
  %591 = fn (%p05: Tensor[(32, 14, 14, 1024), float16] /* ty=Tensor[(32, 14, 14, 1024), float16] */, %p19: Tensor[(512, 1, 1, 1024), float16] /* ty=Tensor[(512, 1, 1, 1024), float16] */, Primitive=1) -> Tensor[(32, 14, 14, 512), float16] {
    nn.conv2d(%p05, %p19, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 14, 14, 512), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 1024), float16], Tensor[(512, 1, 1, 1024), float16]) -> Tensor[(32, 14, 14, 512), float16] */;
  %592 = %591(%590, meta[relay.Constant][263] /* ty=Tensor[(512, 1, 1, 1024), float16] */) /* ty=Tensor[(32, 14, 14, 512), float16] */;
  %593 = fn (%p04: Tensor[(32, 14, 14, 512), float16] /* ty=Tensor[(32, 14, 14, 512), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 512), float16] {
    nn.avg_pool2d(%p04, pool_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0], layout="NHWC", out_layout="NHWC", count_include_pad=True) /* ty=Tensor[(32, 7, 7, 512), float16] */
  } /* ty=fn (Tensor[(32, 14, 14, 512), float16]) -> Tensor[(32, 7, 7, 512), float16] */;
  %601 = %593(%592) /* ty=Tensor[(32, 7, 7, 512), float16] */;
  %602 = fn (%p0144: Tensor[(32, 7, 7, 512), float16] /* ty=Tensor[(32, 7, 7, 512), float16] */, %p1176: Tensor[(512), float16] /* ty=Tensor[(512), float16] */, %p297: Tensor[(512), float16] /* ty=Tensor[(512), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 512), float16] {
    %597 = (%p0144,) /* ty=(Tensor[(32, 7, 7, 512), float16],) span=aten::cat_45:0:0 */;
    %598 = concatenate(%597, axis=3) /* ty=Tensor[(32, 7, 7, 512), float16] */;
    %599 = multiply(%598, %p1176) /* ty=Tensor[(32, 7, 7, 512), float16] */;
    %600 = add(%599, %p297) /* ty=Tensor[(32, 7, 7, 512), float16] */;
    nn.relu(%600) /* ty=Tensor[(32, 7, 7, 512), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 512), float16], Tensor[(512), float16], Tensor[(512), float16]) -> Tensor[(32, 7, 7, 512), float16] */;
  %603 = %602(%601, meta[relay.Constant][264] /* ty=Tensor[(512), float16] */, meta[relay.Constant][265] /* ty=Tensor[(512), float16] */) /* ty=Tensor[(32, 7, 7, 512), float16] */;
  %604 = fn (%p0143: Tensor[(32, 7, 7, 512), float16] /* ty=Tensor[(32, 7, 7, 512), float16] */, %p1175: Tensor[(128, 1, 1, 512), float16] /* ty=Tensor[(128, 1, 1, 512), float16] */, %p296: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p386: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 128), float16] {
    %594 = nn.conv2d(%p0143, %p1175, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 128), float16] */;
    %595 = multiply(%594, %p296) /* ty=Tensor[(32, 7, 7, 128), float16] */;
    %596 = add(%595, %p386) /* ty=Tensor[(32, 7, 7, 128), float16] */;
    nn.relu(%596) /* ty=Tensor[(32, 7, 7, 128), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 512), float16], Tensor[(128, 1, 1, 512), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 7, 7, 128), float16] */;
  %605 = %604(%603, meta[relay.Constant][266] /* ty=Tensor[(128, 1, 1, 512), float16] */, meta[relay.Constant][267] /* ty=Tensor[(128), float16] */, meta[relay.Constant][268] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 7, 7, 128), float16] */;
  %606 = fn (%p0142: Tensor[(32, 7, 7, 128), float16] /* ty=Tensor[(32, 7, 7, 128), float16] */, %p1174: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 32), float16] {
    nn.conv2d(%p0142, %p1174, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 32), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 7, 7, 32), float16] */;
  %614 = %606(%605, meta[relay.Constant][269] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 7, 7, 32), float16] */;
  %615 = fn (%p0147: Tensor[(32, 7, 7, 512), float16] /* ty=Tensor[(32, 7, 7, 512), float16] */, %p1179: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p299: Tensor[(544), float16] /* ty=Tensor[(544), float16] */, %p388: Tensor[(544), float16] /* ty=Tensor[(544), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 544), float16] {
    %610 = (%p0147, %p1179) /* ty=(Tensor[(32, 7, 7, 512), float16], Tensor[(32, 7, 7, 32), float16]) span=aten::cat_46:0:0 */;
    %611 = concatenate(%610, axis=3) /* ty=Tensor[(32, 7, 7, 544), float16] */;
    %612 = multiply(%611, %p299) /* ty=Tensor[(32, 7, 7, 544), float16] */;
    %613 = add(%612, %p388) /* ty=Tensor[(32, 7, 7, 544), float16] */;
    nn.relu(%613) /* ty=Tensor[(32, 7, 7, 544), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 512), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(544), float16], Tensor[(544), float16]) -> Tensor[(32, 7, 7, 544), float16] */;
  %616 = %615(%601, %614, meta[relay.Constant][270] /* ty=Tensor[(544), float16] */, meta[relay.Constant][271] /* ty=Tensor[(544), float16] */) /* ty=Tensor[(32, 7, 7, 544), float16] */;
  %617 = fn (%p0146: Tensor[(32, 7, 7, 544), float16] /* ty=Tensor[(32, 7, 7, 544), float16] */, %p1178: Tensor[(128, 1, 1, 544), float16] /* ty=Tensor[(128, 1, 1, 544), float16] */, %p298: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p387: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 128), float16] {
    %607 = nn.conv2d(%p0146, %p1178, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 128), float16] */;
    %608 = multiply(%607, %p298) /* ty=Tensor[(32, 7, 7, 128), float16] */;
    %609 = add(%608, %p387) /* ty=Tensor[(32, 7, 7, 128), float16] */;
    nn.relu(%609) /* ty=Tensor[(32, 7, 7, 128), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 544), float16], Tensor[(128, 1, 1, 544), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 7, 7, 128), float16] */;
  %618 = %617(%616, meta[relay.Constant][272] /* ty=Tensor[(128, 1, 1, 544), float16] */, meta[relay.Constant][273] /* ty=Tensor[(128), float16] */, meta[relay.Constant][274] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 7, 7, 128), float16] */;
  %619 = fn (%p0145: Tensor[(32, 7, 7, 128), float16] /* ty=Tensor[(32, 7, 7, 128), float16] */, %p1177: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 32), float16] {
    nn.conv2d(%p0145, %p1177, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 32), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 7, 7, 32), float16] */;
  %627 = %619(%618, meta[relay.Constant][275] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 7, 7, 32), float16] */;
  %628 = fn (%p0150: Tensor[(32, 7, 7, 512), float16] /* ty=Tensor[(32, 7, 7, 512), float16] */, %p1182: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p2101: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p390: Tensor[(576), float16] /* ty=Tensor[(576), float16] */, %p440: Tensor[(576), float16] /* ty=Tensor[(576), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 576), float16] {
    %623 = (%p0150, %p1182, %p2101) /* ty=(Tensor[(32, 7, 7, 512), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16]) span=aten::cat_47:0:0 */;
    %624 = concatenate(%623, axis=3) /* ty=Tensor[(32, 7, 7, 576), float16] */;
    %625 = multiply(%624, %p390) /* ty=Tensor[(32, 7, 7, 576), float16] */;
    %626 = add(%625, %p440) /* ty=Tensor[(32, 7, 7, 576), float16] */;
    nn.relu(%626) /* ty=Tensor[(32, 7, 7, 576), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 512), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(576), float16], Tensor[(576), float16]) -> Tensor[(32, 7, 7, 576), float16] */;
  %629 = %628(%601, %614, %627, meta[relay.Constant][276] /* ty=Tensor[(576), float16] */, meta[relay.Constant][277] /* ty=Tensor[(576), float16] */) /* ty=Tensor[(32, 7, 7, 576), float16] */;
  %630 = fn (%p0149: Tensor[(32, 7, 7, 576), float16] /* ty=Tensor[(32, 7, 7, 576), float16] */, %p1181: Tensor[(128, 1, 1, 576), float16] /* ty=Tensor[(128, 1, 1, 576), float16] */, %p2100: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p389: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 128), float16] {
    %620 = nn.conv2d(%p0149, %p1181, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 128), float16] */;
    %621 = multiply(%620, %p2100) /* ty=Tensor[(32, 7, 7, 128), float16] */;
    %622 = add(%621, %p389) /* ty=Tensor[(32, 7, 7, 128), float16] */;
    nn.relu(%622) /* ty=Tensor[(32, 7, 7, 128), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 576), float16], Tensor[(128, 1, 1, 576), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 7, 7, 128), float16] */;
  %631 = %630(%629, meta[relay.Constant][278] /* ty=Tensor[(128, 1, 1, 576), float16] */, meta[relay.Constant][279] /* ty=Tensor[(128), float16] */, meta[relay.Constant][280] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 7, 7, 128), float16] */;
  %632 = fn (%p0148: Tensor[(32, 7, 7, 128), float16] /* ty=Tensor[(32, 7, 7, 128), float16] */, %p1180: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 32), float16] {
    nn.conv2d(%p0148, %p1180, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 32), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 7, 7, 32), float16] */;
  %640 = %632(%631, meta[relay.Constant][281] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 7, 7, 32), float16] */;
  %641 = fn (%p0153: Tensor[(32, 7, 7, 512), float16] /* ty=Tensor[(32, 7, 7, 512), float16] */, %p1185: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p2103: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p392: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p441: Tensor[(608), float16] /* ty=Tensor[(608), float16] */, %p537: Tensor[(608), float16] /* ty=Tensor[(608), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 608), float16] {
    %636 = (%p0153, %p1185, %p2103, %p392) /* ty=(Tensor[(32, 7, 7, 512), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16]) span=aten::cat_48:0:0 */;
    %637 = concatenate(%636, axis=3) /* ty=Tensor[(32, 7, 7, 608), float16] */;
    %638 = multiply(%637, %p441) /* ty=Tensor[(32, 7, 7, 608), float16] */;
    %639 = add(%638, %p537) /* ty=Tensor[(32, 7, 7, 608), float16] */;
    nn.relu(%639) /* ty=Tensor[(32, 7, 7, 608), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 512), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(608), float16], Tensor[(608), float16]) -> Tensor[(32, 7, 7, 608), float16] */;
  %642 = %641(%601, %614, %627, %640, meta[relay.Constant][282] /* ty=Tensor[(608), float16] */, meta[relay.Constant][283] /* ty=Tensor[(608), float16] */) /* ty=Tensor[(32, 7, 7, 608), float16] */;
  %643 = fn (%p0152: Tensor[(32, 7, 7, 608), float16] /* ty=Tensor[(32, 7, 7, 608), float16] */, %p1184: Tensor[(128, 1, 1, 608), float16] /* ty=Tensor[(128, 1, 1, 608), float16] */, %p2102: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p391: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 128), float16] {
    %633 = nn.conv2d(%p0152, %p1184, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 128), float16] */;
    %634 = multiply(%633, %p2102) /* ty=Tensor[(32, 7, 7, 128), float16] */;
    %635 = add(%634, %p391) /* ty=Tensor[(32, 7, 7, 128), float16] */;
    nn.relu(%635) /* ty=Tensor[(32, 7, 7, 128), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 608), float16], Tensor[(128, 1, 1, 608), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 7, 7, 128), float16] */;
  %644 = %643(%642, meta[relay.Constant][284] /* ty=Tensor[(128, 1, 1, 608), float16] */, meta[relay.Constant][285] /* ty=Tensor[(128), float16] */, meta[relay.Constant][286] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 7, 7, 128), float16] */;
  %645 = fn (%p0151: Tensor[(32, 7, 7, 128), float16] /* ty=Tensor[(32, 7, 7, 128), float16] */, %p1183: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 32), float16] {
    nn.conv2d(%p0151, %p1183, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 32), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 7, 7, 32), float16] */;
  %653 = %645(%644, meta[relay.Constant][287] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 7, 7, 32), float16] */;
  %654 = fn (%p0156: Tensor[(32, 7, 7, 512), float16] /* ty=Tensor[(32, 7, 7, 512), float16] */, %p1188: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p2105: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p394: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p442: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p538: Tensor[(640), float16] /* ty=Tensor[(640), float16] */, %p634: Tensor[(640), float16] /* ty=Tensor[(640), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 640), float16] {
    %649 = (%p0156, %p1188, %p2105, %p394, %p442) /* ty=(Tensor[(32, 7, 7, 512), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16]) span=aten::cat_49:0:0 */;
    %650 = concatenate(%649, axis=3) /* ty=Tensor[(32, 7, 7, 640), float16] */;
    %651 = multiply(%650, %p538) /* ty=Tensor[(32, 7, 7, 640), float16] */;
    %652 = add(%651, %p634) /* ty=Tensor[(32, 7, 7, 640), float16] */;
    nn.relu(%652) /* ty=Tensor[(32, 7, 7, 640), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 512), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(640), float16], Tensor[(640), float16]) -> Tensor[(32, 7, 7, 640), float16] */;
  %655 = %654(%601, %614, %627, %640, %653, meta[relay.Constant][288] /* ty=Tensor[(640), float16] */, meta[relay.Constant][289] /* ty=Tensor[(640), float16] */) /* ty=Tensor[(32, 7, 7, 640), float16] */;
  %656 = fn (%p0155: Tensor[(32, 7, 7, 640), float16] /* ty=Tensor[(32, 7, 7, 640), float16] */, %p1187: Tensor[(128, 1, 1, 640), float16] /* ty=Tensor[(128, 1, 1, 640), float16] */, %p2104: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p393: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 128), float16] {
    %646 = nn.conv2d(%p0155, %p1187, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 128), float16] */;
    %647 = multiply(%646, %p2104) /* ty=Tensor[(32, 7, 7, 128), float16] */;
    %648 = add(%647, %p393) /* ty=Tensor[(32, 7, 7, 128), float16] */;
    nn.relu(%648) /* ty=Tensor[(32, 7, 7, 128), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 640), float16], Tensor[(128, 1, 1, 640), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 7, 7, 128), float16] */;
  %657 = %656(%655, meta[relay.Constant][290] /* ty=Tensor[(128, 1, 1, 640), float16] */, meta[relay.Constant][291] /* ty=Tensor[(128), float16] */, meta[relay.Constant][292] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 7, 7, 128), float16] */;
  %658 = fn (%p0154: Tensor[(32, 7, 7, 128), float16] /* ty=Tensor[(32, 7, 7, 128), float16] */, %p1186: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 32), float16] {
    nn.conv2d(%p0154, %p1186, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 32), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 7, 7, 32), float16] */;
  %666 = %658(%657, meta[relay.Constant][293] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 7, 7, 32), float16] */;
  %667 = fn (%p0159: Tensor[(32, 7, 7, 512), float16] /* ty=Tensor[(32, 7, 7, 512), float16] */, %p1191: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p2107: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p396: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p443: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p539: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p635: Tensor[(672), float16] /* ty=Tensor[(672), float16] */, %p731: Tensor[(672), float16] /* ty=Tensor[(672), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 672), float16] {
    %662 = (%p0159, %p1191, %p2107, %p396, %p443, %p539) /* ty=(Tensor[(32, 7, 7, 512), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16]) span=aten::cat_50:0:0 */;
    %663 = concatenate(%662, axis=3) /* ty=Tensor[(32, 7, 7, 672), float16] */;
    %664 = multiply(%663, %p635) /* ty=Tensor[(32, 7, 7, 672), float16] */;
    %665 = add(%664, %p731) /* ty=Tensor[(32, 7, 7, 672), float16] */;
    nn.relu(%665) /* ty=Tensor[(32, 7, 7, 672), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 512), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(672), float16], Tensor[(672), float16]) -> Tensor[(32, 7, 7, 672), float16] */;
  %668 = %667(%601, %614, %627, %640, %653, %666, meta[relay.Constant][294] /* ty=Tensor[(672), float16] */, meta[relay.Constant][295] /* ty=Tensor[(672), float16] */) /* ty=Tensor[(32, 7, 7, 672), float16] */;
  %669 = fn (%p0158: Tensor[(32, 7, 7, 672), float16] /* ty=Tensor[(32, 7, 7, 672), float16] */, %p1190: Tensor[(128, 1, 1, 672), float16] /* ty=Tensor[(128, 1, 1, 672), float16] */, %p2106: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p395: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 128), float16] {
    %659 = nn.conv2d(%p0158, %p1190, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 128), float16] */;
    %660 = multiply(%659, %p2106) /* ty=Tensor[(32, 7, 7, 128), float16] */;
    %661 = add(%660, %p395) /* ty=Tensor[(32, 7, 7, 128), float16] */;
    nn.relu(%661) /* ty=Tensor[(32, 7, 7, 128), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 672), float16], Tensor[(128, 1, 1, 672), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 7, 7, 128), float16] */;
  %670 = %669(%668, meta[relay.Constant][296] /* ty=Tensor[(128, 1, 1, 672), float16] */, meta[relay.Constant][297] /* ty=Tensor[(128), float16] */, meta[relay.Constant][298] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 7, 7, 128), float16] */;
  %671 = fn (%p0157: Tensor[(32, 7, 7, 128), float16] /* ty=Tensor[(32, 7, 7, 128), float16] */, %p1189: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 32), float16] {
    nn.conv2d(%p0157, %p1189, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 32), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 7, 7, 32), float16] */;
  %679 = %671(%670, meta[relay.Constant][299] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 7, 7, 32), float16] */;
  %680 = fn (%p0162: Tensor[(32, 7, 7, 512), float16] /* ty=Tensor[(32, 7, 7, 512), float16] */, %p1194: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p2109: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p398: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p444: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p540: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p636: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p732: Tensor[(704), float16] /* ty=Tensor[(704), float16] */, %p828: Tensor[(704), float16] /* ty=Tensor[(704), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 704), float16] {
    %675 = (%p0162, %p1194, %p2109, %p398, %p444, %p540, %p636) /* ty=(Tensor[(32, 7, 7, 512), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16]) span=aten::cat_51:0:0 */;
    %676 = concatenate(%675, axis=3) /* ty=Tensor[(32, 7, 7, 704), float16] */;
    %677 = multiply(%676, %p732) /* ty=Tensor[(32, 7, 7, 704), float16] */;
    %678 = add(%677, %p828) /* ty=Tensor[(32, 7, 7, 704), float16] */;
    nn.relu(%678) /* ty=Tensor[(32, 7, 7, 704), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 512), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(704), float16], Tensor[(704), float16]) -> Tensor[(32, 7, 7, 704), float16] */;
  %681 = %680(%601, %614, %627, %640, %653, %666, %679, meta[relay.Constant][300] /* ty=Tensor[(704), float16] */, meta[relay.Constant][301] /* ty=Tensor[(704), float16] */) /* ty=Tensor[(32, 7, 7, 704), float16] */;
  %682 = fn (%p0161: Tensor[(32, 7, 7, 704), float16] /* ty=Tensor[(32, 7, 7, 704), float16] */, %p1193: Tensor[(128, 1, 1, 704), float16] /* ty=Tensor[(128, 1, 1, 704), float16] */, %p2108: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p397: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 128), float16] {
    %672 = nn.conv2d(%p0161, %p1193, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 128), float16] */;
    %673 = multiply(%672, %p2108) /* ty=Tensor[(32, 7, 7, 128), float16] */;
    %674 = add(%673, %p397) /* ty=Tensor[(32, 7, 7, 128), float16] */;
    nn.relu(%674) /* ty=Tensor[(32, 7, 7, 128), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 704), float16], Tensor[(128, 1, 1, 704), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 7, 7, 128), float16] */;
  %683 = %682(%681, meta[relay.Constant][302] /* ty=Tensor[(128, 1, 1, 704), float16] */, meta[relay.Constant][303] /* ty=Tensor[(128), float16] */, meta[relay.Constant][304] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 7, 7, 128), float16] */;
  %684 = fn (%p0160: Tensor[(32, 7, 7, 128), float16] /* ty=Tensor[(32, 7, 7, 128), float16] */, %p1192: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 32), float16] {
    nn.conv2d(%p0160, %p1192, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 32), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 7, 7, 32), float16] */;
  %692 = %684(%683, meta[relay.Constant][305] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 7, 7, 32), float16] */;
  %693 = fn (%p0165: Tensor[(32, 7, 7, 512), float16] /* ty=Tensor[(32, 7, 7, 512), float16] */, %p1197: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p2116: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p3100: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p445: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p541: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p637: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p733: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p829: Tensor[(736), float16] /* ty=Tensor[(736), float16] */, %p925: Tensor[(736), float16] /* ty=Tensor[(736), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 736), float16] {
    %688 = (%p0165, %p1197, %p2116, %p3100, %p445, %p541, %p637, %p733) /* ty=(Tensor[(32, 7, 7, 512), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16]) span=aten::cat_52:0:0 */;
    %689 = concatenate(%688, axis=3) /* ty=Tensor[(32, 7, 7, 736), float16] */;
    %690 = multiply(%689, %p829) /* ty=Tensor[(32, 7, 7, 736), float16] */;
    %691 = add(%690, %p925) /* ty=Tensor[(32, 7, 7, 736), float16] */;
    nn.relu(%691) /* ty=Tensor[(32, 7, 7, 736), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 512), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(736), float16], Tensor[(736), float16]) -> Tensor[(32, 7, 7, 736), float16] */;
  %694 = %693(%601, %614, %627, %640, %653, %666, %679, %692, meta[relay.Constant][306] /* ty=Tensor[(736), float16] */, meta[relay.Constant][307] /* ty=Tensor[(736), float16] */) /* ty=Tensor[(32, 7, 7, 736), float16] */;
  %695 = fn (%p0164: Tensor[(32, 7, 7, 736), float16] /* ty=Tensor[(32, 7, 7, 736), float16] */, %p1196: Tensor[(128, 1, 1, 736), float16] /* ty=Tensor[(128, 1, 1, 736), float16] */, %p2115: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p399: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 128), float16] {
    %685 = nn.conv2d(%p0164, %p1196, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 128), float16] */;
    %686 = multiply(%685, %p2115) /* ty=Tensor[(32, 7, 7, 128), float16] */;
    %687 = add(%686, %p399) /* ty=Tensor[(32, 7, 7, 128), float16] */;
    nn.relu(%687) /* ty=Tensor[(32, 7, 7, 128), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 736), float16], Tensor[(128, 1, 1, 736), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 7, 7, 128), float16] */;
  %696 = %695(%694, meta[relay.Constant][308] /* ty=Tensor[(128, 1, 1, 736), float16] */, meta[relay.Constant][309] /* ty=Tensor[(128), float16] */, meta[relay.Constant][310] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 7, 7, 128), float16] */;
  %697 = fn (%p0163: Tensor[(32, 7, 7, 128), float16] /* ty=Tensor[(32, 7, 7, 128), float16] */, %p1195: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 32), float16] {
    nn.conv2d(%p0163, %p1195, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 32), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 7, 7, 32), float16] */;
  %705 = %697(%696, meta[relay.Constant][311] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 7, 7, 32), float16] */;
  %706 = fn (%p0168: Tensor[(32, 7, 7, 512), float16] /* ty=Tensor[(32, 7, 7, 512), float16] */, %p1200: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p2118: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p3102: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p446: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p542: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p638: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p734: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p830: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p926: Tensor[(768), float16] /* ty=Tensor[(768), float16] */, %p1023: Tensor[(768), float16] /* ty=Tensor[(768), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 768), float16] {
    %701 = (%p0168, %p1200, %p2118, %p3102, %p446, %p542, %p638, %p734, %p830) /* ty=(Tensor[(32, 7, 7, 512), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16]) span=aten::cat_53:0:0 */;
    %702 = concatenate(%701, axis=3) /* ty=Tensor[(32, 7, 7, 768), float16] */;
    %703 = multiply(%702, %p926) /* ty=Tensor[(32, 7, 7, 768), float16] */;
    %704 = add(%703, %p1023) /* ty=Tensor[(32, 7, 7, 768), float16] */;
    nn.relu(%704) /* ty=Tensor[(32, 7, 7, 768), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 512), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(768), float16], Tensor[(768), float16]) -> Tensor[(32, 7, 7, 768), float16] */;
  %707 = %706(%601, %614, %627, %640, %653, %666, %679, %692, %705, meta[relay.Constant][312] /* ty=Tensor[(768), float16] */, meta[relay.Constant][313] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(32, 7, 7, 768), float16] */;
  %708 = fn (%p0167: Tensor[(32, 7, 7, 768), float16] /* ty=Tensor[(32, 7, 7, 768), float16] */, %p1199: Tensor[(128, 1, 1, 768), float16] /* ty=Tensor[(128, 1, 1, 768), float16] */, %p2117: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p3101: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 128), float16] {
    %698 = nn.conv2d(%p0167, %p1199, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 128), float16] */;
    %699 = multiply(%698, %p2117) /* ty=Tensor[(32, 7, 7, 128), float16] */;
    %700 = add(%699, %p3101) /* ty=Tensor[(32, 7, 7, 128), float16] */;
    nn.relu(%700) /* ty=Tensor[(32, 7, 7, 128), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 768), float16], Tensor[(128, 1, 1, 768), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 7, 7, 128), float16] */;
  %709 = %708(%707, meta[relay.Constant][314] /* ty=Tensor[(128, 1, 1, 768), float16] */, meta[relay.Constant][315] /* ty=Tensor[(128), float16] */, meta[relay.Constant][316] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 7, 7, 128), float16] */;
  %710 = fn (%p0166: Tensor[(32, 7, 7, 128), float16] /* ty=Tensor[(32, 7, 7, 128), float16] */, %p1198: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 32), float16] {
    nn.conv2d(%p0166, %p1198, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 32), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 7, 7, 32), float16] */;
  %718 = %710(%709, meta[relay.Constant][317] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 7, 7, 32), float16] */;
  %719 = fn (%p0171: Tensor[(32, 7, 7, 512), float16] /* ty=Tensor[(32, 7, 7, 512), float16] */, %p1203: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p2120: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p3104: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p447: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p543: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p639: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p735: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p831: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p927: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p1024: Tensor[(800), float16] /* ty=Tensor[(800), float16] */, %p11100: Tensor[(800), float16] /* ty=Tensor[(800), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 800), float16] {
    %714 = (%p0171, %p1203, %p2120, %p3104, %p447, %p543, %p639, %p735, %p831, %p927) /* ty=(Tensor[(32, 7, 7, 512), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16]) span=aten::cat_54:0:0 */;
    %715 = concatenate(%714, axis=3) /* ty=Tensor[(32, 7, 7, 800), float16] */;
    %716 = multiply(%715, %p1024) /* ty=Tensor[(32, 7, 7, 800), float16] */;
    %717 = add(%716, %p11100) /* ty=Tensor[(32, 7, 7, 800), float16] */;
    nn.relu(%717) /* ty=Tensor[(32, 7, 7, 800), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 512), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(800), float16], Tensor[(800), float16]) -> Tensor[(32, 7, 7, 800), float16] */;
  %720 = %719(%601, %614, %627, %640, %653, %666, %679, %692, %705, %718, meta[relay.Constant][318] /* ty=Tensor[(800), float16] */, meta[relay.Constant][319] /* ty=Tensor[(800), float16] */) /* ty=Tensor[(32, 7, 7, 800), float16] */;
  %721 = fn (%p0170: Tensor[(32, 7, 7, 800), float16] /* ty=Tensor[(32, 7, 7, 800), float16] */, %p1202: Tensor[(128, 1, 1, 800), float16] /* ty=Tensor[(128, 1, 1, 800), float16] */, %p2119: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p3103: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 128), float16] {
    %711 = nn.conv2d(%p0170, %p1202, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 128), float16] */;
    %712 = multiply(%711, %p2119) /* ty=Tensor[(32, 7, 7, 128), float16] */;
    %713 = add(%712, %p3103) /* ty=Tensor[(32, 7, 7, 128), float16] */;
    nn.relu(%713) /* ty=Tensor[(32, 7, 7, 128), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 800), float16], Tensor[(128, 1, 1, 800), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 7, 7, 128), float16] */;
  %722 = %721(%720, meta[relay.Constant][320] /* ty=Tensor[(128, 1, 1, 800), float16] */, meta[relay.Constant][321] /* ty=Tensor[(128), float16] */, meta[relay.Constant][322] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 7, 7, 128), float16] */;
  %723 = fn (%p0169: Tensor[(32, 7, 7, 128), float16] /* ty=Tensor[(32, 7, 7, 128), float16] */, %p1201: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 32), float16] {
    nn.conv2d(%p0169, %p1201, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 32), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 7, 7, 32), float16] */;
  %731 = %723(%722, meta[relay.Constant][323] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 7, 7, 32), float16] */;
  %732 = fn (%p0174: Tensor[(32, 7, 7, 512), float16] /* ty=Tensor[(32, 7, 7, 512), float16] */, %p1206: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p2122: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p3106: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p448: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p544: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p640: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p736: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p832: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p928: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p1025: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p11101: Tensor[(832), float16] /* ty=Tensor[(832), float16] */, %p1226: Tensor[(832), float16] /* ty=Tensor[(832), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 832), float16] {
    %727 = (%p0174, %p1206, %p2122, %p3106, %p448, %p544, %p640, %p736, %p832, %p928, %p1025) /* ty=(Tensor[(32, 7, 7, 512), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16]) span=aten::cat_55:0:0 */;
    %728 = concatenate(%727, axis=3) /* ty=Tensor[(32, 7, 7, 832), float16] */;
    %729 = multiply(%728, %p11101) /* ty=Tensor[(32, 7, 7, 832), float16] */;
    %730 = add(%729, %p1226) /* ty=Tensor[(32, 7, 7, 832), float16] */;
    nn.relu(%730) /* ty=Tensor[(32, 7, 7, 832), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 512), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(832), float16], Tensor[(832), float16]) -> Tensor[(32, 7, 7, 832), float16] */;
  %733 = %732(%601, %614, %627, %640, %653, %666, %679, %692, %705, %718, %731, meta[relay.Constant][324] /* ty=Tensor[(832), float16] */, meta[relay.Constant][325] /* ty=Tensor[(832), float16] */) /* ty=Tensor[(32, 7, 7, 832), float16] */;
  %734 = fn (%p0173: Tensor[(32, 7, 7, 832), float16] /* ty=Tensor[(32, 7, 7, 832), float16] */, %p1205: Tensor[(128, 1, 1, 832), float16] /* ty=Tensor[(128, 1, 1, 832), float16] */, %p2121: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p3105: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 128), float16] {
    %724 = nn.conv2d(%p0173, %p1205, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 128), float16] */;
    %725 = multiply(%724, %p2121) /* ty=Tensor[(32, 7, 7, 128), float16] */;
    %726 = add(%725, %p3105) /* ty=Tensor[(32, 7, 7, 128), float16] */;
    nn.relu(%726) /* ty=Tensor[(32, 7, 7, 128), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 832), float16], Tensor[(128, 1, 1, 832), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 7, 7, 128), float16] */;
  %735 = %734(%733, meta[relay.Constant][326] /* ty=Tensor[(128, 1, 1, 832), float16] */, meta[relay.Constant][327] /* ty=Tensor[(128), float16] */, meta[relay.Constant][328] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 7, 7, 128), float16] */;
  %736 = fn (%p0172: Tensor[(32, 7, 7, 128), float16] /* ty=Tensor[(32, 7, 7, 128), float16] */, %p1204: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 32), float16] {
    nn.conv2d(%p0172, %p1204, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 32), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 7, 7, 32), float16] */;
  %744 = %736(%735, meta[relay.Constant][329] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 7, 7, 32), float16] */;
  %745 = fn (%p0177: Tensor[(32, 7, 7, 512), float16] /* ty=Tensor[(32, 7, 7, 512), float16] */, %p1209: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p2124: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p3108: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p449: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p545: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p641: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p737: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p833: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p929: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p1026: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p11102: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p1227: Tensor[(864), float16] /* ty=Tensor[(864), float16] */, %p1324: Tensor[(864), float16] /* ty=Tensor[(864), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 864), float16] {
    %740 = (%p0177, %p1209, %p2124, %p3108, %p449, %p545, %p641, %p737, %p833, %p929, %p1026, %p11102) /* ty=(Tensor[(32, 7, 7, 512), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16]) span=aten::cat_56:0:0 */;
    %741 = concatenate(%740, axis=3) /* ty=Tensor[(32, 7, 7, 864), float16] */;
    %742 = multiply(%741, %p1227) /* ty=Tensor[(32, 7, 7, 864), float16] */;
    %743 = add(%742, %p1324) /* ty=Tensor[(32, 7, 7, 864), float16] */;
    nn.relu(%743) /* ty=Tensor[(32, 7, 7, 864), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 512), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(864), float16], Tensor[(864), float16]) -> Tensor[(32, 7, 7, 864), float16] */;
  %746 = %745(%601, %614, %627, %640, %653, %666, %679, %692, %705, %718, %731, %744, meta[relay.Constant][330] /* ty=Tensor[(864), float16] */, meta[relay.Constant][331] /* ty=Tensor[(864), float16] */) /* ty=Tensor[(32, 7, 7, 864), float16] */;
  %747 = fn (%p0176: Tensor[(32, 7, 7, 864), float16] /* ty=Tensor[(32, 7, 7, 864), float16] */, %p1208: Tensor[(128, 1, 1, 864), float16] /* ty=Tensor[(128, 1, 1, 864), float16] */, %p2123: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p3107: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 128), float16] {
    %737 = nn.conv2d(%p0176, %p1208, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 128), float16] */;
    %738 = multiply(%737, %p2123) /* ty=Tensor[(32, 7, 7, 128), float16] */;
    %739 = add(%738, %p3107) /* ty=Tensor[(32, 7, 7, 128), float16] */;
    nn.relu(%739) /* ty=Tensor[(32, 7, 7, 128), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 864), float16], Tensor[(128, 1, 1, 864), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 7, 7, 128), float16] */;
  %748 = %747(%746, meta[relay.Constant][332] /* ty=Tensor[(128, 1, 1, 864), float16] */, meta[relay.Constant][333] /* ty=Tensor[(128), float16] */, meta[relay.Constant][334] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 7, 7, 128), float16] */;
  %749 = fn (%p0175: Tensor[(32, 7, 7, 128), float16] /* ty=Tensor[(32, 7, 7, 128), float16] */, %p1207: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 32), float16] {
    nn.conv2d(%p0175, %p1207, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 32), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 7, 7, 32), float16] */;
  %757 = %749(%748, meta[relay.Constant][335] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 7, 7, 32), float16] */;
  %758 = fn (%p0180: Tensor[(32, 7, 7, 512), float16] /* ty=Tensor[(32, 7, 7, 512), float16] */, %p1230: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p2126: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p3110: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p450: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p546: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p642: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p738: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p834: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p930: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p1027: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p11103: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p1231: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p1325: Tensor[(896), float16] /* ty=Tensor[(896), float16] */, %p1422: Tensor[(896), float16] /* ty=Tensor[(896), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 896), float16] {
    %753 = (%p0180, %p1230, %p2126, %p3110, %p450, %p546, %p642, %p738, %p834, %p930, %p1027, %p11103, %p1231) /* ty=(Tensor[(32, 7, 7, 512), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16]) span=aten::cat_57:0:0 */;
    %754 = concatenate(%753, axis=3) /* ty=Tensor[(32, 7, 7, 896), float16] */;
    %755 = multiply(%754, %p1325) /* ty=Tensor[(32, 7, 7, 896), float16] */;
    %756 = add(%755, %p1422) /* ty=Tensor[(32, 7, 7, 896), float16] */;
    nn.relu(%756) /* ty=Tensor[(32, 7, 7, 896), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 512), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(896), float16], Tensor[(896), float16]) -> Tensor[(32, 7, 7, 896), float16] */;
  %759 = %758(%601, %614, %627, %640, %653, %666, %679, %692, %705, %718, %731, %744, %757, meta[relay.Constant][336] /* ty=Tensor[(896), float16] */, meta[relay.Constant][337] /* ty=Tensor[(896), float16] */) /* ty=Tensor[(32, 7, 7, 896), float16] */;
  %760 = fn (%p0179: Tensor[(32, 7, 7, 896), float16] /* ty=Tensor[(32, 7, 7, 896), float16] */, %p1229: Tensor[(128, 1, 1, 896), float16] /* ty=Tensor[(128, 1, 1, 896), float16] */, %p2125: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p3109: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 128), float16] {
    %750 = nn.conv2d(%p0179, %p1229, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 128), float16] */;
    %751 = multiply(%750, %p2125) /* ty=Tensor[(32, 7, 7, 128), float16] */;
    %752 = add(%751, %p3109) /* ty=Tensor[(32, 7, 7, 128), float16] */;
    nn.relu(%752) /* ty=Tensor[(32, 7, 7, 128), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 896), float16], Tensor[(128, 1, 1, 896), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 7, 7, 128), float16] */;
  %761 = %760(%759, meta[relay.Constant][338] /* ty=Tensor[(128, 1, 1, 896), float16] */, meta[relay.Constant][339] /* ty=Tensor[(128), float16] */, meta[relay.Constant][340] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 7, 7, 128), float16] */;
  %762 = fn (%p0178: Tensor[(32, 7, 7, 128), float16] /* ty=Tensor[(32, 7, 7, 128), float16] */, %p1228: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 32), float16] {
    nn.conv2d(%p0178, %p1228, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 32), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 7, 7, 32), float16] */;
  %770 = %762(%761, meta[relay.Constant][341] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 7, 7, 32), float16] */;
  %771 = fn (%p0183: Tensor[(32, 7, 7, 512), float16] /* ty=Tensor[(32, 7, 7, 512), float16] */, %p1234: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p2128: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p3112: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p451: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p547: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p643: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p739: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p835: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p931: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p1028: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p11104: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p1235: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p1326: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p1423: Tensor[(928), float16] /* ty=Tensor[(928), float16] */, %p1521: Tensor[(928), float16] /* ty=Tensor[(928), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 928), float16] {
    %766 = (%p0183, %p1234, %p2128, %p3112, %p451, %p547, %p643, %p739, %p835, %p931, %p1028, %p11104, %p1235, %p1326) /* ty=(Tensor[(32, 7, 7, 512), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16]) span=aten::cat_58:0:0 */;
    %767 = concatenate(%766, axis=3) /* ty=Tensor[(32, 7, 7, 928), float16] */;
    %768 = multiply(%767, %p1423) /* ty=Tensor[(32, 7, 7, 928), float16] */;
    %769 = add(%768, %p1521) /* ty=Tensor[(32, 7, 7, 928), float16] */;
    nn.relu(%769) /* ty=Tensor[(32, 7, 7, 928), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 512), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(928), float16], Tensor[(928), float16]) -> Tensor[(32, 7, 7, 928), float16] */;
  %772 = %771(%601, %614, %627, %640, %653, %666, %679, %692, %705, %718, %731, %744, %757, %770, meta[relay.Constant][342] /* ty=Tensor[(928), float16] */, meta[relay.Constant][343] /* ty=Tensor[(928), float16] */) /* ty=Tensor[(32, 7, 7, 928), float16] */;
  %773 = fn (%p0182: Tensor[(32, 7, 7, 928), float16] /* ty=Tensor[(32, 7, 7, 928), float16] */, %p1233: Tensor[(128, 1, 1, 928), float16] /* ty=Tensor[(128, 1, 1, 928), float16] */, %p2127: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p3111: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 128), float16] {
    %763 = nn.conv2d(%p0182, %p1233, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 128), float16] */;
    %764 = multiply(%763, %p2127) /* ty=Tensor[(32, 7, 7, 128), float16] */;
    %765 = add(%764, %p3111) /* ty=Tensor[(32, 7, 7, 128), float16] */;
    nn.relu(%765) /* ty=Tensor[(32, 7, 7, 128), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 928), float16], Tensor[(128, 1, 1, 928), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 7, 7, 128), float16] */;
  %774 = %773(%772, meta[relay.Constant][344] /* ty=Tensor[(128, 1, 1, 928), float16] */, meta[relay.Constant][345] /* ty=Tensor[(128), float16] */, meta[relay.Constant][346] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 7, 7, 128), float16] */;
  %775 = fn (%p0181: Tensor[(32, 7, 7, 128), float16] /* ty=Tensor[(32, 7, 7, 128), float16] */, %p1232: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 32), float16] {
    nn.conv2d(%p0181, %p1232, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 32), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 7, 7, 32), float16] */;
  %783 = %775(%774, meta[relay.Constant][347] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 7, 7, 32), float16] */;
  %784 = fn (%p0186: Tensor[(32, 7, 7, 512), float16] /* ty=Tensor[(32, 7, 7, 512), float16] */, %p1238: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p2130: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p3114: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p452: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p548: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p644: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p740: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p836: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p932: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p1029: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p11105: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p1239: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p1327: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p1424: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p1522: Tensor[(960), float16] /* ty=Tensor[(960), float16] */, %p1620: Tensor[(960), float16] /* ty=Tensor[(960), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 960), float16] {
    %779 = (%p0186, %p1238, %p2130, %p3114, %p452, %p548, %p644, %p740, %p836, %p932, %p1029, %p11105, %p1239, %p1327, %p1424) /* ty=(Tensor[(32, 7, 7, 512), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16]) span=aten::cat_59:0:0 */;
    %780 = concatenate(%779, axis=3) /* ty=Tensor[(32, 7, 7, 960), float16] */;
    %781 = multiply(%780, %p1522) /* ty=Tensor[(32, 7, 7, 960), float16] */;
    %782 = add(%781, %p1620) /* ty=Tensor[(32, 7, 7, 960), float16] */;
    nn.relu(%782) /* ty=Tensor[(32, 7, 7, 960), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 512), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(960), float16], Tensor[(960), float16]) -> Tensor[(32, 7, 7, 960), float16] */;
  %785 = %784(%601, %614, %627, %640, %653, %666, %679, %692, %705, %718, %731, %744, %757, %770, %783, meta[relay.Constant][348] /* ty=Tensor[(960), float16] */, meta[relay.Constant][349] /* ty=Tensor[(960), float16] */) /* ty=Tensor[(32, 7, 7, 960), float16] */;
  %786 = fn (%p0185: Tensor[(32, 7, 7, 960), float16] /* ty=Tensor[(32, 7, 7, 960), float16] */, %p1237: Tensor[(128, 1, 1, 960), float16] /* ty=Tensor[(128, 1, 1, 960), float16] */, %p2129: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p3113: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 128), float16] {
    %776 = nn.conv2d(%p0185, %p1237, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 128), float16] */;
    %777 = multiply(%776, %p2129) /* ty=Tensor[(32, 7, 7, 128), float16] */;
    %778 = add(%777, %p3113) /* ty=Tensor[(32, 7, 7, 128), float16] */;
    nn.relu(%778) /* ty=Tensor[(32, 7, 7, 128), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 960), float16], Tensor[(128, 1, 1, 960), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 7, 7, 128), float16] */;
  %787 = %786(%785, meta[relay.Constant][350] /* ty=Tensor[(128, 1, 1, 960), float16] */, meta[relay.Constant][351] /* ty=Tensor[(128), float16] */, meta[relay.Constant][352] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 7, 7, 128), float16] */;
  %788 = fn (%p0184: Tensor[(32, 7, 7, 128), float16] /* ty=Tensor[(32, 7, 7, 128), float16] */, %p1236: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 32), float16] {
    nn.conv2d(%p0184, %p1236, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 32), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 7, 7, 32), float16] */;
  %796 = %788(%787, meta[relay.Constant][353] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 7, 7, 32), float16] */;
  %797 = fn (%p0189: Tensor[(32, 7, 7, 512), float16] /* ty=Tensor[(32, 7, 7, 512), float16] */, %p1242: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p2132: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p3116: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p453: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p549: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p645: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p741: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p837: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p933: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p1030: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p11106: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p1243: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p1328: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p1425: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p1523: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p1621: Tensor[(992), float16] /* ty=Tensor[(992), float16] */, %p1719: Tensor[(992), float16] /* ty=Tensor[(992), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 992), float16] {
    %792 = (%p0189, %p1242, %p2132, %p3116, %p453, %p549, %p645, %p741, %p837, %p933, %p1030, %p11106, %p1243, %p1328, %p1425, %p1523) /* ty=(Tensor[(32, 7, 7, 512), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16]) span=aten::cat_60:0:0 */;
    %793 = concatenate(%792, axis=3) /* ty=Tensor[(32, 7, 7, 992), float16] */;
    %794 = multiply(%793, %p1621) /* ty=Tensor[(32, 7, 7, 992), float16] */;
    %795 = add(%794, %p1719) /* ty=Tensor[(32, 7, 7, 992), float16] */;
    nn.relu(%795) /* ty=Tensor[(32, 7, 7, 992), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 512), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(992), float16], Tensor[(992), float16]) -> Tensor[(32, 7, 7, 992), float16] */;
  %798 = %797(%601, %614, %627, %640, %653, %666, %679, %692, %705, %718, %731, %744, %757, %770, %783, %796, meta[relay.Constant][354] /* ty=Tensor[(992), float16] */, meta[relay.Constant][355] /* ty=Tensor[(992), float16] */) /* ty=Tensor[(32, 7, 7, 992), float16] */;
  %799 = fn (%p0188: Tensor[(32, 7, 7, 992), float16] /* ty=Tensor[(32, 7, 7, 992), float16] */, %p1241: Tensor[(128, 1, 1, 992), float16] /* ty=Tensor[(128, 1, 1, 992), float16] */, %p2131: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p3115: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 128), float16] {
    %789 = nn.conv2d(%p0188, %p1241, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 128), float16] */;
    %790 = multiply(%789, %p2131) /* ty=Tensor[(32, 7, 7, 128), float16] */;
    %791 = add(%790, %p3115) /* ty=Tensor[(32, 7, 7, 128), float16] */;
    nn.relu(%791) /* ty=Tensor[(32, 7, 7, 128), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 992), float16], Tensor[(128, 1, 1, 992), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 7, 7, 128), float16] */;
  %800 = %799(%798, meta[relay.Constant][356] /* ty=Tensor[(128, 1, 1, 992), float16] */, meta[relay.Constant][357] /* ty=Tensor[(128), float16] */, meta[relay.Constant][358] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 7, 7, 128), float16] */;
  %801 = fn (%p0187: Tensor[(32, 7, 7, 128), float16] /* ty=Tensor[(32, 7, 7, 128), float16] */, %p1240: Tensor[(32, 3, 3, 128), float16] /* ty=Tensor[(32, 3, 3, 128), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 32), float16] {
    nn.conv2d(%p0187, %p1240, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 7, 7, 32), float16] */
  } /* ty=fn (Tensor[(32, 7, 7, 128), float16], Tensor[(32, 3, 3, 128), float16]) -> Tensor[(32, 7, 7, 32), float16] */;
  %802 = %801(%800, meta[relay.Constant][359] /* ty=Tensor[(32, 3, 3, 128), float16] */) /* ty=Tensor[(32, 7, 7, 32), float16] */;
  %803 = fn (%p03: Tensor[(32, 7, 7, 512), float16] /* ty=Tensor[(32, 7, 7, 512), float16] */, %p11: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p21: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p3: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p4: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p5: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p6: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p7: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p8: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p9: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p10: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p111: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p12: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p13: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p14: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p15: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p16: Tensor[(32, 7, 7, 32), float16] /* ty=Tensor[(32, 7, 7, 32), float16] */, %p17: Tensor[(1024), float16] /* ty=Tensor[(1024), float16] */, %p18: Tensor[(1024), float16] /* ty=Tensor[(1024), float16] */, Primitive=1) -> Tensor[(32, 7, 7, 1024), float32] {
    %4 = (%p03, %p11, %p21, %p3, %p4, %p5, %p6, %p7, %p8, %p9, %p10, %p111, %p12, %p13, %p14, %p15, %p16) /* ty=(Tensor[(32, 7, 7, 512), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16]) span=aten::cat_61:0:0 */;
    %5 = concatenate(%4, axis=3) /* ty=Tensor[(32, 7, 7, 1024), float16] */;
    %6 = multiply(%5, %p17) /* ty=Tensor[(32, 7, 7, 1024), float16] */;
    %7 = add(%6, %p18) /* ty=Tensor[(32, 7, 7, 1024), float16] */;
    %8 = nn.relu(%7) /* ty=Tensor[(32, 7, 7, 1024), float16] */;
    cast(%8, dtype="float32") /* ty=Tensor[(32, 7, 7, 1024), float32] */
  } /* ty=fn (Tensor[(32, 7, 7, 512), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(32, 7, 7, 32), float16], Tensor[(1024), float16], Tensor[(1024), float16]) -> Tensor[(32, 7, 7, 1024), float32] */;
  %804 = %803(%601, %614, %627, %640, %653, %666, %679, %692, %705, %718, %731, %744, %757, %770, %783, %796, %802, meta[relay.Constant][360] /* ty=Tensor[(1024), float16] */, meta[relay.Constant][361] /* ty=Tensor[(1024), float16] */) /* ty=Tensor[(32, 7, 7, 1024), float32] */;
  %805 = fn (%p02: Tensor[(32, 7, 7, 1024), float32] /* ty=Tensor[(32, 7, 7, 1024), float32] */, Primitive=1) -> Tensor[(32, 1, 1, 1024), float32] {
    nn.adaptive_avg_pool2d(%p02, output_size=[1, 1], layout="NHWC") /* ty=Tensor[(32, 1, 1, 1024), float32] */
  } /* ty=fn (Tensor[(32, 7, 7, 1024), float32]) -> Tensor[(32, 1, 1, 1024), float32] */;
  %806 = %805(%804) /* ty=Tensor[(32, 1, 1, 1024), float32] */;
  %807 = fn (%p01: Tensor[(32, 1, 1, 1024), float32] /* ty=Tensor[(32, 1, 1, 1024), float32] */, Primitive=1) -> Tensor[(32, 1024), float16] {
    %1 = layout_transform(%p01, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(32, 1024, 1, 1), float32] */;
    %2 = reshape(%1, newshape=[0, -1, 1, 1]) /* ty=Tensor[(32, 1024, 1, 1), float32] */;
    %3 = squeeze(%2, axis=[2, 3]) /* ty=Tensor[(32, 1024), float32] */;
    cast(%3, dtype="float16") /* ty=Tensor[(32, 1024), float16] */
  } /* ty=fn (Tensor[(32, 1, 1, 1024), float32]) -> Tensor[(32, 1024), float16] */;
  %808 = %807(%806) /* ty=Tensor[(32, 1024), float16] */;
  %809 = fn (%p0: Tensor[(32, 1024), float16] /* ty=Tensor[(32, 1024), float16] */, %p1: Tensor[(1000, 1024), float16] /* ty=Tensor[(1000, 1024), float16] */, %p2: Tensor[(1, 1000), float16] /* ty=Tensor[(1, 1000), float16] */, Primitive=1) -> Tensor[(32, 1000), float16] {
    %0 = nn.dense(%p0, %p1, units=None, out_dtype="float16") /* ty=Tensor[(32, 1000), float16] */;
    add(%0, %p2) /* ty=Tensor[(32, 1000), float16] */
  } /* ty=fn (Tensor[(32, 1024), float16], Tensor[(1000, 1024), float16], Tensor[(1, 1000), float16]) -> Tensor[(32, 1000), float16] */;
  %809(%808, meta[relay.Constant][362] /* ty=Tensor[(1000, 1024), float16] */, meta[relay.Constant][363] /* ty=Tensor[(1, 1000), float16] */) /* ty=Tensor[(32, 1000), float16] */
}


