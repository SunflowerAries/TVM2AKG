type List[A] {
  Cons(A, List[A]),
  Nil,
}

type Option[A] {
  Some(A),
  None,
}

type Tree[A] {
  Rose(A, List[Tree[A]]),
}

type tensor_float16_t {
  tensor_nil_float16,
  tensor0_float16(float16),
  tensor1_float16(Tensor[(?), float16]),
  tensor2_float16(Tensor[(?, ?), float16]),
  tensor3_float16(Tensor[(?, ?, ?), float16]),
  tensor4_float16(Tensor[(?, ?, ?, ?), float16]),
  tensor5_float16(Tensor[(?, ?, ?, ?, ?), float16]),
  tensor6_float16(Tensor[(?, ?, ?, ?, ?, ?), float16]),
}

type tensor_float32_t {
  tensor_nil_float32,
  tensor0_float32(float32),
  tensor1_float32(Tensor[(?), float32]),
  tensor2_float32(Tensor[(?, ?), float32]),
  tensor3_float32(Tensor[(?, ?, ?), float32]),
  tensor4_float32(Tensor[(?, ?, ?, ?), float32]),
  tensor5_float32(Tensor[(?, ?, ?, ?, ?), float32]),
  tensor6_float32(Tensor[(?, ?, ?, ?, ?, ?), float32]),
}

type tensor_float64_t {
  tensor_nil_float64,
  tensor0_float64(float64),
  tensor1_float64(Tensor[(?), float64]),
  tensor2_float64(Tensor[(?, ?), float64]),
  tensor3_float64(Tensor[(?, ?, ?), float64]),
  tensor4_float64(Tensor[(?, ?, ?, ?), float64]),
  tensor5_float64(Tensor[(?, ?, ?, ?, ?), float64]),
  tensor6_float64(Tensor[(?, ?, ?, ?, ?, ?), float64]),
}

type tensor_int16_t {
  tensor_nil_int16,
  tensor0_int16(int16),
  tensor1_int16(Tensor[(?), int16]),
  tensor2_int16(Tensor[(?, ?), int16]),
  tensor3_int16(Tensor[(?, ?, ?), int16]),
  tensor4_int16(Tensor[(?, ?, ?, ?), int16]),
  tensor5_int16(Tensor[(?, ?, ?, ?, ?), int16]),
  tensor6_int16(Tensor[(?, ?, ?, ?, ?, ?), int16]),
}

type tensor_int32_t {
  tensor_nil_int32,
  tensor0_int32(int32),
  tensor1_int32(Tensor[(?), int32]),
  tensor2_int32(Tensor[(?, ?), int32]),
  tensor3_int32(Tensor[(?, ?, ?), int32]),
  tensor4_int32(Tensor[(?, ?, ?, ?), int32]),
  tensor5_int32(Tensor[(?, ?, ?, ?, ?), int32]),
  tensor6_int32(Tensor[(?, ?, ?, ?, ?, ?), int32]),
}

type tensor_int64_t {
  tensor_nil_int64,
  tensor0_int64(int64),
  tensor1_int64(Tensor[(?), int64]),
  tensor2_int64(Tensor[(?, ?), int64]),
  tensor3_int64(Tensor[(?, ?, ?), int64]),
  tensor4_int64(Tensor[(?, ?, ?, ?), int64]),
  tensor5_int64(Tensor[(?, ?, ?, ?, ?), int64]),
  tensor6_int64(Tensor[(?, ?, ?, ?, ?, ?), int64]),
}

type tensor_int8_t {
  tensor_nil_int8,
  tensor0_int8(int8),
  tensor1_int8(Tensor[(?), int8]),
  tensor2_int8(Tensor[(?, ?), int8]),
  tensor3_int8(Tensor[(?, ?, ?), int8]),
  tensor4_int8(Tensor[(?, ?, ?, ?), int8]),
  tensor5_int8(Tensor[(?, ?, ?, ?, ?), int8]),
  tensor6_int8(Tensor[(?, ?, ?, ?, ?, ?), int8]),
}

type tensor_uint16_t {
  tensor_nil_uint16,
  tensor0_uint16(uint16),
  tensor1_uint16(Tensor[(?), uint16]),
  tensor2_uint16(Tensor[(?, ?), uint16]),
  tensor3_uint16(Tensor[(?, ?, ?), uint16]),
  tensor4_uint16(Tensor[(?, ?, ?, ?), uint16]),
  tensor5_uint16(Tensor[(?, ?, ?, ?, ?), uint16]),
  tensor6_uint16(Tensor[(?, ?, ?, ?, ?, ?), uint16]),
}

type tensor_uint8_t {
  tensor_nil_uint8,
  tensor0_uint8(uint8),
  tensor1_uint8(Tensor[(?), uint8]),
  tensor2_uint8(Tensor[(?, ?), uint8]),
  tensor3_uint8(Tensor[(?, ?, ?), uint8]),
  tensor4_uint8(Tensor[(?, ?, ?, ?), uint8]),
  tensor5_uint8(Tensor[(?, ?, ?, ?, ?), uint8]),
  tensor6_uint8(Tensor[(?, ?, ?, ?, ?, ?), uint8]),
}

def @main(%input0: Tensor[(32, 3, 299, 299), float32] /* ty=Tensor[(32, 3, 299, 299), float32] span=aten::_convolution_0.input0:0:0 */) -> Tensor[(32, 1000), float16] {
  %82 = fn (%p035: Tensor[(32, 3, 299, 299), float32] /* ty=Tensor[(32, 3, 299, 299), float32] */, Primitive=1) -> Tensor[(32, 299, 299, 3), float16] {
    %81 = cast(%p035, dtype="float16") /* ty=Tensor[(32, 3, 299, 299), float16] */;
    layout_transform(%81, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(32, 299, 299, 3), float16] */
  } /* ty=fn (Tensor[(32, 3, 299, 299), float32]) -> Tensor[(32, 299, 299, 3), float16] */;
  %83 = %82(%input0) /* ty=Tensor[(32, 299, 299, 3), float16] */;
  %84 = fn (%p034: Tensor[(32, 299, 299, 3), float16] /* ty=Tensor[(32, 299, 299, 3), float16] */, %p130: Tensor[(32, 3, 3, 3), float16] /* ty=Tensor[(32, 3, 3, 3), float16] */, %p230: Tensor[(32), float16] /* ty=Tensor[(32), float16] */, %p327: Tensor[(32), float16] /* ty=Tensor[(32), float16] */, Primitive=1) -> Tensor[(32, 149, 149, 32), float16] {
    %78 = nn.conv2d(%p034, %p130, strides=[2, 2], padding=[0, 0, 0, 0], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 149, 149, 32), float16] */;
    %79 = multiply(%78, %p230) /* ty=Tensor[(32, 149, 149, 32), float16] */;
    %80 = add(%79, %p327) /* ty=Tensor[(32, 149, 149, 32), float16] */;
    nn.relu(%80) /* ty=Tensor[(32, 149, 149, 32), float16] */
  } /* ty=fn (Tensor[(32, 299, 299, 3), float16], Tensor[(32, 3, 3, 3), float16], Tensor[(32), float16], Tensor[(32), float16]) -> Tensor[(32, 149, 149, 32), float16] */;
  %85 = %84(%83, meta[relay.Constant][0] /* ty=Tensor[(32, 3, 3, 3), float16] */, meta[relay.Constant][1] /* ty=Tensor[(32), float16] */, meta[relay.Constant][2] /* ty=Tensor[(32), float16] */) /* ty=Tensor[(32, 149, 149, 32), float16] */;
  %86 = fn (%p033: Tensor[(32, 149, 149, 32), float16] /* ty=Tensor[(32, 149, 149, 32), float16] */, %p129: Tensor[(32, 3, 3, 32), float16] /* ty=Tensor[(32, 3, 3, 32), float16] */, %p229: Tensor[(32), float16] /* ty=Tensor[(32), float16] */, %p326: Tensor[(32), float16] /* ty=Tensor[(32), float16] */, Primitive=1) -> Tensor[(32, 147, 147, 32), float16] {
    %75 = nn.conv2d(%p033, %p129, padding=[0, 0, 0, 0], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 147, 147, 32), float16] */;
    %76 = multiply(%75, %p229) /* ty=Tensor[(32, 147, 147, 32), float16] */;
    %77 = add(%76, %p326) /* ty=Tensor[(32, 147, 147, 32), float16] */;
    nn.relu(%77) /* ty=Tensor[(32, 147, 147, 32), float16] */
  } /* ty=fn (Tensor[(32, 149, 149, 32), float16], Tensor[(32, 3, 3, 32), float16], Tensor[(32), float16], Tensor[(32), float16]) -> Tensor[(32, 147, 147, 32), float16] */;
  %87 = %86(%85, meta[relay.Constant][3] /* ty=Tensor[(32, 3, 3, 32), float16] */, meta[relay.Constant][4] /* ty=Tensor[(32), float16] */, meta[relay.Constant][5] /* ty=Tensor[(32), float16] */) /* ty=Tensor[(32, 147, 147, 32), float16] */;
  %88 = fn (%p032: Tensor[(32, 147, 147, 32), float16] /* ty=Tensor[(32, 147, 147, 32), float16] */, %p128: Tensor[(64, 3, 3, 32), float16] /* ty=Tensor[(64, 3, 3, 32), float16] */, %p228: Tensor[(64), float16] /* ty=Tensor[(64), float16] */, %p325: Tensor[(64), float16] /* ty=Tensor[(64), float16] */, Primitive=1) -> Tensor[(32, 147, 147, 64), float16] {
    %72 = nn.conv2d(%p032, %p128, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 147, 147, 64), float16] */;
    %73 = multiply(%72, %p228) /* ty=Tensor[(32, 147, 147, 64), float16] */;
    %74 = add(%73, %p325) /* ty=Tensor[(32, 147, 147, 64), float16] */;
    nn.relu(%74) /* ty=Tensor[(32, 147, 147, 64), float16] */
  } /* ty=fn (Tensor[(32, 147, 147, 32), float16], Tensor[(64, 3, 3, 32), float16], Tensor[(64), float16], Tensor[(64), float16]) -> Tensor[(32, 147, 147, 64), float16] */;
  %89 = %88(%87, meta[relay.Constant][6] /* ty=Tensor[(64, 3, 3, 32), float16] */, meta[relay.Constant][7] /* ty=Tensor[(64), float16] */, meta[relay.Constant][8] /* ty=Tensor[(64), float16] */) /* ty=Tensor[(32, 147, 147, 64), float16] */;
  %90 = fn (%p031: Tensor[(32, 147, 147, 64), float16] /* ty=Tensor[(32, 147, 147, 64), float16] */, Primitive=1) -> Tensor[(32, 73, 73, 64), float16] {
    nn.max_pool2d(%p031, pool_size=[3, 3], strides=[2, 2], padding=[0, 0, 0, 0], layout="NHWC", out_layout="NHWC") /* ty=Tensor[(32, 73, 73, 64), float16] */
  } /* ty=fn (Tensor[(32, 147, 147, 64), float16]) -> Tensor[(32, 73, 73, 64), float16] */;
  %91 = %90(%89) /* ty=Tensor[(32, 73, 73, 64), float16] */;
  %92 = fn (%p030: Tensor[(32, 73, 73, 64), float16] /* ty=Tensor[(32, 73, 73, 64), float16] */, %p127: Tensor[(80, 1, 1, 64), float16] /* ty=Tensor[(80, 1, 1, 64), float16] */, %p227: Tensor[(80), float16] /* ty=Tensor[(80), float16] */, %p324: Tensor[(80), float16] /* ty=Tensor[(80), float16] */, Primitive=1) -> Tensor[(32, 73, 73, 80), float16] {
    %69 = nn.conv2d(%p030, %p127, padding=[0, 0, 0, 0], channels=80, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 73, 73, 80), float16] */;
    %70 = multiply(%69, %p227) /* ty=Tensor[(32, 73, 73, 80), float16] */;
    %71 = add(%70, %p324) /* ty=Tensor[(32, 73, 73, 80), float16] */;
    nn.relu(%71) /* ty=Tensor[(32, 73, 73, 80), float16] */
  } /* ty=fn (Tensor[(32, 73, 73, 64), float16], Tensor[(80, 1, 1, 64), float16], Tensor[(80), float16], Tensor[(80), float16]) -> Tensor[(32, 73, 73, 80), float16] */;
  %93 = %92(%91, meta[relay.Constant][9] /* ty=Tensor[(80, 1, 1, 64), float16] */, meta[relay.Constant][10] /* ty=Tensor[(80), float16] */, meta[relay.Constant][11] /* ty=Tensor[(80), float16] */) /* ty=Tensor[(32, 73, 73, 80), float16] */;
  %94 = fn (%p029: Tensor[(32, 73, 73, 80), float16] /* ty=Tensor[(32, 73, 73, 80), float16] */, %p126: Tensor[(192, 3, 3, 80), float16] /* ty=Tensor[(192, 3, 3, 80), float16] */, %p226: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, %p323: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, Primitive=1) -> Tensor[(32, 71, 71, 192), float16] {
    %66 = nn.conv2d(%p029, %p126, padding=[0, 0, 0, 0], channels=192, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 71, 71, 192), float16] */;
    %67 = multiply(%66, %p226) /* ty=Tensor[(32, 71, 71, 192), float16] */;
    %68 = add(%67, %p323) /* ty=Tensor[(32, 71, 71, 192), float16] */;
    nn.relu(%68) /* ty=Tensor[(32, 71, 71, 192), float16] */
  } /* ty=fn (Tensor[(32, 73, 73, 80), float16], Tensor[(192, 3, 3, 80), float16], Tensor[(192), float16], Tensor[(192), float16]) -> Tensor[(32, 71, 71, 192), float16] */;
  %95 = %94(%93, meta[relay.Constant][12] /* ty=Tensor[(192, 3, 3, 80), float16] */, meta[relay.Constant][13] /* ty=Tensor[(192), float16] */, meta[relay.Constant][14] /* ty=Tensor[(192), float16] */) /* ty=Tensor[(32, 71, 71, 192), float16] */;
  %96 = fn (%p028: Tensor[(32, 71, 71, 192), float16] /* ty=Tensor[(32, 71, 71, 192), float16] */, Primitive=1) -> Tensor[(32, 35, 35, 192), float16] {
    nn.max_pool2d(%p028, pool_size=[3, 3], strides=[2, 2], padding=[0, 0, 0, 0], layout="NHWC", out_layout="NHWC") /* ty=Tensor[(32, 35, 35, 192), float16] */
  } /* ty=fn (Tensor[(32, 71, 71, 192), float16]) -> Tensor[(32, 35, 35, 192), float16] */;
  %97 = %96(%95) /* ty=Tensor[(32, 35, 35, 192), float16] */;
  %98 = fn (%p027: Tensor[(32, 35, 35, 192), float16] /* ty=Tensor[(32, 35, 35, 192), float16] */, %p125: Tensor[(64, 1, 1, 192), float16] /* ty=Tensor[(64, 1, 1, 192), float16] */, %p225: Tensor[(64), float16] /* ty=Tensor[(64), float16] */, %p322: Tensor[(64), float16] /* ty=Tensor[(64), float16] */, Primitive=1) -> Tensor[(32, 35, 35, 64), float16] {
    %63 = nn.conv2d(%p027, %p125, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 35, 35, 64), float16] */;
    %64 = multiply(%63, %p225) /* ty=Tensor[(32, 35, 35, 64), float16] */;
    %65 = add(%64, %p322) /* ty=Tensor[(32, 35, 35, 64), float16] */;
    nn.relu(%65) /* ty=Tensor[(32, 35, 35, 64), float16] */
  } /* ty=fn (Tensor[(32, 35, 35, 192), float16], Tensor[(64, 1, 1, 192), float16], Tensor[(64), float16], Tensor[(64), float16]) -> Tensor[(32, 35, 35, 64), float16] */;
  %105 = fn (%p037: Tensor[(32, 35, 35, 192), float16] /* ty=Tensor[(32, 35, 35, 192), float16] */, %p132: Tensor[(48, 1, 1, 192), float16] /* ty=Tensor[(48, 1, 1, 192), float16] */, %p232: Tensor[(48), float16] /* ty=Tensor[(48), float16] */, %p329: Tensor[(48), float16] /* ty=Tensor[(48), float16] */, Primitive=1) -> Tensor[(32, 35, 35, 48), float16] {
    %102 = nn.conv2d(%p037, %p132, padding=[0, 0, 0, 0], channels=48, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 35, 35, 48), float16] */;
    %103 = multiply(%102, %p232) /* ty=Tensor[(32, 35, 35, 48), float16] */;
    %104 = add(%103, %p329) /* ty=Tensor[(32, 35, 35, 48), float16] */;
    nn.relu(%104) /* ty=Tensor[(32, 35, 35, 48), float16] */
  } /* ty=fn (Tensor[(32, 35, 35, 192), float16], Tensor[(48, 1, 1, 192), float16], Tensor[(48), float16], Tensor[(48), float16]) -> Tensor[(32, 35, 35, 48), float16] */;
  %106 = %105(%97, meta[relay.Constant][18] /* ty=Tensor[(48, 1, 1, 192), float16] */, meta[relay.Constant][19] /* ty=Tensor[(48), float16] */, meta[relay.Constant][20] /* ty=Tensor[(48), float16] */) /* ty=Tensor[(32, 35, 35, 48), float16] */;
  %107 = fn (%p036: Tensor[(32, 35, 35, 48), float16] /* ty=Tensor[(32, 35, 35, 48), float16] */, %p131: Tensor[(64, 5, 5, 48), float16] /* ty=Tensor[(64, 5, 5, 48), float16] */, %p231: Tensor[(64), float16] /* ty=Tensor[(64), float16] */, %p328: Tensor[(64), float16] /* ty=Tensor[(64), float16] */, Primitive=1) -> Tensor[(32, 35, 35, 64), float16] {
    %99 = nn.conv2d(%p036, %p131, padding=[2, 2, 2, 2], channels=64, kernel_size=[5, 5], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 35, 35, 64), float16] */;
    %100 = multiply(%99, %p231) /* ty=Tensor[(32, 35, 35, 64), float16] */;
    %101 = add(%100, %p328) /* ty=Tensor[(32, 35, 35, 64), float16] */;
    nn.relu(%101) /* ty=Tensor[(32, 35, 35, 64), float16] */
  } /* ty=fn (Tensor[(32, 35, 35, 48), float16], Tensor[(64, 5, 5, 48), float16], Tensor[(64), float16], Tensor[(64), float16]) -> Tensor[(32, 35, 35, 64), float16] */;
  %117 = fn (%p040: Tensor[(32, 35, 35, 192), float16] /* ty=Tensor[(32, 35, 35, 192), float16] */, %p135: Tensor[(64, 1, 1, 192), float16] /* ty=Tensor[(64, 1, 1, 192), float16] */, %p235: Tensor[(64), float16] /* ty=Tensor[(64), float16] */, %p332: Tensor[(64), float16] /* ty=Tensor[(64), float16] */, Primitive=1) -> Tensor[(32, 35, 35, 64), float16] {
    %114 = nn.conv2d(%p040, %p135, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 35, 35, 64), float16] */;
    %115 = multiply(%114, %p235) /* ty=Tensor[(32, 35, 35, 64), float16] */;
    %116 = add(%115, %p332) /* ty=Tensor[(32, 35, 35, 64), float16] */;
    nn.relu(%116) /* ty=Tensor[(32, 35, 35, 64), float16] */
  } /* ty=fn (Tensor[(32, 35, 35, 192), float16], Tensor[(64, 1, 1, 192), float16], Tensor[(64), float16], Tensor[(64), float16]) -> Tensor[(32, 35, 35, 64), float16] */;
  %118 = %117(%97, meta[relay.Constant][24] /* ty=Tensor[(64, 1, 1, 192), float16] */, meta[relay.Constant][25] /* ty=Tensor[(64), float16] */, meta[relay.Constant][26] /* ty=Tensor[(64), float16] */) /* ty=Tensor[(32, 35, 35, 64), float16] */;
  %119 = fn (%p039: Tensor[(32, 35, 35, 64), float16] /* ty=Tensor[(32, 35, 35, 64), float16] */, %p134: Tensor[(96, 3, 3, 64), float16] /* ty=Tensor[(96, 3, 3, 64), float16] */, %p234: Tensor[(96), float16] /* ty=Tensor[(96), float16] */, %p331: Tensor[(96), float16] /* ty=Tensor[(96), float16] */, Primitive=1) -> Tensor[(32, 35, 35, 96), float16] {
    %111 = nn.conv2d(%p039, %p134, padding=[1, 1, 1, 1], channels=96, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 35, 35, 96), float16] */;
    %112 = multiply(%111, %p234) /* ty=Tensor[(32, 35, 35, 96), float16] */;
    %113 = add(%112, %p331) /* ty=Tensor[(32, 35, 35, 96), float16] */;
    nn.relu(%113) /* ty=Tensor[(32, 35, 35, 96), float16] */
  } /* ty=fn (Tensor[(32, 35, 35, 64), float16], Tensor[(96, 3, 3, 64), float16], Tensor[(96), float16], Tensor[(96), float16]) -> Tensor[(32, 35, 35, 96), float16] */;
  %120 = %119(%118, meta[relay.Constant][27] /* ty=Tensor[(96, 3, 3, 64), float16] */, meta[relay.Constant][28] /* ty=Tensor[(96), float16] */, meta[relay.Constant][29] /* ty=Tensor[(96), float16] */) /* ty=Tensor[(32, 35, 35, 96), float16] */;
  %121 = fn (%p038: Tensor[(32, 35, 35, 96), float16] /* ty=Tensor[(32, 35, 35, 96), float16] */, %p133: Tensor[(96, 3, 3, 96), float16] /* ty=Tensor[(96, 3, 3, 96), float16] */, %p233: Tensor[(96), float16] /* ty=Tensor[(96), float16] */, %p330: Tensor[(96), float16] /* ty=Tensor[(96), float16] */, Primitive=1) -> Tensor[(32, 35, 35, 96), float16] {
    %108 = nn.conv2d(%p038, %p133, padding=[1, 1, 1, 1], channels=96, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 35, 35, 96), float16] */;
    %109 = multiply(%108, %p233) /* ty=Tensor[(32, 35, 35, 96), float16] */;
    %110 = add(%109, %p330) /* ty=Tensor[(32, 35, 35, 96), float16] */;
    nn.relu(%110) /* ty=Tensor[(32, 35, 35, 96), float16] */
  } /* ty=fn (Tensor[(32, 35, 35, 96), float16], Tensor[(96, 3, 3, 96), float16], Tensor[(96), float16], Tensor[(96), float16]) -> Tensor[(32, 35, 35, 96), float16] */;
  %125 = fn (%p042: Tensor[(32, 35, 35, 192), float16] /* ty=Tensor[(32, 35, 35, 192), float16] */, Primitive=1) -> Tensor[(32, 35, 35, 192), float16] {
    nn.avg_pool2d(%p042, pool_size=[3, 3], padding=[1, 1, 1, 1], layout="NHWC", out_layout="NHWC", count_include_pad=True) /* ty=Tensor[(32, 35, 35, 192), float16] */
  } /* ty=fn (Tensor[(32, 35, 35, 192), float16]) -> Tensor[(32, 35, 35, 192), float16] */;
  %126 = %125(%97) /* ty=Tensor[(32, 35, 35, 192), float16] */;
  %127 = fn (%p041: Tensor[(32, 35, 35, 192), float16] /* ty=Tensor[(32, 35, 35, 192), float16] */, %p136: Tensor[(32, 1, 1, 192), float16] /* ty=Tensor[(32, 1, 1, 192), float16] */, %p236: Tensor[(32), float16] /* ty=Tensor[(32), float16] */, %p333: Tensor[(32), float16] /* ty=Tensor[(32), float16] */, Primitive=1) -> Tensor[(32, 35, 35, 32), float16] {
    %122 = nn.conv2d(%p041, %p136, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 35, 35, 32), float16] */;
    %123 = multiply(%122, %p236) /* ty=Tensor[(32, 35, 35, 32), float16] */;
    %124 = add(%123, %p333) /* ty=Tensor[(32, 35, 35, 32), float16] */;
    nn.relu(%124) /* ty=Tensor[(32, 35, 35, 32), float16] */
  } /* ty=fn (Tensor[(32, 35, 35, 192), float16], Tensor[(32, 1, 1, 192), float16], Tensor[(32), float16], Tensor[(32), float16]) -> Tensor[(32, 35, 35, 32), float16] */;
  %128 = %98(%97, meta[relay.Constant][15] /* ty=Tensor[(64, 1, 1, 192), float16] */, meta[relay.Constant][16] /* ty=Tensor[(64), float16] */, meta[relay.Constant][17] /* ty=Tensor[(64), float16] */) /* ty=Tensor[(32, 35, 35, 64), float16] */;
  %129 = %107(%106, meta[relay.Constant][21] /* ty=Tensor[(64, 5, 5, 48), float16] */, meta[relay.Constant][22] /* ty=Tensor[(64), float16] */, meta[relay.Constant][23] /* ty=Tensor[(64), float16] */) /* ty=Tensor[(32, 35, 35, 64), float16] */;
  %130 = %121(%120, meta[relay.Constant][30] /* ty=Tensor[(96, 3, 3, 96), float16] */, meta[relay.Constant][31] /* ty=Tensor[(96), float16] */, meta[relay.Constant][32] /* ty=Tensor[(96), float16] */) /* ty=Tensor[(32, 35, 35, 96), float16] */;
  %131 = %127(%126, meta[relay.Constant][33] /* ty=Tensor[(32, 1, 1, 192), float16] */, meta[relay.Constant][34] /* ty=Tensor[(32), float16] */, meta[relay.Constant][35] /* ty=Tensor[(32), float16] */) /* ty=Tensor[(32, 35, 35, 32), float16] */;
  %132 = fn (%p026: Tensor[(32, 35, 35, 64), float16] /* ty=Tensor[(32, 35, 35, 64), float16] */, %p124: Tensor[(32, 35, 35, 64), float16] /* ty=Tensor[(32, 35, 35, 64), float16] */, %p224: Tensor[(32, 35, 35, 96), float16] /* ty=Tensor[(32, 35, 35, 96), float16] */, %p321: Tensor[(32, 35, 35, 32), float16] /* ty=Tensor[(32, 35, 35, 32), float16] */, Primitive=1) -> Tensor[(32, 35, 35, 256), float16] {
    %62 = (%p026, %p124, %p224, %p321) /* ty=(Tensor[(32, 35, 35, 64), float16], Tensor[(32, 35, 35, 64), float16], Tensor[(32, 35, 35, 96), float16], Tensor[(32, 35, 35, 32), float16]) span=aten::cat_0:0:0 */;
    concatenate(%62, axis=3) /* ty=Tensor[(32, 35, 35, 256), float16] */
  } /* ty=fn (Tensor[(32, 35, 35, 64), float16], Tensor[(32, 35, 35, 64), float16], Tensor[(32, 35, 35, 96), float16], Tensor[(32, 35, 35, 32), float16]) -> Tensor[(32, 35, 35, 256), float16] */;
  %133 = %132(%128, %129, %130, %131) /* ty=Tensor[(32, 35, 35, 256), float16] */;
  %134 = fn (%p025: Tensor[(32, 35, 35, 256), float16] /* ty=Tensor[(32, 35, 35, 256), float16] */, %p123: Tensor[(64, 1, 1, 256), float16] /* ty=Tensor[(64, 1, 1, 256), float16] */, %p223: Tensor[(64), float16] /* ty=Tensor[(64), float16] */, %p320: Tensor[(64), float16] /* ty=Tensor[(64), float16] */, Primitive=1) -> Tensor[(32, 35, 35, 64), float16] {
    %59 = nn.conv2d(%p025, %p123, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 35, 35, 64), float16] */;
    %60 = multiply(%59, %p223) /* ty=Tensor[(32, 35, 35, 64), float16] */;
    %61 = add(%60, %p320) /* ty=Tensor[(32, 35, 35, 64), float16] */;
    nn.relu(%61) /* ty=Tensor[(32, 35, 35, 64), float16] */
  } /* ty=fn (Tensor[(32, 35, 35, 256), float16], Tensor[(64, 1, 1, 256), float16], Tensor[(64), float16], Tensor[(64), float16]) -> Tensor[(32, 35, 35, 64), float16] */;
  %141 = fn (%p044: Tensor[(32, 35, 35, 256), float16] /* ty=Tensor[(32, 35, 35, 256), float16] */, %p138: Tensor[(48, 1, 1, 256), float16] /* ty=Tensor[(48, 1, 1, 256), float16] */, %p238: Tensor[(48), float16] /* ty=Tensor[(48), float16] */, %p335: Tensor[(48), float16] /* ty=Tensor[(48), float16] */, Primitive=1) -> Tensor[(32, 35, 35, 48), float16] {
    %138 = nn.conv2d(%p044, %p138, padding=[0, 0, 0, 0], channels=48, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 35, 35, 48), float16] */;
    %139 = multiply(%138, %p238) /* ty=Tensor[(32, 35, 35, 48), float16] */;
    %140 = add(%139, %p335) /* ty=Tensor[(32, 35, 35, 48), float16] */;
    nn.relu(%140) /* ty=Tensor[(32, 35, 35, 48), float16] */
  } /* ty=fn (Tensor[(32, 35, 35, 256), float16], Tensor[(48, 1, 1, 256), float16], Tensor[(48), float16], Tensor[(48), float16]) -> Tensor[(32, 35, 35, 48), float16] */;
  %142 = %141(%133, meta[relay.Constant][39] /* ty=Tensor[(48, 1, 1, 256), float16] */, meta[relay.Constant][40] /* ty=Tensor[(48), float16] */, meta[relay.Constant][41] /* ty=Tensor[(48), float16] */) /* ty=Tensor[(32, 35, 35, 48), float16] */;
  %143 = fn (%p043: Tensor[(32, 35, 35, 48), float16] /* ty=Tensor[(32, 35, 35, 48), float16] */, %p137: Tensor[(64, 5, 5, 48), float16] /* ty=Tensor[(64, 5, 5, 48), float16] */, %p237: Tensor[(64), float16] /* ty=Tensor[(64), float16] */, %p334: Tensor[(64), float16] /* ty=Tensor[(64), float16] */, Primitive=1) -> Tensor[(32, 35, 35, 64), float16] {
    %135 = nn.conv2d(%p043, %p137, padding=[2, 2, 2, 2], channels=64, kernel_size=[5, 5], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 35, 35, 64), float16] */;
    %136 = multiply(%135, %p237) /* ty=Tensor[(32, 35, 35, 64), float16] */;
    %137 = add(%136, %p334) /* ty=Tensor[(32, 35, 35, 64), float16] */;
    nn.relu(%137) /* ty=Tensor[(32, 35, 35, 64), float16] */
  } /* ty=fn (Tensor[(32, 35, 35, 48), float16], Tensor[(64, 5, 5, 48), float16], Tensor[(64), float16], Tensor[(64), float16]) -> Tensor[(32, 35, 35, 64), float16] */;
  %153 = fn (%p047: Tensor[(32, 35, 35, 256), float16] /* ty=Tensor[(32, 35, 35, 256), float16] */, %p141: Tensor[(64, 1, 1, 256), float16] /* ty=Tensor[(64, 1, 1, 256), float16] */, %p241: Tensor[(64), float16] /* ty=Tensor[(64), float16] */, %p338: Tensor[(64), float16] /* ty=Tensor[(64), float16] */, Primitive=1) -> Tensor[(32, 35, 35, 64), float16] {
    %150 = nn.conv2d(%p047, %p141, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 35, 35, 64), float16] */;
    %151 = multiply(%150, %p241) /* ty=Tensor[(32, 35, 35, 64), float16] */;
    %152 = add(%151, %p338) /* ty=Tensor[(32, 35, 35, 64), float16] */;
    nn.relu(%152) /* ty=Tensor[(32, 35, 35, 64), float16] */
  } /* ty=fn (Tensor[(32, 35, 35, 256), float16], Tensor[(64, 1, 1, 256), float16], Tensor[(64), float16], Tensor[(64), float16]) -> Tensor[(32, 35, 35, 64), float16] */;
  %154 = %153(%133, meta[relay.Constant][45] /* ty=Tensor[(64, 1, 1, 256), float16] */, meta[relay.Constant][46] /* ty=Tensor[(64), float16] */, meta[relay.Constant][47] /* ty=Tensor[(64), float16] */) /* ty=Tensor[(32, 35, 35, 64), float16] */;
  %155 = fn (%p046: Tensor[(32, 35, 35, 64), float16] /* ty=Tensor[(32, 35, 35, 64), float16] */, %p140: Tensor[(96, 3, 3, 64), float16] /* ty=Tensor[(96, 3, 3, 64), float16] */, %p240: Tensor[(96), float16] /* ty=Tensor[(96), float16] */, %p337: Tensor[(96), float16] /* ty=Tensor[(96), float16] */, Primitive=1) -> Tensor[(32, 35, 35, 96), float16] {
    %147 = nn.conv2d(%p046, %p140, padding=[1, 1, 1, 1], channels=96, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 35, 35, 96), float16] */;
    %148 = multiply(%147, %p240) /* ty=Tensor[(32, 35, 35, 96), float16] */;
    %149 = add(%148, %p337) /* ty=Tensor[(32, 35, 35, 96), float16] */;
    nn.relu(%149) /* ty=Tensor[(32, 35, 35, 96), float16] */
  } /* ty=fn (Tensor[(32, 35, 35, 64), float16], Tensor[(96, 3, 3, 64), float16], Tensor[(96), float16], Tensor[(96), float16]) -> Tensor[(32, 35, 35, 96), float16] */;
  %156 = %155(%154, meta[relay.Constant][48] /* ty=Tensor[(96, 3, 3, 64), float16] */, meta[relay.Constant][49] /* ty=Tensor[(96), float16] */, meta[relay.Constant][50] /* ty=Tensor[(96), float16] */) /* ty=Tensor[(32, 35, 35, 96), float16] */;
  %157 = fn (%p045: Tensor[(32, 35, 35, 96), float16] /* ty=Tensor[(32, 35, 35, 96), float16] */, %p139: Tensor[(96, 3, 3, 96), float16] /* ty=Tensor[(96, 3, 3, 96), float16] */, %p239: Tensor[(96), float16] /* ty=Tensor[(96), float16] */, %p336: Tensor[(96), float16] /* ty=Tensor[(96), float16] */, Primitive=1) -> Tensor[(32, 35, 35, 96), float16] {
    %144 = nn.conv2d(%p045, %p139, padding=[1, 1, 1, 1], channels=96, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 35, 35, 96), float16] */;
    %145 = multiply(%144, %p239) /* ty=Tensor[(32, 35, 35, 96), float16] */;
    %146 = add(%145, %p336) /* ty=Tensor[(32, 35, 35, 96), float16] */;
    nn.relu(%146) /* ty=Tensor[(32, 35, 35, 96), float16] */
  } /* ty=fn (Tensor[(32, 35, 35, 96), float16], Tensor[(96, 3, 3, 96), float16], Tensor[(96), float16], Tensor[(96), float16]) -> Tensor[(32, 35, 35, 96), float16] */;
  %161 = fn (%p049: Tensor[(32, 35, 35, 256), float16] /* ty=Tensor[(32, 35, 35, 256), float16] */, Primitive=1) -> Tensor[(32, 35, 35, 256), float16] {
    nn.avg_pool2d(%p049, pool_size=[3, 3], padding=[1, 1, 1, 1], layout="NHWC", out_layout="NHWC", count_include_pad=True) /* ty=Tensor[(32, 35, 35, 256), float16] */
  } /* ty=fn (Tensor[(32, 35, 35, 256), float16]) -> Tensor[(32, 35, 35, 256), float16] */;
  %162 = %161(%133) /* ty=Tensor[(32, 35, 35, 256), float16] */;
  %163 = fn (%p048: Tensor[(32, 35, 35, 256), float16] /* ty=Tensor[(32, 35, 35, 256), float16] */, %p142: Tensor[(64, 1, 1, 256), float16] /* ty=Tensor[(64, 1, 1, 256), float16] */, %p242: Tensor[(64), float16] /* ty=Tensor[(64), float16] */, %p339: Tensor[(64), float16] /* ty=Tensor[(64), float16] */, Primitive=1) -> Tensor[(32, 35, 35, 64), float16] {
    %158 = nn.conv2d(%p048, %p142, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 35, 35, 64), float16] */;
    %159 = multiply(%158, %p242) /* ty=Tensor[(32, 35, 35, 64), float16] */;
    %160 = add(%159, %p339) /* ty=Tensor[(32, 35, 35, 64), float16] */;
    nn.relu(%160) /* ty=Tensor[(32, 35, 35, 64), float16] */
  } /* ty=fn (Tensor[(32, 35, 35, 256), float16], Tensor[(64, 1, 1, 256), float16], Tensor[(64), float16], Tensor[(64), float16]) -> Tensor[(32, 35, 35, 64), float16] */;
  %164 = %134(%133, meta[relay.Constant][36] /* ty=Tensor[(64, 1, 1, 256), float16] */, meta[relay.Constant][37] /* ty=Tensor[(64), float16] */, meta[relay.Constant][38] /* ty=Tensor[(64), float16] */) /* ty=Tensor[(32, 35, 35, 64), float16] */;
  %165 = %143(%142, meta[relay.Constant][42] /* ty=Tensor[(64, 5, 5, 48), float16] */, meta[relay.Constant][43] /* ty=Tensor[(64), float16] */, meta[relay.Constant][44] /* ty=Tensor[(64), float16] */) /* ty=Tensor[(32, 35, 35, 64), float16] */;
  %166 = %157(%156, meta[relay.Constant][51] /* ty=Tensor[(96, 3, 3, 96), float16] */, meta[relay.Constant][52] /* ty=Tensor[(96), float16] */, meta[relay.Constant][53] /* ty=Tensor[(96), float16] */) /* ty=Tensor[(32, 35, 35, 96), float16] */;
  %167 = %163(%162, meta[relay.Constant][54] /* ty=Tensor[(64, 1, 1, 256), float16] */, meta[relay.Constant][55] /* ty=Tensor[(64), float16] */, meta[relay.Constant][56] /* ty=Tensor[(64), float16] */) /* ty=Tensor[(32, 35, 35, 64), float16] */;
  %168 = fn (%p024: Tensor[(32, 35, 35, 64), float16] /* ty=Tensor[(32, 35, 35, 64), float16] */, %p122: Tensor[(32, 35, 35, 64), float16] /* ty=Tensor[(32, 35, 35, 64), float16] */, %p222: Tensor[(32, 35, 35, 96), float16] /* ty=Tensor[(32, 35, 35, 96), float16] */, %p319: Tensor[(32, 35, 35, 64), float16] /* ty=Tensor[(32, 35, 35, 64), float16] */, Primitive=1) -> Tensor[(32, 35, 35, 288), float16] {
    %58 = (%p024, %p122, %p222, %p319) /* ty=(Tensor[(32, 35, 35, 64), float16], Tensor[(32, 35, 35, 64), float16], Tensor[(32, 35, 35, 96), float16], Tensor[(32, 35, 35, 64), float16]) span=aten::cat_1:0:0 */;
    concatenate(%58, axis=3) /* ty=Tensor[(32, 35, 35, 288), float16] */
  } /* ty=fn (Tensor[(32, 35, 35, 64), float16], Tensor[(32, 35, 35, 64), float16], Tensor[(32, 35, 35, 96), float16], Tensor[(32, 35, 35, 64), float16]) -> Tensor[(32, 35, 35, 288), float16] */;
  %169 = %168(%164, %165, %166, %167) /* ty=Tensor[(32, 35, 35, 288), float16] */;
  %170 = fn (%p023: Tensor[(32, 35, 35, 288), float16] /* ty=Tensor[(32, 35, 35, 288), float16] */, %p121: Tensor[(64, 1, 1, 288), float16] /* ty=Tensor[(64, 1, 1, 288), float16] */, %p221: Tensor[(64), float16] /* ty=Tensor[(64), float16] */, %p318: Tensor[(64), float16] /* ty=Tensor[(64), float16] */, Primitive=1) -> Tensor[(32, 35, 35, 64), float16] {
    %55 = nn.conv2d(%p023, %p121, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 35, 35, 64), float16] */;
    %56 = multiply(%55, %p221) /* ty=Tensor[(32, 35, 35, 64), float16] */;
    %57 = add(%56, %p318) /* ty=Tensor[(32, 35, 35, 64), float16] */;
    nn.relu(%57) /* ty=Tensor[(32, 35, 35, 64), float16] */
  } /* ty=fn (Tensor[(32, 35, 35, 288), float16], Tensor[(64, 1, 1, 288), float16], Tensor[(64), float16], Tensor[(64), float16]) -> Tensor[(32, 35, 35, 64), float16] */;
  %177 = fn (%p051: Tensor[(32, 35, 35, 288), float16] /* ty=Tensor[(32, 35, 35, 288), float16] */, %p144: Tensor[(48, 1, 1, 288), float16] /* ty=Tensor[(48, 1, 1, 288), float16] */, %p244: Tensor[(48), float16] /* ty=Tensor[(48), float16] */, %p341: Tensor[(48), float16] /* ty=Tensor[(48), float16] */, Primitive=1) -> Tensor[(32, 35, 35, 48), float16] {
    %174 = nn.conv2d(%p051, %p144, padding=[0, 0, 0, 0], channels=48, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 35, 35, 48), float16] */;
    %175 = multiply(%174, %p244) /* ty=Tensor[(32, 35, 35, 48), float16] */;
    %176 = add(%175, %p341) /* ty=Tensor[(32, 35, 35, 48), float16] */;
    nn.relu(%176) /* ty=Tensor[(32, 35, 35, 48), float16] */
  } /* ty=fn (Tensor[(32, 35, 35, 288), float16], Tensor[(48, 1, 1, 288), float16], Tensor[(48), float16], Tensor[(48), float16]) -> Tensor[(32, 35, 35, 48), float16] */;
  %178 = %177(%169, meta[relay.Constant][60] /* ty=Tensor[(48, 1, 1, 288), float16] */, meta[relay.Constant][61] /* ty=Tensor[(48), float16] */, meta[relay.Constant][62] /* ty=Tensor[(48), float16] */) /* ty=Tensor[(32, 35, 35, 48), float16] */;
  %179 = fn (%p050: Tensor[(32, 35, 35, 48), float16] /* ty=Tensor[(32, 35, 35, 48), float16] */, %p143: Tensor[(64, 5, 5, 48), float16] /* ty=Tensor[(64, 5, 5, 48), float16] */, %p243: Tensor[(64), float16] /* ty=Tensor[(64), float16] */, %p340: Tensor[(64), float16] /* ty=Tensor[(64), float16] */, Primitive=1) -> Tensor[(32, 35, 35, 64), float16] {
    %171 = nn.conv2d(%p050, %p143, padding=[2, 2, 2, 2], channels=64, kernel_size=[5, 5], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 35, 35, 64), float16] */;
    %172 = multiply(%171, %p243) /* ty=Tensor[(32, 35, 35, 64), float16] */;
    %173 = add(%172, %p340) /* ty=Tensor[(32, 35, 35, 64), float16] */;
    nn.relu(%173) /* ty=Tensor[(32, 35, 35, 64), float16] */
  } /* ty=fn (Tensor[(32, 35, 35, 48), float16], Tensor[(64, 5, 5, 48), float16], Tensor[(64), float16], Tensor[(64), float16]) -> Tensor[(32, 35, 35, 64), float16] */;
  %189 = fn (%p054: Tensor[(32, 35, 35, 288), float16] /* ty=Tensor[(32, 35, 35, 288), float16] */, %p147: Tensor[(64, 1, 1, 288), float16] /* ty=Tensor[(64, 1, 1, 288), float16] */, %p247: Tensor[(64), float16] /* ty=Tensor[(64), float16] */, %p344: Tensor[(64), float16] /* ty=Tensor[(64), float16] */, Primitive=1) -> Tensor[(32, 35, 35, 64), float16] {
    %186 = nn.conv2d(%p054, %p147, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 35, 35, 64), float16] */;
    %187 = multiply(%186, %p247) /* ty=Tensor[(32, 35, 35, 64), float16] */;
    %188 = add(%187, %p344) /* ty=Tensor[(32, 35, 35, 64), float16] */;
    nn.relu(%188) /* ty=Tensor[(32, 35, 35, 64), float16] */
  } /* ty=fn (Tensor[(32, 35, 35, 288), float16], Tensor[(64, 1, 1, 288), float16], Tensor[(64), float16], Tensor[(64), float16]) -> Tensor[(32, 35, 35, 64), float16] */;
  %190 = %189(%169, meta[relay.Constant][66] /* ty=Tensor[(64, 1, 1, 288), float16] */, meta[relay.Constant][67] /* ty=Tensor[(64), float16] */, meta[relay.Constant][68] /* ty=Tensor[(64), float16] */) /* ty=Tensor[(32, 35, 35, 64), float16] */;
  %191 = fn (%p053: Tensor[(32, 35, 35, 64), float16] /* ty=Tensor[(32, 35, 35, 64), float16] */, %p146: Tensor[(96, 3, 3, 64), float16] /* ty=Tensor[(96, 3, 3, 64), float16] */, %p246: Tensor[(96), float16] /* ty=Tensor[(96), float16] */, %p343: Tensor[(96), float16] /* ty=Tensor[(96), float16] */, Primitive=1) -> Tensor[(32, 35, 35, 96), float16] {
    %183 = nn.conv2d(%p053, %p146, padding=[1, 1, 1, 1], channels=96, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 35, 35, 96), float16] */;
    %184 = multiply(%183, %p246) /* ty=Tensor[(32, 35, 35, 96), float16] */;
    %185 = add(%184, %p343) /* ty=Tensor[(32, 35, 35, 96), float16] */;
    nn.relu(%185) /* ty=Tensor[(32, 35, 35, 96), float16] */
  } /* ty=fn (Tensor[(32, 35, 35, 64), float16], Tensor[(96, 3, 3, 64), float16], Tensor[(96), float16], Tensor[(96), float16]) -> Tensor[(32, 35, 35, 96), float16] */;
  %192 = %191(%190, meta[relay.Constant][69] /* ty=Tensor[(96, 3, 3, 64), float16] */, meta[relay.Constant][70] /* ty=Tensor[(96), float16] */, meta[relay.Constant][71] /* ty=Tensor[(96), float16] */) /* ty=Tensor[(32, 35, 35, 96), float16] */;
  %193 = fn (%p052: Tensor[(32, 35, 35, 96), float16] /* ty=Tensor[(32, 35, 35, 96), float16] */, %p145: Tensor[(96, 3, 3, 96), float16] /* ty=Tensor[(96, 3, 3, 96), float16] */, %p245: Tensor[(96), float16] /* ty=Tensor[(96), float16] */, %p342: Tensor[(96), float16] /* ty=Tensor[(96), float16] */, Primitive=1) -> Tensor[(32, 35, 35, 96), float16] {
    %180 = nn.conv2d(%p052, %p145, padding=[1, 1, 1, 1], channels=96, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 35, 35, 96), float16] */;
    %181 = multiply(%180, %p245) /* ty=Tensor[(32, 35, 35, 96), float16] */;
    %182 = add(%181, %p342) /* ty=Tensor[(32, 35, 35, 96), float16] */;
    nn.relu(%182) /* ty=Tensor[(32, 35, 35, 96), float16] */
  } /* ty=fn (Tensor[(32, 35, 35, 96), float16], Tensor[(96, 3, 3, 96), float16], Tensor[(96), float16], Tensor[(96), float16]) -> Tensor[(32, 35, 35, 96), float16] */;
  %197 = fn (%p056: Tensor[(32, 35, 35, 288), float16] /* ty=Tensor[(32, 35, 35, 288), float16] */, Primitive=1) -> Tensor[(32, 35, 35, 288), float16] {
    nn.avg_pool2d(%p056, pool_size=[3, 3], padding=[1, 1, 1, 1], layout="NHWC", out_layout="NHWC", count_include_pad=True) /* ty=Tensor[(32, 35, 35, 288), float16] */
  } /* ty=fn (Tensor[(32, 35, 35, 288), float16]) -> Tensor[(32, 35, 35, 288), float16] */;
  %198 = %197(%169) /* ty=Tensor[(32, 35, 35, 288), float16] */;
  %199 = fn (%p055: Tensor[(32, 35, 35, 288), float16] /* ty=Tensor[(32, 35, 35, 288), float16] */, %p148: Tensor[(64, 1, 1, 288), float16] /* ty=Tensor[(64, 1, 1, 288), float16] */, %p248: Tensor[(64), float16] /* ty=Tensor[(64), float16] */, %p345: Tensor[(64), float16] /* ty=Tensor[(64), float16] */, Primitive=1) -> Tensor[(32, 35, 35, 64), float16] {
    %194 = nn.conv2d(%p055, %p148, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 35, 35, 64), float16] */;
    %195 = multiply(%194, %p248) /* ty=Tensor[(32, 35, 35, 64), float16] */;
    %196 = add(%195, %p345) /* ty=Tensor[(32, 35, 35, 64), float16] */;
    nn.relu(%196) /* ty=Tensor[(32, 35, 35, 64), float16] */
  } /* ty=fn (Tensor[(32, 35, 35, 288), float16], Tensor[(64, 1, 1, 288), float16], Tensor[(64), float16], Tensor[(64), float16]) -> Tensor[(32, 35, 35, 64), float16] */;
  %200 = %170(%169, meta[relay.Constant][57] /* ty=Tensor[(64, 1, 1, 288), float16] */, meta[relay.Constant][58] /* ty=Tensor[(64), float16] */, meta[relay.Constant][59] /* ty=Tensor[(64), float16] */) /* ty=Tensor[(32, 35, 35, 64), float16] */;
  %201 = %179(%178, meta[relay.Constant][63] /* ty=Tensor[(64, 5, 5, 48), float16] */, meta[relay.Constant][64] /* ty=Tensor[(64), float16] */, meta[relay.Constant][65] /* ty=Tensor[(64), float16] */) /* ty=Tensor[(32, 35, 35, 64), float16] */;
  %202 = %193(%192, meta[relay.Constant][72] /* ty=Tensor[(96, 3, 3, 96), float16] */, meta[relay.Constant][73] /* ty=Tensor[(96), float16] */, meta[relay.Constant][74] /* ty=Tensor[(96), float16] */) /* ty=Tensor[(32, 35, 35, 96), float16] */;
  %203 = %199(%198, meta[relay.Constant][75] /* ty=Tensor[(64, 1, 1, 288), float16] */, meta[relay.Constant][76] /* ty=Tensor[(64), float16] */, meta[relay.Constant][77] /* ty=Tensor[(64), float16] */) /* ty=Tensor[(32, 35, 35, 64), float16] */;
  %204 = fn (%p022: Tensor[(32, 35, 35, 64), float16] /* ty=Tensor[(32, 35, 35, 64), float16] */, %p120: Tensor[(32, 35, 35, 64), float16] /* ty=Tensor[(32, 35, 35, 64), float16] */, %p220: Tensor[(32, 35, 35, 96), float16] /* ty=Tensor[(32, 35, 35, 96), float16] */, %p317: Tensor[(32, 35, 35, 64), float16] /* ty=Tensor[(32, 35, 35, 64), float16] */, Primitive=1) -> Tensor[(32, 35, 35, 288), float16] {
    %54 = (%p022, %p120, %p220, %p317) /* ty=(Tensor[(32, 35, 35, 64), float16], Tensor[(32, 35, 35, 64), float16], Tensor[(32, 35, 35, 96), float16], Tensor[(32, 35, 35, 64), float16]) span=aten::cat_2:0:0 */;
    concatenate(%54, axis=3) /* ty=Tensor[(32, 35, 35, 288), float16] */
  } /* ty=fn (Tensor[(32, 35, 35, 64), float16], Tensor[(32, 35, 35, 64), float16], Tensor[(32, 35, 35, 96), float16], Tensor[(32, 35, 35, 64), float16]) -> Tensor[(32, 35, 35, 288), float16] */;
  %205 = %204(%200, %201, %202, %203) /* ty=Tensor[(32, 35, 35, 288), float16] */;
  %206 = fn (%p021: Tensor[(32, 35, 35, 288), float16] /* ty=Tensor[(32, 35, 35, 288), float16] */, %p119: Tensor[(384, 3, 3, 288), float16] /* ty=Tensor[(384, 3, 3, 288), float16] */, %p219: Tensor[(384), float16] /* ty=Tensor[(384), float16] */, %p316: Tensor[(384), float16] /* ty=Tensor[(384), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 384), float16] {
    %51 = nn.conv2d(%p021, %p119, strides=[2, 2], padding=[0, 0, 0, 0], channels=384, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 384), float16] */;
    %52 = multiply(%51, %p219) /* ty=Tensor[(32, 17, 17, 384), float16] */;
    %53 = add(%52, %p316) /* ty=Tensor[(32, 17, 17, 384), float16] */;
    nn.relu(%53) /* ty=Tensor[(32, 17, 17, 384), float16] */
  } /* ty=fn (Tensor[(32, 35, 35, 288), float16], Tensor[(384, 3, 3, 288), float16], Tensor[(384), float16], Tensor[(384), float16]) -> Tensor[(32, 17, 17, 384), float16] */;
  %216 = fn (%p059: Tensor[(32, 35, 35, 288), float16] /* ty=Tensor[(32, 35, 35, 288), float16] */, %p151: Tensor[(64, 1, 1, 288), float16] /* ty=Tensor[(64, 1, 1, 288), float16] */, %p251: Tensor[(64), float16] /* ty=Tensor[(64), float16] */, %p348: Tensor[(64), float16] /* ty=Tensor[(64), float16] */, Primitive=1) -> Tensor[(32, 35, 35, 64), float16] {
    %213 = nn.conv2d(%p059, %p151, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 35, 35, 64), float16] */;
    %214 = multiply(%213, %p251) /* ty=Tensor[(32, 35, 35, 64), float16] */;
    %215 = add(%214, %p348) /* ty=Tensor[(32, 35, 35, 64), float16] */;
    nn.relu(%215) /* ty=Tensor[(32, 35, 35, 64), float16] */
  } /* ty=fn (Tensor[(32, 35, 35, 288), float16], Tensor[(64, 1, 1, 288), float16], Tensor[(64), float16], Tensor[(64), float16]) -> Tensor[(32, 35, 35, 64), float16] */;
  %217 = %216(%205, meta[relay.Constant][81] /* ty=Tensor[(64, 1, 1, 288), float16] */, meta[relay.Constant][82] /* ty=Tensor[(64), float16] */, meta[relay.Constant][83] /* ty=Tensor[(64), float16] */) /* ty=Tensor[(32, 35, 35, 64), float16] */;
  %218 = fn (%p058: Tensor[(32, 35, 35, 64), float16] /* ty=Tensor[(32, 35, 35, 64), float16] */, %p150: Tensor[(96, 3, 3, 64), float16] /* ty=Tensor[(96, 3, 3, 64), float16] */, %p250: Tensor[(96), float16] /* ty=Tensor[(96), float16] */, %p347: Tensor[(96), float16] /* ty=Tensor[(96), float16] */, Primitive=1) -> Tensor[(32, 35, 35, 96), float16] {
    %210 = nn.conv2d(%p058, %p150, padding=[1, 1, 1, 1], channels=96, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 35, 35, 96), float16] */;
    %211 = multiply(%210, %p250) /* ty=Tensor[(32, 35, 35, 96), float16] */;
    %212 = add(%211, %p347) /* ty=Tensor[(32, 35, 35, 96), float16] */;
    nn.relu(%212) /* ty=Tensor[(32, 35, 35, 96), float16] */
  } /* ty=fn (Tensor[(32, 35, 35, 64), float16], Tensor[(96, 3, 3, 64), float16], Tensor[(96), float16], Tensor[(96), float16]) -> Tensor[(32, 35, 35, 96), float16] */;
  %219 = %218(%217, meta[relay.Constant][84] /* ty=Tensor[(96, 3, 3, 64), float16] */, meta[relay.Constant][85] /* ty=Tensor[(96), float16] */, meta[relay.Constant][86] /* ty=Tensor[(96), float16] */) /* ty=Tensor[(32, 35, 35, 96), float16] */;
  %220 = fn (%p057: Tensor[(32, 35, 35, 96), float16] /* ty=Tensor[(32, 35, 35, 96), float16] */, %p149: Tensor[(96, 3, 3, 96), float16] /* ty=Tensor[(96, 3, 3, 96), float16] */, %p249: Tensor[(96), float16] /* ty=Tensor[(96), float16] */, %p346: Tensor[(96), float16] /* ty=Tensor[(96), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 96), float16] {
    %207 = nn.conv2d(%p057, %p149, strides=[2, 2], padding=[0, 0, 0, 0], channels=96, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 96), float16] */;
    %208 = multiply(%207, %p249) /* ty=Tensor[(32, 17, 17, 96), float16] */;
    %209 = add(%208, %p346) /* ty=Tensor[(32, 17, 17, 96), float16] */;
    nn.relu(%209) /* ty=Tensor[(32, 17, 17, 96), float16] */
  } /* ty=fn (Tensor[(32, 35, 35, 96), float16], Tensor[(96, 3, 3, 96), float16], Tensor[(96), float16], Tensor[(96), float16]) -> Tensor[(32, 17, 17, 96), float16] */;
  %221 = fn (%p060: Tensor[(32, 35, 35, 288), float16] /* ty=Tensor[(32, 35, 35, 288), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 288), float16] {
    nn.max_pool2d(%p060, pool_size=[3, 3], strides=[2, 2], padding=[0, 0, 0, 0], layout="NHWC", out_layout="NHWC") /* ty=Tensor[(32, 17, 17, 288), float16] */
  } /* ty=fn (Tensor[(32, 35, 35, 288), float16]) -> Tensor[(32, 17, 17, 288), float16] */;
  %222 = %206(%205, meta[relay.Constant][78] /* ty=Tensor[(384, 3, 3, 288), float16] */, meta[relay.Constant][79] /* ty=Tensor[(384), float16] */, meta[relay.Constant][80] /* ty=Tensor[(384), float16] */) /* ty=Tensor[(32, 17, 17, 384), float16] */;
  %223 = %220(%219, meta[relay.Constant][87] /* ty=Tensor[(96, 3, 3, 96), float16] */, meta[relay.Constant][88] /* ty=Tensor[(96), float16] */, meta[relay.Constant][89] /* ty=Tensor[(96), float16] */) /* ty=Tensor[(32, 17, 17, 96), float16] */;
  %224 = %221(%205) /* ty=Tensor[(32, 17, 17, 288), float16] */;
  %225 = fn (%p020: Tensor[(32, 17, 17, 384), float16] /* ty=Tensor[(32, 17, 17, 384), float16] */, %p118: Tensor[(32, 17, 17, 96), float16] /* ty=Tensor[(32, 17, 17, 96), float16] */, %p218: Tensor[(32, 17, 17, 288), float16] /* ty=Tensor[(32, 17, 17, 288), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 768), float16] {
    %50 = (%p020, %p118, %p218) /* ty=(Tensor[(32, 17, 17, 384), float16], Tensor[(32, 17, 17, 96), float16], Tensor[(32, 17, 17, 288), float16]) span=aten::cat_3:0:0 */;
    concatenate(%50, axis=3) /* ty=Tensor[(32, 17, 17, 768), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 384), float16], Tensor[(32, 17, 17, 96), float16], Tensor[(32, 17, 17, 288), float16]) -> Tensor[(32, 17, 17, 768), float16] */;
  %226 = %225(%222, %223, %224) /* ty=Tensor[(32, 17, 17, 768), float16] */;
  %227 = fn (%p019: Tensor[(32, 17, 17, 768), float16] /* ty=Tensor[(32, 17, 17, 768), float16] */, %p117: Tensor[(192, 1, 1, 768), float16] /* ty=Tensor[(192, 1, 1, 768), float16] */, %p217: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, %p315: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 192), float16] {
    %47 = nn.conv2d(%p019, %p117, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %48 = multiply(%47, %p217) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %49 = add(%48, %p315) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    nn.relu(%49) /* ty=Tensor[(32, 17, 17, 192), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 768), float16], Tensor[(192, 1, 1, 768), float16], Tensor[(192), float16], Tensor[(192), float16]) -> Tensor[(32, 17, 17, 192), float16] */;
  %237 = fn (%p063: Tensor[(32, 17, 17, 768), float16] /* ty=Tensor[(32, 17, 17, 768), float16] */, %p154: Tensor[(128, 1, 1, 768), float16] /* ty=Tensor[(128, 1, 1, 768), float16] */, %p254: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p351: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 128), float16] {
    %234 = nn.conv2d(%p063, %p154, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 128), float16] */;
    %235 = multiply(%234, %p254) /* ty=Tensor[(32, 17, 17, 128), float16] */;
    %236 = add(%235, %p351) /* ty=Tensor[(32, 17, 17, 128), float16] */;
    nn.relu(%236) /* ty=Tensor[(32, 17, 17, 128), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 768), float16], Tensor[(128, 1, 1, 768), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 17, 17, 128), float16] */;
  %238 = %237(%226, meta[relay.Constant][93] /* ty=Tensor[(128, 1, 1, 768), float16] */, meta[relay.Constant][94] /* ty=Tensor[(128), float16] */, meta[relay.Constant][95] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 17, 17, 128), float16] */;
  %239 = fn (%p062: Tensor[(32, 17, 17, 128), float16] /* ty=Tensor[(32, 17, 17, 128), float16] */, %p153: Tensor[(128, 1, 7, 128), float16] /* ty=Tensor[(128, 1, 7, 128), float16] */, %p253: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p350: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 128), float16] {
    %231 = nn.conv2d(%p062, %p153, padding=[0, 3, 0, 3], channels=128, kernel_size=[1, 7], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 128), float16] */;
    %232 = multiply(%231, %p253) /* ty=Tensor[(32, 17, 17, 128), float16] */;
    %233 = add(%232, %p350) /* ty=Tensor[(32, 17, 17, 128), float16] */;
    nn.relu(%233) /* ty=Tensor[(32, 17, 17, 128), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 128), float16], Tensor[(128, 1, 7, 128), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 17, 17, 128), float16] */;
  %240 = %239(%238, meta[relay.Constant][96] /* ty=Tensor[(128, 1, 7, 128), float16] */, meta[relay.Constant][97] /* ty=Tensor[(128), float16] */, meta[relay.Constant][98] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 17, 17, 128), float16] */;
  %241 = fn (%p061: Tensor[(32, 17, 17, 128), float16] /* ty=Tensor[(32, 17, 17, 128), float16] */, %p152: Tensor[(192, 7, 1, 128), float16] /* ty=Tensor[(192, 7, 1, 128), float16] */, %p252: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, %p349: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 192), float16] {
    %228 = nn.conv2d(%p061, %p152, padding=[3, 0, 3, 0], channels=192, kernel_size=[7, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %229 = multiply(%228, %p252) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %230 = add(%229, %p349) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    nn.relu(%230) /* ty=Tensor[(32, 17, 17, 192), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 128), float16], Tensor[(192, 7, 1, 128), float16], Tensor[(192), float16], Tensor[(192), float16]) -> Tensor[(32, 17, 17, 192), float16] */;
  %257 = fn (%p068: Tensor[(32, 17, 17, 768), float16] /* ty=Tensor[(32, 17, 17, 768), float16] */, %p159: Tensor[(128, 1, 1, 768), float16] /* ty=Tensor[(128, 1, 1, 768), float16] */, %p259: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p356: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 128), float16] {
    %254 = nn.conv2d(%p068, %p159, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 128), float16] */;
    %255 = multiply(%254, %p259) /* ty=Tensor[(32, 17, 17, 128), float16] */;
    %256 = add(%255, %p356) /* ty=Tensor[(32, 17, 17, 128), float16] */;
    nn.relu(%256) /* ty=Tensor[(32, 17, 17, 128), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 768), float16], Tensor[(128, 1, 1, 768), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 17, 17, 128), float16] */;
  %258 = %257(%226, meta[relay.Constant][102] /* ty=Tensor[(128, 1, 1, 768), float16] */, meta[relay.Constant][103] /* ty=Tensor[(128), float16] */, meta[relay.Constant][104] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 17, 17, 128), float16] */;
  %259 = fn (%p067: Tensor[(32, 17, 17, 128), float16] /* ty=Tensor[(32, 17, 17, 128), float16] */, %p158: Tensor[(128, 7, 1, 128), float16] /* ty=Tensor[(128, 7, 1, 128), float16] */, %p258: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p355: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 128), float16] {
    %251 = nn.conv2d(%p067, %p158, padding=[3, 0, 3, 0], channels=128, kernel_size=[7, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 128), float16] */;
    %252 = multiply(%251, %p258) /* ty=Tensor[(32, 17, 17, 128), float16] */;
    %253 = add(%252, %p355) /* ty=Tensor[(32, 17, 17, 128), float16] */;
    nn.relu(%253) /* ty=Tensor[(32, 17, 17, 128), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 128), float16], Tensor[(128, 7, 1, 128), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 17, 17, 128), float16] */;
  %260 = %259(%258, meta[relay.Constant][105] /* ty=Tensor[(128, 7, 1, 128), float16] */, meta[relay.Constant][106] /* ty=Tensor[(128), float16] */, meta[relay.Constant][107] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 17, 17, 128), float16] */;
  %261 = fn (%p066: Tensor[(32, 17, 17, 128), float16] /* ty=Tensor[(32, 17, 17, 128), float16] */, %p157: Tensor[(128, 1, 7, 128), float16] /* ty=Tensor[(128, 1, 7, 128), float16] */, %p257: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p354: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 128), float16] {
    %248 = nn.conv2d(%p066, %p157, padding=[0, 3, 0, 3], channels=128, kernel_size=[1, 7], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 128), float16] */;
    %249 = multiply(%248, %p257) /* ty=Tensor[(32, 17, 17, 128), float16] */;
    %250 = add(%249, %p354) /* ty=Tensor[(32, 17, 17, 128), float16] */;
    nn.relu(%250) /* ty=Tensor[(32, 17, 17, 128), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 128), float16], Tensor[(128, 1, 7, 128), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 17, 17, 128), float16] */;
  %262 = %261(%260, meta[relay.Constant][108] /* ty=Tensor[(128, 1, 7, 128), float16] */, meta[relay.Constant][109] /* ty=Tensor[(128), float16] */, meta[relay.Constant][110] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 17, 17, 128), float16] */;
  %263 = fn (%p065: Tensor[(32, 17, 17, 128), float16] /* ty=Tensor[(32, 17, 17, 128), float16] */, %p156: Tensor[(128, 7, 1, 128), float16] /* ty=Tensor[(128, 7, 1, 128), float16] */, %p256: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, %p353: Tensor[(128), float16] /* ty=Tensor[(128), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 128), float16] {
    %245 = nn.conv2d(%p065, %p156, padding=[3, 0, 3, 0], channels=128, kernel_size=[7, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 128), float16] */;
    %246 = multiply(%245, %p256) /* ty=Tensor[(32, 17, 17, 128), float16] */;
    %247 = add(%246, %p353) /* ty=Tensor[(32, 17, 17, 128), float16] */;
    nn.relu(%247) /* ty=Tensor[(32, 17, 17, 128), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 128), float16], Tensor[(128, 7, 1, 128), float16], Tensor[(128), float16], Tensor[(128), float16]) -> Tensor[(32, 17, 17, 128), float16] */;
  %264 = %263(%262, meta[relay.Constant][111] /* ty=Tensor[(128, 7, 1, 128), float16] */, meta[relay.Constant][112] /* ty=Tensor[(128), float16] */, meta[relay.Constant][113] /* ty=Tensor[(128), float16] */) /* ty=Tensor[(32, 17, 17, 128), float16] */;
  %265 = fn (%p064: Tensor[(32, 17, 17, 128), float16] /* ty=Tensor[(32, 17, 17, 128), float16] */, %p155: Tensor[(192, 1, 7, 128), float16] /* ty=Tensor[(192, 1, 7, 128), float16] */, %p255: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, %p352: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 192), float16] {
    %242 = nn.conv2d(%p064, %p155, padding=[0, 3, 0, 3], channels=192, kernel_size=[1, 7], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %243 = multiply(%242, %p255) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %244 = add(%243, %p352) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    nn.relu(%244) /* ty=Tensor[(32, 17, 17, 192), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 128), float16], Tensor[(192, 1, 7, 128), float16], Tensor[(192), float16], Tensor[(192), float16]) -> Tensor[(32, 17, 17, 192), float16] */;
  %269 = fn (%p070: Tensor[(32, 17, 17, 768), float16] /* ty=Tensor[(32, 17, 17, 768), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 768), float16] {
    nn.avg_pool2d(%p070, pool_size=[3, 3], padding=[1, 1, 1, 1], layout="NHWC", out_layout="NHWC", count_include_pad=True) /* ty=Tensor[(32, 17, 17, 768), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 768), float16]) -> Tensor[(32, 17, 17, 768), float16] */;
  %270 = %269(%226) /* ty=Tensor[(32, 17, 17, 768), float16] */;
  %271 = fn (%p069: Tensor[(32, 17, 17, 768), float16] /* ty=Tensor[(32, 17, 17, 768), float16] */, %p160: Tensor[(192, 1, 1, 768), float16] /* ty=Tensor[(192, 1, 1, 768), float16] */, %p260: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, %p357: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 192), float16] {
    %266 = nn.conv2d(%p069, %p160, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %267 = multiply(%266, %p260) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %268 = add(%267, %p357) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    nn.relu(%268) /* ty=Tensor[(32, 17, 17, 192), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 768), float16], Tensor[(192, 1, 1, 768), float16], Tensor[(192), float16], Tensor[(192), float16]) -> Tensor[(32, 17, 17, 192), float16] */;
  %272 = %227(%226, meta[relay.Constant][90] /* ty=Tensor[(192, 1, 1, 768), float16] */, meta[relay.Constant][91] /* ty=Tensor[(192), float16] */, meta[relay.Constant][92] /* ty=Tensor[(192), float16] */) /* ty=Tensor[(32, 17, 17, 192), float16] */;
  %273 = %241(%240, meta[relay.Constant][99] /* ty=Tensor[(192, 7, 1, 128), float16] */, meta[relay.Constant][100] /* ty=Tensor[(192), float16] */, meta[relay.Constant][101] /* ty=Tensor[(192), float16] */) /* ty=Tensor[(32, 17, 17, 192), float16] */;
  %274 = %265(%264, meta[relay.Constant][114] /* ty=Tensor[(192, 1, 7, 128), float16] */, meta[relay.Constant][115] /* ty=Tensor[(192), float16] */, meta[relay.Constant][116] /* ty=Tensor[(192), float16] */) /* ty=Tensor[(32, 17, 17, 192), float16] */;
  %275 = %271(%270, meta[relay.Constant][117] /* ty=Tensor[(192, 1, 1, 768), float16] */, meta[relay.Constant][118] /* ty=Tensor[(192), float16] */, meta[relay.Constant][119] /* ty=Tensor[(192), float16] */) /* ty=Tensor[(32, 17, 17, 192), float16] */;
  %276 = fn (%p018: Tensor[(32, 17, 17, 192), float16] /* ty=Tensor[(32, 17, 17, 192), float16] */, %p116: Tensor[(32, 17, 17, 192), float16] /* ty=Tensor[(32, 17, 17, 192), float16] */, %p216: Tensor[(32, 17, 17, 192), float16] /* ty=Tensor[(32, 17, 17, 192), float16] */, %p314: Tensor[(32, 17, 17, 192), float16] /* ty=Tensor[(32, 17, 17, 192), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 768), float16] {
    %46 = (%p018, %p116, %p216, %p314) /* ty=(Tensor[(32, 17, 17, 192), float16], Tensor[(32, 17, 17, 192), float16], Tensor[(32, 17, 17, 192), float16], Tensor[(32, 17, 17, 192), float16]) span=aten::cat_4:0:0 */;
    concatenate(%46, axis=3) /* ty=Tensor[(32, 17, 17, 768), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 192), float16], Tensor[(32, 17, 17, 192), float16], Tensor[(32, 17, 17, 192), float16], Tensor[(32, 17, 17, 192), float16]) -> Tensor[(32, 17, 17, 768), float16] */;
  %277 = %276(%272, %273, %274, %275) /* ty=Tensor[(32, 17, 17, 768), float16] */;
  %278 = fn (%p017: Tensor[(32, 17, 17, 768), float16] /* ty=Tensor[(32, 17, 17, 768), float16] */, %p115: Tensor[(192, 1, 1, 768), float16] /* ty=Tensor[(192, 1, 1, 768), float16] */, %p215: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, %p313: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 192), float16] {
    %43 = nn.conv2d(%p017, %p115, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %44 = multiply(%43, %p215) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %45 = add(%44, %p313) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    nn.relu(%45) /* ty=Tensor[(32, 17, 17, 192), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 768), float16], Tensor[(192, 1, 1, 768), float16], Tensor[(192), float16], Tensor[(192), float16]) -> Tensor[(32, 17, 17, 192), float16] */;
  %288 = fn (%p073: Tensor[(32, 17, 17, 768), float16] /* ty=Tensor[(32, 17, 17, 768), float16] */, %p163: Tensor[(160, 1, 1, 768), float16] /* ty=Tensor[(160, 1, 1, 768), float16] */, %p263: Tensor[(160), float16] /* ty=Tensor[(160), float16] */, %p360: Tensor[(160), float16] /* ty=Tensor[(160), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 160), float16] {
    %285 = nn.conv2d(%p073, %p163, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 160), float16] */;
    %286 = multiply(%285, %p263) /* ty=Tensor[(32, 17, 17, 160), float16] */;
    %287 = add(%286, %p360) /* ty=Tensor[(32, 17, 17, 160), float16] */;
    nn.relu(%287) /* ty=Tensor[(32, 17, 17, 160), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 768), float16], Tensor[(160, 1, 1, 768), float16], Tensor[(160), float16], Tensor[(160), float16]) -> Tensor[(32, 17, 17, 160), float16] */;
  %289 = %288(%277, meta[relay.Constant][123] /* ty=Tensor[(160, 1, 1, 768), float16] */, meta[relay.Constant][124] /* ty=Tensor[(160), float16] */, meta[relay.Constant][125] /* ty=Tensor[(160), float16] */) /* ty=Tensor[(32, 17, 17, 160), float16] */;
  %290 = fn (%p072: Tensor[(32, 17, 17, 160), float16] /* ty=Tensor[(32, 17, 17, 160), float16] */, %p162: Tensor[(160, 1, 7, 160), float16] /* ty=Tensor[(160, 1, 7, 160), float16] */, %p262: Tensor[(160), float16] /* ty=Tensor[(160), float16] */, %p359: Tensor[(160), float16] /* ty=Tensor[(160), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 160), float16] {
    %282 = nn.conv2d(%p072, %p162, padding=[0, 3, 0, 3], channels=160, kernel_size=[1, 7], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 160), float16] */;
    %283 = multiply(%282, %p262) /* ty=Tensor[(32, 17, 17, 160), float16] */;
    %284 = add(%283, %p359) /* ty=Tensor[(32, 17, 17, 160), float16] */;
    nn.relu(%284) /* ty=Tensor[(32, 17, 17, 160), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 160), float16], Tensor[(160, 1, 7, 160), float16], Tensor[(160), float16], Tensor[(160), float16]) -> Tensor[(32, 17, 17, 160), float16] */;
  %291 = %290(%289, meta[relay.Constant][126] /* ty=Tensor[(160, 1, 7, 160), float16] */, meta[relay.Constant][127] /* ty=Tensor[(160), float16] */, meta[relay.Constant][128] /* ty=Tensor[(160), float16] */) /* ty=Tensor[(32, 17, 17, 160), float16] */;
  %292 = fn (%p071: Tensor[(32, 17, 17, 160), float16] /* ty=Tensor[(32, 17, 17, 160), float16] */, %p161: Tensor[(192, 7, 1, 160), float16] /* ty=Tensor[(192, 7, 1, 160), float16] */, %p261: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, %p358: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 192), float16] {
    %279 = nn.conv2d(%p071, %p161, padding=[3, 0, 3, 0], channels=192, kernel_size=[7, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %280 = multiply(%279, %p261) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %281 = add(%280, %p358) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    nn.relu(%281) /* ty=Tensor[(32, 17, 17, 192), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 160), float16], Tensor[(192, 7, 1, 160), float16], Tensor[(192), float16], Tensor[(192), float16]) -> Tensor[(32, 17, 17, 192), float16] */;
  %308 = fn (%p078: Tensor[(32, 17, 17, 768), float16] /* ty=Tensor[(32, 17, 17, 768), float16] */, %p168: Tensor[(160, 1, 1, 768), float16] /* ty=Tensor[(160, 1, 1, 768), float16] */, %p268: Tensor[(160), float16] /* ty=Tensor[(160), float16] */, %p365: Tensor[(160), float16] /* ty=Tensor[(160), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 160), float16] {
    %305 = nn.conv2d(%p078, %p168, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 160), float16] */;
    %306 = multiply(%305, %p268) /* ty=Tensor[(32, 17, 17, 160), float16] */;
    %307 = add(%306, %p365) /* ty=Tensor[(32, 17, 17, 160), float16] */;
    nn.relu(%307) /* ty=Tensor[(32, 17, 17, 160), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 768), float16], Tensor[(160, 1, 1, 768), float16], Tensor[(160), float16], Tensor[(160), float16]) -> Tensor[(32, 17, 17, 160), float16] */;
  %309 = %308(%277, meta[relay.Constant][132] /* ty=Tensor[(160, 1, 1, 768), float16] */, meta[relay.Constant][133] /* ty=Tensor[(160), float16] */, meta[relay.Constant][134] /* ty=Tensor[(160), float16] */) /* ty=Tensor[(32, 17, 17, 160), float16] */;
  %310 = fn (%p077: Tensor[(32, 17, 17, 160), float16] /* ty=Tensor[(32, 17, 17, 160), float16] */, %p167: Tensor[(160, 7, 1, 160), float16] /* ty=Tensor[(160, 7, 1, 160), float16] */, %p267: Tensor[(160), float16] /* ty=Tensor[(160), float16] */, %p364: Tensor[(160), float16] /* ty=Tensor[(160), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 160), float16] {
    %302 = nn.conv2d(%p077, %p167, padding=[3, 0, 3, 0], channels=160, kernel_size=[7, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 160), float16] */;
    %303 = multiply(%302, %p267) /* ty=Tensor[(32, 17, 17, 160), float16] */;
    %304 = add(%303, %p364) /* ty=Tensor[(32, 17, 17, 160), float16] */;
    nn.relu(%304) /* ty=Tensor[(32, 17, 17, 160), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 160), float16], Tensor[(160, 7, 1, 160), float16], Tensor[(160), float16], Tensor[(160), float16]) -> Tensor[(32, 17, 17, 160), float16] */;
  %311 = %310(%309, meta[relay.Constant][135] /* ty=Tensor[(160, 7, 1, 160), float16] */, meta[relay.Constant][136] /* ty=Tensor[(160), float16] */, meta[relay.Constant][137] /* ty=Tensor[(160), float16] */) /* ty=Tensor[(32, 17, 17, 160), float16] */;
  %312 = fn (%p076: Tensor[(32, 17, 17, 160), float16] /* ty=Tensor[(32, 17, 17, 160), float16] */, %p166: Tensor[(160, 1, 7, 160), float16] /* ty=Tensor[(160, 1, 7, 160), float16] */, %p266: Tensor[(160), float16] /* ty=Tensor[(160), float16] */, %p363: Tensor[(160), float16] /* ty=Tensor[(160), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 160), float16] {
    %299 = nn.conv2d(%p076, %p166, padding=[0, 3, 0, 3], channels=160, kernel_size=[1, 7], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 160), float16] */;
    %300 = multiply(%299, %p266) /* ty=Tensor[(32, 17, 17, 160), float16] */;
    %301 = add(%300, %p363) /* ty=Tensor[(32, 17, 17, 160), float16] */;
    nn.relu(%301) /* ty=Tensor[(32, 17, 17, 160), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 160), float16], Tensor[(160, 1, 7, 160), float16], Tensor[(160), float16], Tensor[(160), float16]) -> Tensor[(32, 17, 17, 160), float16] */;
  %313 = %312(%311, meta[relay.Constant][138] /* ty=Tensor[(160, 1, 7, 160), float16] */, meta[relay.Constant][139] /* ty=Tensor[(160), float16] */, meta[relay.Constant][140] /* ty=Tensor[(160), float16] */) /* ty=Tensor[(32, 17, 17, 160), float16] */;
  %314 = fn (%p075: Tensor[(32, 17, 17, 160), float16] /* ty=Tensor[(32, 17, 17, 160), float16] */, %p165: Tensor[(160, 7, 1, 160), float16] /* ty=Tensor[(160, 7, 1, 160), float16] */, %p265: Tensor[(160), float16] /* ty=Tensor[(160), float16] */, %p362: Tensor[(160), float16] /* ty=Tensor[(160), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 160), float16] {
    %296 = nn.conv2d(%p075, %p165, padding=[3, 0, 3, 0], channels=160, kernel_size=[7, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 160), float16] */;
    %297 = multiply(%296, %p265) /* ty=Tensor[(32, 17, 17, 160), float16] */;
    %298 = add(%297, %p362) /* ty=Tensor[(32, 17, 17, 160), float16] */;
    nn.relu(%298) /* ty=Tensor[(32, 17, 17, 160), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 160), float16], Tensor[(160, 7, 1, 160), float16], Tensor[(160), float16], Tensor[(160), float16]) -> Tensor[(32, 17, 17, 160), float16] */;
  %315 = %314(%313, meta[relay.Constant][141] /* ty=Tensor[(160, 7, 1, 160), float16] */, meta[relay.Constant][142] /* ty=Tensor[(160), float16] */, meta[relay.Constant][143] /* ty=Tensor[(160), float16] */) /* ty=Tensor[(32, 17, 17, 160), float16] */;
  %316 = fn (%p074: Tensor[(32, 17, 17, 160), float16] /* ty=Tensor[(32, 17, 17, 160), float16] */, %p164: Tensor[(192, 1, 7, 160), float16] /* ty=Tensor[(192, 1, 7, 160), float16] */, %p264: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, %p361: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 192), float16] {
    %293 = nn.conv2d(%p074, %p164, padding=[0, 3, 0, 3], channels=192, kernel_size=[1, 7], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %294 = multiply(%293, %p264) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %295 = add(%294, %p361) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    nn.relu(%295) /* ty=Tensor[(32, 17, 17, 192), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 160), float16], Tensor[(192, 1, 7, 160), float16], Tensor[(192), float16], Tensor[(192), float16]) -> Tensor[(32, 17, 17, 192), float16] */;
  %320 = fn (%p080: Tensor[(32, 17, 17, 768), float16] /* ty=Tensor[(32, 17, 17, 768), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 768), float16] {
    nn.avg_pool2d(%p080, pool_size=[3, 3], padding=[1, 1, 1, 1], layout="NHWC", out_layout="NHWC", count_include_pad=True) /* ty=Tensor[(32, 17, 17, 768), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 768), float16]) -> Tensor[(32, 17, 17, 768), float16] */;
  %321 = %320(%277) /* ty=Tensor[(32, 17, 17, 768), float16] */;
  %322 = fn (%p079: Tensor[(32, 17, 17, 768), float16] /* ty=Tensor[(32, 17, 17, 768), float16] */, %p169: Tensor[(192, 1, 1, 768), float16] /* ty=Tensor[(192, 1, 1, 768), float16] */, %p269: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, %p366: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 192), float16] {
    %317 = nn.conv2d(%p079, %p169, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %318 = multiply(%317, %p269) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %319 = add(%318, %p366) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    nn.relu(%319) /* ty=Tensor[(32, 17, 17, 192), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 768), float16], Tensor[(192, 1, 1, 768), float16], Tensor[(192), float16], Tensor[(192), float16]) -> Tensor[(32, 17, 17, 192), float16] */;
  %323 = %278(%277, meta[relay.Constant][120] /* ty=Tensor[(192, 1, 1, 768), float16] */, meta[relay.Constant][121] /* ty=Tensor[(192), float16] */, meta[relay.Constant][122] /* ty=Tensor[(192), float16] */) /* ty=Tensor[(32, 17, 17, 192), float16] */;
  %324 = %292(%291, meta[relay.Constant][129] /* ty=Tensor[(192, 7, 1, 160), float16] */, meta[relay.Constant][130] /* ty=Tensor[(192), float16] */, meta[relay.Constant][131] /* ty=Tensor[(192), float16] */) /* ty=Tensor[(32, 17, 17, 192), float16] */;
  %325 = %316(%315, meta[relay.Constant][144] /* ty=Tensor[(192, 1, 7, 160), float16] */, meta[relay.Constant][145] /* ty=Tensor[(192), float16] */, meta[relay.Constant][146] /* ty=Tensor[(192), float16] */) /* ty=Tensor[(32, 17, 17, 192), float16] */;
  %326 = %322(%321, meta[relay.Constant][147] /* ty=Tensor[(192, 1, 1, 768), float16] */, meta[relay.Constant][148] /* ty=Tensor[(192), float16] */, meta[relay.Constant][149] /* ty=Tensor[(192), float16] */) /* ty=Tensor[(32, 17, 17, 192), float16] */;
  %327 = fn (%p016: Tensor[(32, 17, 17, 192), float16] /* ty=Tensor[(32, 17, 17, 192), float16] */, %p114: Tensor[(32, 17, 17, 192), float16] /* ty=Tensor[(32, 17, 17, 192), float16] */, %p214: Tensor[(32, 17, 17, 192), float16] /* ty=Tensor[(32, 17, 17, 192), float16] */, %p312: Tensor[(32, 17, 17, 192), float16] /* ty=Tensor[(32, 17, 17, 192), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 768), float16] {
    %42 = (%p016, %p114, %p214, %p312) /* ty=(Tensor[(32, 17, 17, 192), float16], Tensor[(32, 17, 17, 192), float16], Tensor[(32, 17, 17, 192), float16], Tensor[(32, 17, 17, 192), float16]) span=aten::cat_5:0:0 */;
    concatenate(%42, axis=3) /* ty=Tensor[(32, 17, 17, 768), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 192), float16], Tensor[(32, 17, 17, 192), float16], Tensor[(32, 17, 17, 192), float16], Tensor[(32, 17, 17, 192), float16]) -> Tensor[(32, 17, 17, 768), float16] */;
  %328 = %327(%323, %324, %325, %326) /* ty=Tensor[(32, 17, 17, 768), float16] */;
  %329 = fn (%p015: Tensor[(32, 17, 17, 768), float16] /* ty=Tensor[(32, 17, 17, 768), float16] */, %p113: Tensor[(192, 1, 1, 768), float16] /* ty=Tensor[(192, 1, 1, 768), float16] */, %p213: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, %p311: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 192), float16] {
    %39 = nn.conv2d(%p015, %p113, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %40 = multiply(%39, %p213) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %41 = add(%40, %p311) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    nn.relu(%41) /* ty=Tensor[(32, 17, 17, 192), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 768), float16], Tensor[(192, 1, 1, 768), float16], Tensor[(192), float16], Tensor[(192), float16]) -> Tensor[(32, 17, 17, 192), float16] */;
  %339 = fn (%p083: Tensor[(32, 17, 17, 768), float16] /* ty=Tensor[(32, 17, 17, 768), float16] */, %p172: Tensor[(160, 1, 1, 768), float16] /* ty=Tensor[(160, 1, 1, 768), float16] */, %p272: Tensor[(160), float16] /* ty=Tensor[(160), float16] */, %p369: Tensor[(160), float16] /* ty=Tensor[(160), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 160), float16] {
    %336 = nn.conv2d(%p083, %p172, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 160), float16] */;
    %337 = multiply(%336, %p272) /* ty=Tensor[(32, 17, 17, 160), float16] */;
    %338 = add(%337, %p369) /* ty=Tensor[(32, 17, 17, 160), float16] */;
    nn.relu(%338) /* ty=Tensor[(32, 17, 17, 160), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 768), float16], Tensor[(160, 1, 1, 768), float16], Tensor[(160), float16], Tensor[(160), float16]) -> Tensor[(32, 17, 17, 160), float16] */;
  %340 = %339(%328, meta[relay.Constant][153] /* ty=Tensor[(160, 1, 1, 768), float16] */, meta[relay.Constant][154] /* ty=Tensor[(160), float16] */, meta[relay.Constant][155] /* ty=Tensor[(160), float16] */) /* ty=Tensor[(32, 17, 17, 160), float16] */;
  %341 = fn (%p082: Tensor[(32, 17, 17, 160), float16] /* ty=Tensor[(32, 17, 17, 160), float16] */, %p171: Tensor[(160, 1, 7, 160), float16] /* ty=Tensor[(160, 1, 7, 160), float16] */, %p271: Tensor[(160), float16] /* ty=Tensor[(160), float16] */, %p368: Tensor[(160), float16] /* ty=Tensor[(160), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 160), float16] {
    %333 = nn.conv2d(%p082, %p171, padding=[0, 3, 0, 3], channels=160, kernel_size=[1, 7], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 160), float16] */;
    %334 = multiply(%333, %p271) /* ty=Tensor[(32, 17, 17, 160), float16] */;
    %335 = add(%334, %p368) /* ty=Tensor[(32, 17, 17, 160), float16] */;
    nn.relu(%335) /* ty=Tensor[(32, 17, 17, 160), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 160), float16], Tensor[(160, 1, 7, 160), float16], Tensor[(160), float16], Tensor[(160), float16]) -> Tensor[(32, 17, 17, 160), float16] */;
  %342 = %341(%340, meta[relay.Constant][156] /* ty=Tensor[(160, 1, 7, 160), float16] */, meta[relay.Constant][157] /* ty=Tensor[(160), float16] */, meta[relay.Constant][158] /* ty=Tensor[(160), float16] */) /* ty=Tensor[(32, 17, 17, 160), float16] */;
  %343 = fn (%p081: Tensor[(32, 17, 17, 160), float16] /* ty=Tensor[(32, 17, 17, 160), float16] */, %p170: Tensor[(192, 7, 1, 160), float16] /* ty=Tensor[(192, 7, 1, 160), float16] */, %p270: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, %p367: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 192), float16] {
    %330 = nn.conv2d(%p081, %p170, padding=[3, 0, 3, 0], channels=192, kernel_size=[7, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %331 = multiply(%330, %p270) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %332 = add(%331, %p367) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    nn.relu(%332) /* ty=Tensor[(32, 17, 17, 192), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 160), float16], Tensor[(192, 7, 1, 160), float16], Tensor[(192), float16], Tensor[(192), float16]) -> Tensor[(32, 17, 17, 192), float16] */;
  %359 = fn (%p088: Tensor[(32, 17, 17, 768), float16] /* ty=Tensor[(32, 17, 17, 768), float16] */, %p177: Tensor[(160, 1, 1, 768), float16] /* ty=Tensor[(160, 1, 1, 768), float16] */, %p277: Tensor[(160), float16] /* ty=Tensor[(160), float16] */, %p374: Tensor[(160), float16] /* ty=Tensor[(160), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 160), float16] {
    %356 = nn.conv2d(%p088, %p177, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 160), float16] */;
    %357 = multiply(%356, %p277) /* ty=Tensor[(32, 17, 17, 160), float16] */;
    %358 = add(%357, %p374) /* ty=Tensor[(32, 17, 17, 160), float16] */;
    nn.relu(%358) /* ty=Tensor[(32, 17, 17, 160), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 768), float16], Tensor[(160, 1, 1, 768), float16], Tensor[(160), float16], Tensor[(160), float16]) -> Tensor[(32, 17, 17, 160), float16] */;
  %360 = %359(%328, meta[relay.Constant][162] /* ty=Tensor[(160, 1, 1, 768), float16] */, meta[relay.Constant][163] /* ty=Tensor[(160), float16] */, meta[relay.Constant][164] /* ty=Tensor[(160), float16] */) /* ty=Tensor[(32, 17, 17, 160), float16] */;
  %361 = fn (%p087: Tensor[(32, 17, 17, 160), float16] /* ty=Tensor[(32, 17, 17, 160), float16] */, %p176: Tensor[(160, 7, 1, 160), float16] /* ty=Tensor[(160, 7, 1, 160), float16] */, %p276: Tensor[(160), float16] /* ty=Tensor[(160), float16] */, %p373: Tensor[(160), float16] /* ty=Tensor[(160), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 160), float16] {
    %353 = nn.conv2d(%p087, %p176, padding=[3, 0, 3, 0], channels=160, kernel_size=[7, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 160), float16] */;
    %354 = multiply(%353, %p276) /* ty=Tensor[(32, 17, 17, 160), float16] */;
    %355 = add(%354, %p373) /* ty=Tensor[(32, 17, 17, 160), float16] */;
    nn.relu(%355) /* ty=Tensor[(32, 17, 17, 160), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 160), float16], Tensor[(160, 7, 1, 160), float16], Tensor[(160), float16], Tensor[(160), float16]) -> Tensor[(32, 17, 17, 160), float16] */;
  %362 = %361(%360, meta[relay.Constant][165] /* ty=Tensor[(160, 7, 1, 160), float16] */, meta[relay.Constant][166] /* ty=Tensor[(160), float16] */, meta[relay.Constant][167] /* ty=Tensor[(160), float16] */) /* ty=Tensor[(32, 17, 17, 160), float16] */;
  %363 = fn (%p086: Tensor[(32, 17, 17, 160), float16] /* ty=Tensor[(32, 17, 17, 160), float16] */, %p175: Tensor[(160, 1, 7, 160), float16] /* ty=Tensor[(160, 1, 7, 160), float16] */, %p275: Tensor[(160), float16] /* ty=Tensor[(160), float16] */, %p372: Tensor[(160), float16] /* ty=Tensor[(160), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 160), float16] {
    %350 = nn.conv2d(%p086, %p175, padding=[0, 3, 0, 3], channels=160, kernel_size=[1, 7], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 160), float16] */;
    %351 = multiply(%350, %p275) /* ty=Tensor[(32, 17, 17, 160), float16] */;
    %352 = add(%351, %p372) /* ty=Tensor[(32, 17, 17, 160), float16] */;
    nn.relu(%352) /* ty=Tensor[(32, 17, 17, 160), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 160), float16], Tensor[(160, 1, 7, 160), float16], Tensor[(160), float16], Tensor[(160), float16]) -> Tensor[(32, 17, 17, 160), float16] */;
  %364 = %363(%362, meta[relay.Constant][168] /* ty=Tensor[(160, 1, 7, 160), float16] */, meta[relay.Constant][169] /* ty=Tensor[(160), float16] */, meta[relay.Constant][170] /* ty=Tensor[(160), float16] */) /* ty=Tensor[(32, 17, 17, 160), float16] */;
  %365 = fn (%p085: Tensor[(32, 17, 17, 160), float16] /* ty=Tensor[(32, 17, 17, 160), float16] */, %p174: Tensor[(160, 7, 1, 160), float16] /* ty=Tensor[(160, 7, 1, 160), float16] */, %p274: Tensor[(160), float16] /* ty=Tensor[(160), float16] */, %p371: Tensor[(160), float16] /* ty=Tensor[(160), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 160), float16] {
    %347 = nn.conv2d(%p085, %p174, padding=[3, 0, 3, 0], channels=160, kernel_size=[7, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 160), float16] */;
    %348 = multiply(%347, %p274) /* ty=Tensor[(32, 17, 17, 160), float16] */;
    %349 = add(%348, %p371) /* ty=Tensor[(32, 17, 17, 160), float16] */;
    nn.relu(%349) /* ty=Tensor[(32, 17, 17, 160), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 160), float16], Tensor[(160, 7, 1, 160), float16], Tensor[(160), float16], Tensor[(160), float16]) -> Tensor[(32, 17, 17, 160), float16] */;
  %366 = %365(%364, meta[relay.Constant][171] /* ty=Tensor[(160, 7, 1, 160), float16] */, meta[relay.Constant][172] /* ty=Tensor[(160), float16] */, meta[relay.Constant][173] /* ty=Tensor[(160), float16] */) /* ty=Tensor[(32, 17, 17, 160), float16] */;
  %367 = fn (%p084: Tensor[(32, 17, 17, 160), float16] /* ty=Tensor[(32, 17, 17, 160), float16] */, %p173: Tensor[(192, 1, 7, 160), float16] /* ty=Tensor[(192, 1, 7, 160), float16] */, %p273: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, %p370: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 192), float16] {
    %344 = nn.conv2d(%p084, %p173, padding=[0, 3, 0, 3], channels=192, kernel_size=[1, 7], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %345 = multiply(%344, %p273) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %346 = add(%345, %p370) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    nn.relu(%346) /* ty=Tensor[(32, 17, 17, 192), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 160), float16], Tensor[(192, 1, 7, 160), float16], Tensor[(192), float16], Tensor[(192), float16]) -> Tensor[(32, 17, 17, 192), float16] */;
  %371 = fn (%p090: Tensor[(32, 17, 17, 768), float16] /* ty=Tensor[(32, 17, 17, 768), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 768), float16] {
    nn.avg_pool2d(%p090, pool_size=[3, 3], padding=[1, 1, 1, 1], layout="NHWC", out_layout="NHWC", count_include_pad=True) /* ty=Tensor[(32, 17, 17, 768), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 768), float16]) -> Tensor[(32, 17, 17, 768), float16] */;
  %372 = %371(%328) /* ty=Tensor[(32, 17, 17, 768), float16] */;
  %373 = fn (%p089: Tensor[(32, 17, 17, 768), float16] /* ty=Tensor[(32, 17, 17, 768), float16] */, %p178: Tensor[(192, 1, 1, 768), float16] /* ty=Tensor[(192, 1, 1, 768), float16] */, %p278: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, %p375: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 192), float16] {
    %368 = nn.conv2d(%p089, %p178, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %369 = multiply(%368, %p278) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %370 = add(%369, %p375) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    nn.relu(%370) /* ty=Tensor[(32, 17, 17, 192), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 768), float16], Tensor[(192, 1, 1, 768), float16], Tensor[(192), float16], Tensor[(192), float16]) -> Tensor[(32, 17, 17, 192), float16] */;
  %374 = %329(%328, meta[relay.Constant][150] /* ty=Tensor[(192, 1, 1, 768), float16] */, meta[relay.Constant][151] /* ty=Tensor[(192), float16] */, meta[relay.Constant][152] /* ty=Tensor[(192), float16] */) /* ty=Tensor[(32, 17, 17, 192), float16] */;
  %375 = %343(%342, meta[relay.Constant][159] /* ty=Tensor[(192, 7, 1, 160), float16] */, meta[relay.Constant][160] /* ty=Tensor[(192), float16] */, meta[relay.Constant][161] /* ty=Tensor[(192), float16] */) /* ty=Tensor[(32, 17, 17, 192), float16] */;
  %376 = %367(%366, meta[relay.Constant][174] /* ty=Tensor[(192, 1, 7, 160), float16] */, meta[relay.Constant][175] /* ty=Tensor[(192), float16] */, meta[relay.Constant][176] /* ty=Tensor[(192), float16] */) /* ty=Tensor[(32, 17, 17, 192), float16] */;
  %377 = %373(%372, meta[relay.Constant][177] /* ty=Tensor[(192, 1, 1, 768), float16] */, meta[relay.Constant][178] /* ty=Tensor[(192), float16] */, meta[relay.Constant][179] /* ty=Tensor[(192), float16] */) /* ty=Tensor[(32, 17, 17, 192), float16] */;
  %378 = fn (%p014: Tensor[(32, 17, 17, 192), float16] /* ty=Tensor[(32, 17, 17, 192), float16] */, %p112: Tensor[(32, 17, 17, 192), float16] /* ty=Tensor[(32, 17, 17, 192), float16] */, %p212: Tensor[(32, 17, 17, 192), float16] /* ty=Tensor[(32, 17, 17, 192), float16] */, %p310: Tensor[(32, 17, 17, 192), float16] /* ty=Tensor[(32, 17, 17, 192), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 768), float16] {
    %38 = (%p014, %p112, %p212, %p310) /* ty=(Tensor[(32, 17, 17, 192), float16], Tensor[(32, 17, 17, 192), float16], Tensor[(32, 17, 17, 192), float16], Tensor[(32, 17, 17, 192), float16]) span=aten::cat_6:0:0 */;
    concatenate(%38, axis=3) /* ty=Tensor[(32, 17, 17, 768), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 192), float16], Tensor[(32, 17, 17, 192), float16], Tensor[(32, 17, 17, 192), float16], Tensor[(32, 17, 17, 192), float16]) -> Tensor[(32, 17, 17, 768), float16] */;
  %379 = %378(%374, %375, %376, %377) /* ty=Tensor[(32, 17, 17, 768), float16] */;
  %380 = fn (%p013: Tensor[(32, 17, 17, 768), float16] /* ty=Tensor[(32, 17, 17, 768), float16] */, %p111: Tensor[(192, 1, 1, 768), float16] /* ty=Tensor[(192, 1, 1, 768), float16] */, %p211: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, %p39: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 192), float16] {
    %35 = nn.conv2d(%p013, %p111, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %36 = multiply(%35, %p211) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %37 = add(%36, %p39) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    nn.relu(%37) /* ty=Tensor[(32, 17, 17, 192), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 768), float16], Tensor[(192, 1, 1, 768), float16], Tensor[(192), float16], Tensor[(192), float16]) -> Tensor[(32, 17, 17, 192), float16] */;
  %390 = fn (%p093: Tensor[(32, 17, 17, 768), float16] /* ty=Tensor[(32, 17, 17, 768), float16] */, %p181: Tensor[(192, 1, 1, 768), float16] /* ty=Tensor[(192, 1, 1, 768), float16] */, %p281: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, %p378: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 192), float16] {
    %387 = nn.conv2d(%p093, %p181, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %388 = multiply(%387, %p281) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %389 = add(%388, %p378) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    nn.relu(%389) /* ty=Tensor[(32, 17, 17, 192), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 768), float16], Tensor[(192, 1, 1, 768), float16], Tensor[(192), float16], Tensor[(192), float16]) -> Tensor[(32, 17, 17, 192), float16] */;
  %391 = %390(%379, meta[relay.Constant][183] /* ty=Tensor[(192, 1, 1, 768), float16] */, meta[relay.Constant][184] /* ty=Tensor[(192), float16] */, meta[relay.Constant][185] /* ty=Tensor[(192), float16] */) /* ty=Tensor[(32, 17, 17, 192), float16] */;
  %392 = fn (%p092: Tensor[(32, 17, 17, 192), float16] /* ty=Tensor[(32, 17, 17, 192), float16] */, %p180: Tensor[(192, 1, 7, 192), float16] /* ty=Tensor[(192, 1, 7, 192), float16] */, %p280: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, %p377: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 192), float16] {
    %384 = nn.conv2d(%p092, %p180, padding=[0, 3, 0, 3], channels=192, kernel_size=[1, 7], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %385 = multiply(%384, %p280) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %386 = add(%385, %p377) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    nn.relu(%386) /* ty=Tensor[(32, 17, 17, 192), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 192), float16], Tensor[(192, 1, 7, 192), float16], Tensor[(192), float16], Tensor[(192), float16]) -> Tensor[(32, 17, 17, 192), float16] */;
  %393 = %392(%391, meta[relay.Constant][186] /* ty=Tensor[(192, 1, 7, 192), float16] */, meta[relay.Constant][187] /* ty=Tensor[(192), float16] */, meta[relay.Constant][188] /* ty=Tensor[(192), float16] */) /* ty=Tensor[(32, 17, 17, 192), float16] */;
  %394 = fn (%p091: Tensor[(32, 17, 17, 192), float16] /* ty=Tensor[(32, 17, 17, 192), float16] */, %p179: Tensor[(192, 7, 1, 192), float16] /* ty=Tensor[(192, 7, 1, 192), float16] */, %p279: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, %p376: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 192), float16] {
    %381 = nn.conv2d(%p091, %p179, padding=[3, 0, 3, 0], channels=192, kernel_size=[7, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %382 = multiply(%381, %p279) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %383 = add(%382, %p376) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    nn.relu(%383) /* ty=Tensor[(32, 17, 17, 192), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 192), float16], Tensor[(192, 7, 1, 192), float16], Tensor[(192), float16], Tensor[(192), float16]) -> Tensor[(32, 17, 17, 192), float16] */;
  %410 = fn (%p098: Tensor[(32, 17, 17, 768), float16] /* ty=Tensor[(32, 17, 17, 768), float16] */, %p186: Tensor[(192, 1, 1, 768), float16] /* ty=Tensor[(192, 1, 1, 768), float16] */, %p286: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, %p383: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 192), float16] {
    %407 = nn.conv2d(%p098, %p186, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %408 = multiply(%407, %p286) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %409 = add(%408, %p383) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    nn.relu(%409) /* ty=Tensor[(32, 17, 17, 192), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 768), float16], Tensor[(192, 1, 1, 768), float16], Tensor[(192), float16], Tensor[(192), float16]) -> Tensor[(32, 17, 17, 192), float16] */;
  %411 = %410(%379, meta[relay.Constant][192] /* ty=Tensor[(192, 1, 1, 768), float16] */, meta[relay.Constant][193] /* ty=Tensor[(192), float16] */, meta[relay.Constant][194] /* ty=Tensor[(192), float16] */) /* ty=Tensor[(32, 17, 17, 192), float16] */;
  %412 = fn (%p097: Tensor[(32, 17, 17, 192), float16] /* ty=Tensor[(32, 17, 17, 192), float16] */, %p185: Tensor[(192, 7, 1, 192), float16] /* ty=Tensor[(192, 7, 1, 192), float16] */, %p285: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, %p382: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 192), float16] {
    %404 = nn.conv2d(%p097, %p185, padding=[3, 0, 3, 0], channels=192, kernel_size=[7, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %405 = multiply(%404, %p285) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %406 = add(%405, %p382) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    nn.relu(%406) /* ty=Tensor[(32, 17, 17, 192), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 192), float16], Tensor[(192, 7, 1, 192), float16], Tensor[(192), float16], Tensor[(192), float16]) -> Tensor[(32, 17, 17, 192), float16] */;
  %413 = %412(%411, meta[relay.Constant][195] /* ty=Tensor[(192, 7, 1, 192), float16] */, meta[relay.Constant][196] /* ty=Tensor[(192), float16] */, meta[relay.Constant][197] /* ty=Tensor[(192), float16] */) /* ty=Tensor[(32, 17, 17, 192), float16] */;
  %414 = fn (%p096: Tensor[(32, 17, 17, 192), float16] /* ty=Tensor[(32, 17, 17, 192), float16] */, %p184: Tensor[(192, 1, 7, 192), float16] /* ty=Tensor[(192, 1, 7, 192), float16] */, %p284: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, %p381: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 192), float16] {
    %401 = nn.conv2d(%p096, %p184, padding=[0, 3, 0, 3], channels=192, kernel_size=[1, 7], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %402 = multiply(%401, %p284) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %403 = add(%402, %p381) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    nn.relu(%403) /* ty=Tensor[(32, 17, 17, 192), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 192), float16], Tensor[(192, 1, 7, 192), float16], Tensor[(192), float16], Tensor[(192), float16]) -> Tensor[(32, 17, 17, 192), float16] */;
  %415 = %414(%413, meta[relay.Constant][198] /* ty=Tensor[(192, 1, 7, 192), float16] */, meta[relay.Constant][199] /* ty=Tensor[(192), float16] */, meta[relay.Constant][200] /* ty=Tensor[(192), float16] */) /* ty=Tensor[(32, 17, 17, 192), float16] */;
  %416 = fn (%p095: Tensor[(32, 17, 17, 192), float16] /* ty=Tensor[(32, 17, 17, 192), float16] */, %p183: Tensor[(192, 7, 1, 192), float16] /* ty=Tensor[(192, 7, 1, 192), float16] */, %p283: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, %p380: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 192), float16] {
    %398 = nn.conv2d(%p095, %p183, padding=[3, 0, 3, 0], channels=192, kernel_size=[7, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %399 = multiply(%398, %p283) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %400 = add(%399, %p380) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    nn.relu(%400) /* ty=Tensor[(32, 17, 17, 192), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 192), float16], Tensor[(192, 7, 1, 192), float16], Tensor[(192), float16], Tensor[(192), float16]) -> Tensor[(32, 17, 17, 192), float16] */;
  %417 = %416(%415, meta[relay.Constant][201] /* ty=Tensor[(192, 7, 1, 192), float16] */, meta[relay.Constant][202] /* ty=Tensor[(192), float16] */, meta[relay.Constant][203] /* ty=Tensor[(192), float16] */) /* ty=Tensor[(32, 17, 17, 192), float16] */;
  %418 = fn (%p094: Tensor[(32, 17, 17, 192), float16] /* ty=Tensor[(32, 17, 17, 192), float16] */, %p182: Tensor[(192, 1, 7, 192), float16] /* ty=Tensor[(192, 1, 7, 192), float16] */, %p282: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, %p379: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 192), float16] {
    %395 = nn.conv2d(%p094, %p182, padding=[0, 3, 0, 3], channels=192, kernel_size=[1, 7], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %396 = multiply(%395, %p282) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %397 = add(%396, %p379) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    nn.relu(%397) /* ty=Tensor[(32, 17, 17, 192), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 192), float16], Tensor[(192, 1, 7, 192), float16], Tensor[(192), float16], Tensor[(192), float16]) -> Tensor[(32, 17, 17, 192), float16] */;
  %422 = fn (%p0100: Tensor[(32, 17, 17, 768), float16] /* ty=Tensor[(32, 17, 17, 768), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 768), float16] {
    nn.avg_pool2d(%p0100, pool_size=[3, 3], padding=[1, 1, 1, 1], layout="NHWC", out_layout="NHWC", count_include_pad=True) /* ty=Tensor[(32, 17, 17, 768), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 768), float16]) -> Tensor[(32, 17, 17, 768), float16] */;
  %423 = %422(%379) /* ty=Tensor[(32, 17, 17, 768), float16] */;
  %424 = fn (%p099: Tensor[(32, 17, 17, 768), float16] /* ty=Tensor[(32, 17, 17, 768), float16] */, %p187: Tensor[(192, 1, 1, 768), float16] /* ty=Tensor[(192, 1, 1, 768), float16] */, %p287: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, %p384: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 192), float16] {
    %419 = nn.conv2d(%p099, %p187, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %420 = multiply(%419, %p287) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %421 = add(%420, %p384) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    nn.relu(%421) /* ty=Tensor[(32, 17, 17, 192), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 768), float16], Tensor[(192, 1, 1, 768), float16], Tensor[(192), float16], Tensor[(192), float16]) -> Tensor[(32, 17, 17, 192), float16] */;
  %425 = %380(%379, meta[relay.Constant][180] /* ty=Tensor[(192, 1, 1, 768), float16] */, meta[relay.Constant][181] /* ty=Tensor[(192), float16] */, meta[relay.Constant][182] /* ty=Tensor[(192), float16] */) /* ty=Tensor[(32, 17, 17, 192), float16] */;
  %426 = %394(%393, meta[relay.Constant][189] /* ty=Tensor[(192, 7, 1, 192), float16] */, meta[relay.Constant][190] /* ty=Tensor[(192), float16] */, meta[relay.Constant][191] /* ty=Tensor[(192), float16] */) /* ty=Tensor[(32, 17, 17, 192), float16] */;
  %427 = %418(%417, meta[relay.Constant][204] /* ty=Tensor[(192, 1, 7, 192), float16] */, meta[relay.Constant][205] /* ty=Tensor[(192), float16] */, meta[relay.Constant][206] /* ty=Tensor[(192), float16] */) /* ty=Tensor[(32, 17, 17, 192), float16] */;
  %428 = %424(%423, meta[relay.Constant][207] /* ty=Tensor[(192, 1, 1, 768), float16] */, meta[relay.Constant][208] /* ty=Tensor[(192), float16] */, meta[relay.Constant][209] /* ty=Tensor[(192), float16] */) /* ty=Tensor[(32, 17, 17, 192), float16] */;
  %429 = fn (%p012: Tensor[(32, 17, 17, 192), float16] /* ty=Tensor[(32, 17, 17, 192), float16] */, %p110: Tensor[(32, 17, 17, 192), float16] /* ty=Tensor[(32, 17, 17, 192), float16] */, %p210: Tensor[(32, 17, 17, 192), float16] /* ty=Tensor[(32, 17, 17, 192), float16] */, %p38: Tensor[(32, 17, 17, 192), float16] /* ty=Tensor[(32, 17, 17, 192), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 768), float16] {
    %34 = (%p012, %p110, %p210, %p38) /* ty=(Tensor[(32, 17, 17, 192), float16], Tensor[(32, 17, 17, 192), float16], Tensor[(32, 17, 17, 192), float16], Tensor[(32, 17, 17, 192), float16]) span=aten::cat_7:0:0 */;
    concatenate(%34, axis=3) /* ty=Tensor[(32, 17, 17, 768), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 192), float16], Tensor[(32, 17, 17, 192), float16], Tensor[(32, 17, 17, 192), float16], Tensor[(32, 17, 17, 192), float16]) -> Tensor[(32, 17, 17, 768), float16] */;
  %430 = %429(%425, %426, %427, %428) /* ty=Tensor[(32, 17, 17, 768), float16] */;
  %431 = fn (%p011: Tensor[(32, 17, 17, 768), float16] /* ty=Tensor[(32, 17, 17, 768), float16] */, %p19: Tensor[(192, 1, 1, 768), float16] /* ty=Tensor[(192, 1, 1, 768), float16] */, %p29: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, %p37: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 192), float16] {
    %31 = nn.conv2d(%p011, %p19, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %32 = multiply(%31, %p29) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %33 = add(%32, %p37) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    nn.relu(%33) /* ty=Tensor[(32, 17, 17, 192), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 768), float16], Tensor[(192, 1, 1, 768), float16], Tensor[(192), float16], Tensor[(192), float16]) -> Tensor[(32, 17, 17, 192), float16] */;
  %432 = %431(%430, meta[relay.Constant][210] /* ty=Tensor[(192, 1, 1, 768), float16] */, meta[relay.Constant][211] /* ty=Tensor[(192), float16] */, meta[relay.Constant][212] /* ty=Tensor[(192), float16] */) /* ty=Tensor[(32, 17, 17, 192), float16] */;
  %433 = fn (%p010: Tensor[(32, 17, 17, 192), float16] /* ty=Tensor[(32, 17, 17, 192), float16] */, %p18: Tensor[(320, 3, 3, 192), float16] /* ty=Tensor[(320, 3, 3, 192), float16] */, %p28: Tensor[(320), float16] /* ty=Tensor[(320), float16] */, %p36: Tensor[(320), float16] /* ty=Tensor[(320), float16] */, Primitive=1) -> Tensor[(32, 8, 8, 320), float16] {
    %28 = nn.conv2d(%p010, %p18, strides=[2, 2], padding=[0, 0, 0, 0], channels=320, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 8, 8, 320), float16] */;
    %29 = multiply(%28, %p28) /* ty=Tensor[(32, 8, 8, 320), float16] */;
    %30 = add(%29, %p36) /* ty=Tensor[(32, 8, 8, 320), float16] */;
    nn.relu(%30) /* ty=Tensor[(32, 8, 8, 320), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 192), float16], Tensor[(320, 3, 3, 192), float16], Tensor[(320), float16], Tensor[(320), float16]) -> Tensor[(32, 8, 8, 320), float16] */;
  %446 = fn (%p0104: Tensor[(32, 17, 17, 768), float16] /* ty=Tensor[(32, 17, 17, 768), float16] */, %p191: Tensor[(192, 1, 1, 768), float16] /* ty=Tensor[(192, 1, 1, 768), float16] */, %p291: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, %p388: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 192), float16] {
    %443 = nn.conv2d(%p0104, %p191, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %444 = multiply(%443, %p291) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %445 = add(%444, %p388) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    nn.relu(%445) /* ty=Tensor[(32, 17, 17, 192), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 768), float16], Tensor[(192, 1, 1, 768), float16], Tensor[(192), float16], Tensor[(192), float16]) -> Tensor[(32, 17, 17, 192), float16] */;
  %447 = %446(%430, meta[relay.Constant][216] /* ty=Tensor[(192, 1, 1, 768), float16] */, meta[relay.Constant][217] /* ty=Tensor[(192), float16] */, meta[relay.Constant][218] /* ty=Tensor[(192), float16] */) /* ty=Tensor[(32, 17, 17, 192), float16] */;
  %448 = fn (%p0103: Tensor[(32, 17, 17, 192), float16] /* ty=Tensor[(32, 17, 17, 192), float16] */, %p190: Tensor[(192, 1, 7, 192), float16] /* ty=Tensor[(192, 1, 7, 192), float16] */, %p290: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, %p387: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 192), float16] {
    %440 = nn.conv2d(%p0103, %p190, padding=[0, 3, 0, 3], channels=192, kernel_size=[1, 7], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %441 = multiply(%440, %p290) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %442 = add(%441, %p387) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    nn.relu(%442) /* ty=Tensor[(32, 17, 17, 192), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 192), float16], Tensor[(192, 1, 7, 192), float16], Tensor[(192), float16], Tensor[(192), float16]) -> Tensor[(32, 17, 17, 192), float16] */;
  %449 = %448(%447, meta[relay.Constant][219] /* ty=Tensor[(192, 1, 7, 192), float16] */, meta[relay.Constant][220] /* ty=Tensor[(192), float16] */, meta[relay.Constant][221] /* ty=Tensor[(192), float16] */) /* ty=Tensor[(32, 17, 17, 192), float16] */;
  %450 = fn (%p0102: Tensor[(32, 17, 17, 192), float16] /* ty=Tensor[(32, 17, 17, 192), float16] */, %p189: Tensor[(192, 7, 1, 192), float16] /* ty=Tensor[(192, 7, 1, 192), float16] */, %p289: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, %p386: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, Primitive=1) -> Tensor[(32, 17, 17, 192), float16] {
    %437 = nn.conv2d(%p0102, %p189, padding=[3, 0, 3, 0], channels=192, kernel_size=[7, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %438 = multiply(%437, %p289) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    %439 = add(%438, %p386) /* ty=Tensor[(32, 17, 17, 192), float16] */;
    nn.relu(%439) /* ty=Tensor[(32, 17, 17, 192), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 192), float16], Tensor[(192, 7, 1, 192), float16], Tensor[(192), float16], Tensor[(192), float16]) -> Tensor[(32, 17, 17, 192), float16] */;
  %451 = %450(%449, meta[relay.Constant][222] /* ty=Tensor[(192, 7, 1, 192), float16] */, meta[relay.Constant][223] /* ty=Tensor[(192), float16] */, meta[relay.Constant][224] /* ty=Tensor[(192), float16] */) /* ty=Tensor[(32, 17, 17, 192), float16] */;
  %452 = fn (%p0101: Tensor[(32, 17, 17, 192), float16] /* ty=Tensor[(32, 17, 17, 192), float16] */, %p188: Tensor[(192, 3, 3, 192), float16] /* ty=Tensor[(192, 3, 3, 192), float16] */, %p288: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, %p385: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, Primitive=1) -> Tensor[(32, 8, 8, 192), float16] {
    %434 = nn.conv2d(%p0101, %p188, strides=[2, 2], padding=[0, 0, 0, 0], channels=192, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 8, 8, 192), float16] */;
    %435 = multiply(%434, %p288) /* ty=Tensor[(32, 8, 8, 192), float16] */;
    %436 = add(%435, %p385) /* ty=Tensor[(32, 8, 8, 192), float16] */;
    nn.relu(%436) /* ty=Tensor[(32, 8, 8, 192), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 192), float16], Tensor[(192, 3, 3, 192), float16], Tensor[(192), float16], Tensor[(192), float16]) -> Tensor[(32, 8, 8, 192), float16] */;
  %453 = fn (%p0105: Tensor[(32, 17, 17, 768), float16] /* ty=Tensor[(32, 17, 17, 768), float16] */, Primitive=1) -> Tensor[(32, 8, 8, 768), float16] {
    nn.max_pool2d(%p0105, pool_size=[3, 3], strides=[2, 2], padding=[0, 0, 0, 0], layout="NHWC", out_layout="NHWC") /* ty=Tensor[(32, 8, 8, 768), float16] */
  } /* ty=fn (Tensor[(32, 17, 17, 768), float16]) -> Tensor[(32, 8, 8, 768), float16] */;
  %454 = %433(%432, meta[relay.Constant][213] /* ty=Tensor[(320, 3, 3, 192), float16] */, meta[relay.Constant][214] /* ty=Tensor[(320), float16] */, meta[relay.Constant][215] /* ty=Tensor[(320), float16] */) /* ty=Tensor[(32, 8, 8, 320), float16] */;
  %455 = %452(%451, meta[relay.Constant][225] /* ty=Tensor[(192, 3, 3, 192), float16] */, meta[relay.Constant][226] /* ty=Tensor[(192), float16] */, meta[relay.Constant][227] /* ty=Tensor[(192), float16] */) /* ty=Tensor[(32, 8, 8, 192), float16] */;
  %456 = %453(%430) /* ty=Tensor[(32, 8, 8, 768), float16] */;
  %457 = fn (%p09: Tensor[(32, 8, 8, 320), float16] /* ty=Tensor[(32, 8, 8, 320), float16] */, %p17: Tensor[(32, 8, 8, 192), float16] /* ty=Tensor[(32, 8, 8, 192), float16] */, %p27: Tensor[(32, 8, 8, 768), float16] /* ty=Tensor[(32, 8, 8, 768), float16] */, Primitive=1) -> Tensor[(32, 8, 8, 1280), float16] {
    %27 = (%p09, %p17, %p27) /* ty=(Tensor[(32, 8, 8, 320), float16], Tensor[(32, 8, 8, 192), float16], Tensor[(32, 8, 8, 768), float16]) span=aten::cat_8:0:0 */;
    concatenate(%27, axis=3) /* ty=Tensor[(32, 8, 8, 1280), float16] */
  } /* ty=fn (Tensor[(32, 8, 8, 320), float16], Tensor[(32, 8, 8, 192), float16], Tensor[(32, 8, 8, 768), float16]) -> Tensor[(32, 8, 8, 1280), float16] */;
  %458 = %457(%454, %455, %456) /* ty=Tensor[(32, 8, 8, 1280), float16] */;
  %459 = fn (%p08: Tensor[(32, 8, 8, 1280), float16] /* ty=Tensor[(32, 8, 8, 1280), float16] */, %p16: Tensor[(384, 1, 1, 1280), float16] /* ty=Tensor[(384, 1, 1, 1280), float16] */, %p26: Tensor[(384), float16] /* ty=Tensor[(384), float16] */, %p35: Tensor[(384), float16] /* ty=Tensor[(384), float16] */, Primitive=1) -> Tensor[(32, 8, 8, 384), float16] {
    %24 = nn.conv2d(%p08, %p16, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 8, 8, 384), float16] */;
    %25 = multiply(%24, %p26) /* ty=Tensor[(32, 8, 8, 384), float16] */;
    %26 = add(%25, %p35) /* ty=Tensor[(32, 8, 8, 384), float16] */;
    nn.relu(%26) /* ty=Tensor[(32, 8, 8, 384), float16] */
  } /* ty=fn (Tensor[(32, 8, 8, 1280), float16], Tensor[(384, 1, 1, 1280), float16], Tensor[(384), float16], Tensor[(384), float16]) -> Tensor[(32, 8, 8, 384), float16] */;
  %460 = %459(%458, meta[relay.Constant][228] /* ty=Tensor[(384, 1, 1, 1280), float16] */, meta[relay.Constant][229] /* ty=Tensor[(384), float16] */, meta[relay.Constant][230] /* ty=Tensor[(384), float16] */) /* ty=Tensor[(32, 8, 8, 384), float16] */;
  %461 = fn (%p07: Tensor[(32, 8, 8, 384), float16] /* ty=Tensor[(32, 8, 8, 384), float16] */, %p15: Tensor[(384, 1, 3, 384), float16] /* ty=Tensor[(384, 1, 3, 384), float16] */, %p25: Tensor[(384), float16] /* ty=Tensor[(384), float16] */, %p34: Tensor[(384), float16] /* ty=Tensor[(384), float16] */, Primitive=1) -> Tensor[(32, 8, 8, 384), float16] {
    %21 = nn.conv2d(%p07, %p15, padding=[0, 1, 0, 1], channels=384, kernel_size=[1, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 8, 8, 384), float16] */;
    %22 = multiply(%21, %p25) /* ty=Tensor[(32, 8, 8, 384), float16] */;
    %23 = add(%22, %p34) /* ty=Tensor[(32, 8, 8, 384), float16] */;
    nn.relu(%23) /* ty=Tensor[(32, 8, 8, 384), float16] */
  } /* ty=fn (Tensor[(32, 8, 8, 384), float16], Tensor[(384, 1, 3, 384), float16], Tensor[(384), float16], Tensor[(384), float16]) -> Tensor[(32, 8, 8, 384), float16] */;
  %465 = fn (%p0106: Tensor[(32, 8, 8, 384), float16] /* ty=Tensor[(32, 8, 8, 384), float16] */, %p192: Tensor[(384, 3, 1, 384), float16] /* ty=Tensor[(384, 3, 1, 384), float16] */, %p292: Tensor[(384), float16] /* ty=Tensor[(384), float16] */, %p389: Tensor[(384), float16] /* ty=Tensor[(384), float16] */, Primitive=1) -> Tensor[(32, 8, 8, 384), float16] {
    %462 = nn.conv2d(%p0106, %p192, padding=[1, 0, 1, 0], channels=384, kernel_size=[3, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 8, 8, 384), float16] */;
    %463 = multiply(%462, %p292) /* ty=Tensor[(32, 8, 8, 384), float16] */;
    %464 = add(%463, %p389) /* ty=Tensor[(32, 8, 8, 384), float16] */;
    nn.relu(%464) /* ty=Tensor[(32, 8, 8, 384), float16] */
  } /* ty=fn (Tensor[(32, 8, 8, 384), float16], Tensor[(384, 3, 1, 384), float16], Tensor[(384), float16], Tensor[(384), float16]) -> Tensor[(32, 8, 8, 384), float16] */;
  %475 = fn (%p0109: Tensor[(32, 8, 8, 1280), float16] /* ty=Tensor[(32, 8, 8, 1280), float16] */, %p195: Tensor[(448, 1, 1, 1280), float16] /* ty=Tensor[(448, 1, 1, 1280), float16] */, %p295: Tensor[(448), float16] /* ty=Tensor[(448), float16] */, %p392: Tensor[(448), float16] /* ty=Tensor[(448), float16] */, Primitive=1) -> Tensor[(32, 8, 8, 448), float16] {
    %472 = nn.conv2d(%p0109, %p195, padding=[0, 0, 0, 0], channels=448, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 8, 8, 448), float16] */;
    %473 = multiply(%472, %p295) /* ty=Tensor[(32, 8, 8, 448), float16] */;
    %474 = add(%473, %p392) /* ty=Tensor[(32, 8, 8, 448), float16] */;
    nn.relu(%474) /* ty=Tensor[(32, 8, 8, 448), float16] */
  } /* ty=fn (Tensor[(32, 8, 8, 1280), float16], Tensor[(448, 1, 1, 1280), float16], Tensor[(448), float16], Tensor[(448), float16]) -> Tensor[(32, 8, 8, 448), float16] */;
  %476 = %475(%458, meta[relay.Constant][237] /* ty=Tensor[(448, 1, 1, 1280), float16] */, meta[relay.Constant][238] /* ty=Tensor[(448), float16] */, meta[relay.Constant][239] /* ty=Tensor[(448), float16] */) /* ty=Tensor[(32, 8, 8, 448), float16] */;
  %477 = fn (%p0108: Tensor[(32, 8, 8, 448), float16] /* ty=Tensor[(32, 8, 8, 448), float16] */, %p194: Tensor[(384, 3, 3, 448), float16] /* ty=Tensor[(384, 3, 3, 448), float16] */, %p294: Tensor[(384), float16] /* ty=Tensor[(384), float16] */, %p391: Tensor[(384), float16] /* ty=Tensor[(384), float16] */, Primitive=1) -> Tensor[(32, 8, 8, 384), float16] {
    %469 = nn.conv2d(%p0108, %p194, padding=[1, 1, 1, 1], channels=384, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 8, 8, 384), float16] */;
    %470 = multiply(%469, %p294) /* ty=Tensor[(32, 8, 8, 384), float16] */;
    %471 = add(%470, %p391) /* ty=Tensor[(32, 8, 8, 384), float16] */;
    nn.relu(%471) /* ty=Tensor[(32, 8, 8, 384), float16] */
  } /* ty=fn (Tensor[(32, 8, 8, 448), float16], Tensor[(384, 3, 3, 448), float16], Tensor[(384), float16], Tensor[(384), float16]) -> Tensor[(32, 8, 8, 384), float16] */;
  %478 = %477(%476, meta[relay.Constant][240] /* ty=Tensor[(384, 3, 3, 448), float16] */, meta[relay.Constant][241] /* ty=Tensor[(384), float16] */, meta[relay.Constant][242] /* ty=Tensor[(384), float16] */) /* ty=Tensor[(32, 8, 8, 384), float16] */;
  %479 = fn (%p0107: Tensor[(32, 8, 8, 384), float16] /* ty=Tensor[(32, 8, 8, 384), float16] */, %p193: Tensor[(384, 1, 3, 384), float16] /* ty=Tensor[(384, 1, 3, 384), float16] */, %p293: Tensor[(384), float16] /* ty=Tensor[(384), float16] */, %p390: Tensor[(384), float16] /* ty=Tensor[(384), float16] */, Primitive=1) -> Tensor[(32, 8, 8, 384), float16] {
    %466 = nn.conv2d(%p0107, %p193, padding=[0, 1, 0, 1], channels=384, kernel_size=[1, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 8, 8, 384), float16] */;
    %467 = multiply(%466, %p293) /* ty=Tensor[(32, 8, 8, 384), float16] */;
    %468 = add(%467, %p390) /* ty=Tensor[(32, 8, 8, 384), float16] */;
    nn.relu(%468) /* ty=Tensor[(32, 8, 8, 384), float16] */
  } /* ty=fn (Tensor[(32, 8, 8, 384), float16], Tensor[(384, 1, 3, 384), float16], Tensor[(384), float16], Tensor[(384), float16]) -> Tensor[(32, 8, 8, 384), float16] */;
  %483 = fn (%p0110: Tensor[(32, 8, 8, 384), float16] /* ty=Tensor[(32, 8, 8, 384), float16] */, %p196: Tensor[(384, 3, 1, 384), float16] /* ty=Tensor[(384, 3, 1, 384), float16] */, %p296: Tensor[(384), float16] /* ty=Tensor[(384), float16] */, %p393: Tensor[(384), float16] /* ty=Tensor[(384), float16] */, Primitive=1) -> Tensor[(32, 8, 8, 384), float16] {
    %480 = nn.conv2d(%p0110, %p196, padding=[1, 0, 1, 0], channels=384, kernel_size=[3, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 8, 8, 384), float16] */;
    %481 = multiply(%480, %p296) /* ty=Tensor[(32, 8, 8, 384), float16] */;
    %482 = add(%481, %p393) /* ty=Tensor[(32, 8, 8, 384), float16] */;
    nn.relu(%482) /* ty=Tensor[(32, 8, 8, 384), float16] */
  } /* ty=fn (Tensor[(32, 8, 8, 384), float16], Tensor[(384, 3, 1, 384), float16], Tensor[(384), float16], Tensor[(384), float16]) -> Tensor[(32, 8, 8, 384), float16] */;
  %487 = fn (%p0111: Tensor[(32, 8, 8, 1280), float16] /* ty=Tensor[(32, 8, 8, 1280), float16] */, %p197: Tensor[(320, 1, 1, 1280), float16] /* ty=Tensor[(320, 1, 1, 1280), float16] */, %p297: Tensor[(320), float16] /* ty=Tensor[(320), float16] */, %p394: Tensor[(320), float16] /* ty=Tensor[(320), float16] */, Primitive=1) -> Tensor[(32, 8, 8, 320), float16] {
    %484 = nn.conv2d(%p0111, %p197, padding=[0, 0, 0, 0], channels=320, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 8, 8, 320), float16] */;
    %485 = multiply(%484, %p297) /* ty=Tensor[(32, 8, 8, 320), float16] */;
    %486 = add(%485, %p394) /* ty=Tensor[(32, 8, 8, 320), float16] */;
    nn.relu(%486) /* ty=Tensor[(32, 8, 8, 320), float16] */
  } /* ty=fn (Tensor[(32, 8, 8, 1280), float16], Tensor[(320, 1, 1, 1280), float16], Tensor[(320), float16], Tensor[(320), float16]) -> Tensor[(32, 8, 8, 320), float16] */;
  %491 = fn (%p0113: Tensor[(32, 8, 8, 1280), float16] /* ty=Tensor[(32, 8, 8, 1280), float16] */, Primitive=1) -> Tensor[(32, 8, 8, 1280), float16] {
    nn.avg_pool2d(%p0113, pool_size=[3, 3], padding=[1, 1, 1, 1], layout="NHWC", out_layout="NHWC", count_include_pad=True) /* ty=Tensor[(32, 8, 8, 1280), float16] */
  } /* ty=fn (Tensor[(32, 8, 8, 1280), float16]) -> Tensor[(32, 8, 8, 1280), float16] */;
  %492 = %491(%458) /* ty=Tensor[(32, 8, 8, 1280), float16] */;
  %493 = fn (%p0112: Tensor[(32, 8, 8, 1280), float16] /* ty=Tensor[(32, 8, 8, 1280), float16] */, %p198: Tensor[(192, 1, 1, 1280), float16] /* ty=Tensor[(192, 1, 1, 1280), float16] */, %p298: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, %p395: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, Primitive=1) -> Tensor[(32, 8, 8, 192), float16] {
    %488 = nn.conv2d(%p0112, %p198, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 8, 8, 192), float16] */;
    %489 = multiply(%488, %p298) /* ty=Tensor[(32, 8, 8, 192), float16] */;
    %490 = add(%489, %p395) /* ty=Tensor[(32, 8, 8, 192), float16] */;
    nn.relu(%490) /* ty=Tensor[(32, 8, 8, 192), float16] */
  } /* ty=fn (Tensor[(32, 8, 8, 1280), float16], Tensor[(192, 1, 1, 1280), float16], Tensor[(192), float16], Tensor[(192), float16]) -> Tensor[(32, 8, 8, 192), float16] */;
  %494 = %461(%460, meta[relay.Constant][231] /* ty=Tensor[(384, 1, 3, 384), float16] */, meta[relay.Constant][232] /* ty=Tensor[(384), float16] */, meta[relay.Constant][233] /* ty=Tensor[(384), float16] */) /* ty=Tensor[(32, 8, 8, 384), float16] */;
  %495 = %465(%460, meta[relay.Constant][234] /* ty=Tensor[(384, 3, 1, 384), float16] */, meta[relay.Constant][235] /* ty=Tensor[(384), float16] */, meta[relay.Constant][236] /* ty=Tensor[(384), float16] */) /* ty=Tensor[(32, 8, 8, 384), float16] */;
  %496 = %479(%478, meta[relay.Constant][243] /* ty=Tensor[(384, 1, 3, 384), float16] */, meta[relay.Constant][244] /* ty=Tensor[(384), float16] */, meta[relay.Constant][245] /* ty=Tensor[(384), float16] */) /* ty=Tensor[(32, 8, 8, 384), float16] */;
  %497 = %483(%478, meta[relay.Constant][246] /* ty=Tensor[(384, 3, 1, 384), float16] */, meta[relay.Constant][247] /* ty=Tensor[(384), float16] */, meta[relay.Constant][248] /* ty=Tensor[(384), float16] */) /* ty=Tensor[(32, 8, 8, 384), float16] */;
  %498 = %487(%458, meta[relay.Constant][249] /* ty=Tensor[(320, 1, 1, 1280), float16] */, meta[relay.Constant][250] /* ty=Tensor[(320), float16] */, meta[relay.Constant][251] /* ty=Tensor[(320), float16] */) /* ty=Tensor[(32, 8, 8, 320), float16] */;
  %499 = %493(%492, meta[relay.Constant][252] /* ty=Tensor[(192, 1, 1, 1280), float16] */, meta[relay.Constant][253] /* ty=Tensor[(192), float16] */, meta[relay.Constant][254] /* ty=Tensor[(192), float16] */) /* ty=Tensor[(32, 8, 8, 192), float16] */;
  %500 = fn (%p06: Tensor[(32, 8, 8, 384), float16] /* ty=Tensor[(32, 8, 8, 384), float16] */, %p14: Tensor[(32, 8, 8, 384), float16] /* ty=Tensor[(32, 8, 8, 384), float16] */, %p24: Tensor[(32, 8, 8, 384), float16] /* ty=Tensor[(32, 8, 8, 384), float16] */, %p33: Tensor[(32, 8, 8, 384), float16] /* ty=Tensor[(32, 8, 8, 384), float16] */, %p41: Tensor[(32, 8, 8, 320), float16] /* ty=Tensor[(32, 8, 8, 320), float16] */, %p51: Tensor[(32, 8, 8, 192), float16] /* ty=Tensor[(32, 8, 8, 192), float16] */, Primitive=1) -> Tensor[(32, 8, 8, 2048), float16] {
    %16 = (%p06, %p14) /* ty=(Tensor[(32, 8, 8, 384), float16], Tensor[(32, 8, 8, 384), float16]) span=aten::cat_9:0:0 */;
    %17 = (%p24, %p33) /* ty=(Tensor[(32, 8, 8, 384), float16], Tensor[(32, 8, 8, 384), float16]) span=aten::cat_10:0:0 */;
    %18 = concatenate(%16, axis=3) /* ty=Tensor[(32, 8, 8, 768), float16] */;
    %19 = concatenate(%17, axis=3) /* ty=Tensor[(32, 8, 8, 768), float16] */;
    %20 = (%p41, %18, %19, %p51) /* ty=(Tensor[(32, 8, 8, 320), float16], Tensor[(32, 8, 8, 768), float16], Tensor[(32, 8, 8, 768), float16], Tensor[(32, 8, 8, 192), float16]) span=aten::cat_11:0:0 */;
    concatenate(%20, axis=3) /* ty=Tensor[(32, 8, 8, 2048), float16] */
  } /* ty=fn (Tensor[(32, 8, 8, 384), float16], Tensor[(32, 8, 8, 384), float16], Tensor[(32, 8, 8, 384), float16], Tensor[(32, 8, 8, 384), float16], Tensor[(32, 8, 8, 320), float16], Tensor[(32, 8, 8, 192), float16]) -> Tensor[(32, 8, 8, 2048), float16] */;
  %501 = %500(%494, %495, %496, %497, %498, %499) /* ty=Tensor[(32, 8, 8, 2048), float16] */;
  %502 = fn (%p05: Tensor[(32, 8, 8, 2048), float16] /* ty=Tensor[(32, 8, 8, 2048), float16] */, %p13: Tensor[(384, 1, 1, 2048), float16] /* ty=Tensor[(384, 1, 1, 2048), float16] */, %p23: Tensor[(384), float16] /* ty=Tensor[(384), float16] */, %p32: Tensor[(384), float16] /* ty=Tensor[(384), float16] */, Primitive=1) -> Tensor[(32, 8, 8, 384), float16] {
    %13 = nn.conv2d(%p05, %p13, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 8, 8, 384), float16] */;
    %14 = multiply(%13, %p23) /* ty=Tensor[(32, 8, 8, 384), float16] */;
    %15 = add(%14, %p32) /* ty=Tensor[(32, 8, 8, 384), float16] */;
    nn.relu(%15) /* ty=Tensor[(32, 8, 8, 384), float16] */
  } /* ty=fn (Tensor[(32, 8, 8, 2048), float16], Tensor[(384, 1, 1, 2048), float16], Tensor[(384), float16], Tensor[(384), float16]) -> Tensor[(32, 8, 8, 384), float16] */;
  %503 = %502(%501, meta[relay.Constant][255] /* ty=Tensor[(384, 1, 1, 2048), float16] */, meta[relay.Constant][256] /* ty=Tensor[(384), float16] */, meta[relay.Constant][257] /* ty=Tensor[(384), float16] */) /* ty=Tensor[(32, 8, 8, 384), float16] */;
  %504 = fn (%p04: Tensor[(32, 8, 8, 384), float16] /* ty=Tensor[(32, 8, 8, 384), float16] */, %p12: Tensor[(384, 1, 3, 384), float16] /* ty=Tensor[(384, 1, 3, 384), float16] */, %p22: Tensor[(384), float16] /* ty=Tensor[(384), float16] */, %p31: Tensor[(384), float16] /* ty=Tensor[(384), float16] */, Primitive=1) -> Tensor[(32, 8, 8, 384), float16] {
    %10 = nn.conv2d(%p04, %p12, padding=[0, 1, 0, 1], channels=384, kernel_size=[1, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 8, 8, 384), float16] */;
    %11 = multiply(%10, %p22) /* ty=Tensor[(32, 8, 8, 384), float16] */;
    %12 = add(%11, %p31) /* ty=Tensor[(32, 8, 8, 384), float16] */;
    nn.relu(%12) /* ty=Tensor[(32, 8, 8, 384), float16] */
  } /* ty=fn (Tensor[(32, 8, 8, 384), float16], Tensor[(384, 1, 3, 384), float16], Tensor[(384), float16], Tensor[(384), float16]) -> Tensor[(32, 8, 8, 384), float16] */;
  %508 = fn (%p0114: Tensor[(32, 8, 8, 384), float16] /* ty=Tensor[(32, 8, 8, 384), float16] */, %p199: Tensor[(384, 3, 1, 384), float16] /* ty=Tensor[(384, 3, 1, 384), float16] */, %p299: Tensor[(384), float16] /* ty=Tensor[(384), float16] */, %p396: Tensor[(384), float16] /* ty=Tensor[(384), float16] */, Primitive=1) -> Tensor[(32, 8, 8, 384), float16] {
    %505 = nn.conv2d(%p0114, %p199, padding=[1, 0, 1, 0], channels=384, kernel_size=[3, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 8, 8, 384), float16] */;
    %506 = multiply(%505, %p299) /* ty=Tensor[(32, 8, 8, 384), float16] */;
    %507 = add(%506, %p396) /* ty=Tensor[(32, 8, 8, 384), float16] */;
    nn.relu(%507) /* ty=Tensor[(32, 8, 8, 384), float16] */
  } /* ty=fn (Tensor[(32, 8, 8, 384), float16], Tensor[(384, 3, 1, 384), float16], Tensor[(384), float16], Tensor[(384), float16]) -> Tensor[(32, 8, 8, 384), float16] */;
  %518 = fn (%p0117: Tensor[(32, 8, 8, 2048), float16] /* ty=Tensor[(32, 8, 8, 2048), float16] */, %p1102: Tensor[(448, 1, 1, 2048), float16] /* ty=Tensor[(448, 1, 1, 2048), float16] */, %p2102: Tensor[(448), float16] /* ty=Tensor[(448), float16] */, %p399: Tensor[(448), float16] /* ty=Tensor[(448), float16] */, Primitive=1) -> Tensor[(32, 8, 8, 448), float16] {
    %515 = nn.conv2d(%p0117, %p1102, padding=[0, 0, 0, 0], channels=448, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 8, 8, 448), float16] */;
    %516 = multiply(%515, %p2102) /* ty=Tensor[(32, 8, 8, 448), float16] */;
    %517 = add(%516, %p399) /* ty=Tensor[(32, 8, 8, 448), float16] */;
    nn.relu(%517) /* ty=Tensor[(32, 8, 8, 448), float16] */
  } /* ty=fn (Tensor[(32, 8, 8, 2048), float16], Tensor[(448, 1, 1, 2048), float16], Tensor[(448), float16], Tensor[(448), float16]) -> Tensor[(32, 8, 8, 448), float16] */;
  %519 = %518(%501, meta[relay.Constant][264] /* ty=Tensor[(448, 1, 1, 2048), float16] */, meta[relay.Constant][265] /* ty=Tensor[(448), float16] */, meta[relay.Constant][266] /* ty=Tensor[(448), float16] */) /* ty=Tensor[(32, 8, 8, 448), float16] */;
  %520 = fn (%p0116: Tensor[(32, 8, 8, 448), float16] /* ty=Tensor[(32, 8, 8, 448), float16] */, %p1101: Tensor[(384, 3, 3, 448), float16] /* ty=Tensor[(384, 3, 3, 448), float16] */, %p2101: Tensor[(384), float16] /* ty=Tensor[(384), float16] */, %p398: Tensor[(384), float16] /* ty=Tensor[(384), float16] */, Primitive=1) -> Tensor[(32, 8, 8, 384), float16] {
    %512 = nn.conv2d(%p0116, %p1101, padding=[1, 1, 1, 1], channels=384, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 8, 8, 384), float16] */;
    %513 = multiply(%512, %p2101) /* ty=Tensor[(32, 8, 8, 384), float16] */;
    %514 = add(%513, %p398) /* ty=Tensor[(32, 8, 8, 384), float16] */;
    nn.relu(%514) /* ty=Tensor[(32, 8, 8, 384), float16] */
  } /* ty=fn (Tensor[(32, 8, 8, 448), float16], Tensor[(384, 3, 3, 448), float16], Tensor[(384), float16], Tensor[(384), float16]) -> Tensor[(32, 8, 8, 384), float16] */;
  %521 = %520(%519, meta[relay.Constant][267] /* ty=Tensor[(384, 3, 3, 448), float16] */, meta[relay.Constant][268] /* ty=Tensor[(384), float16] */, meta[relay.Constant][269] /* ty=Tensor[(384), float16] */) /* ty=Tensor[(32, 8, 8, 384), float16] */;
  %522 = fn (%p0115: Tensor[(32, 8, 8, 384), float16] /* ty=Tensor[(32, 8, 8, 384), float16] */, %p1100: Tensor[(384, 1, 3, 384), float16] /* ty=Tensor[(384, 1, 3, 384), float16] */, %p2100: Tensor[(384), float16] /* ty=Tensor[(384), float16] */, %p397: Tensor[(384), float16] /* ty=Tensor[(384), float16] */, Primitive=1) -> Tensor[(32, 8, 8, 384), float16] {
    %509 = nn.conv2d(%p0115, %p1100, padding=[0, 1, 0, 1], channels=384, kernel_size=[1, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 8, 8, 384), float16] */;
    %510 = multiply(%509, %p2100) /* ty=Tensor[(32, 8, 8, 384), float16] */;
    %511 = add(%510, %p397) /* ty=Tensor[(32, 8, 8, 384), float16] */;
    nn.relu(%511) /* ty=Tensor[(32, 8, 8, 384), float16] */
  } /* ty=fn (Tensor[(32, 8, 8, 384), float16], Tensor[(384, 1, 3, 384), float16], Tensor[(384), float16], Tensor[(384), float16]) -> Tensor[(32, 8, 8, 384), float16] */;
  %526 = fn (%p0118: Tensor[(32, 8, 8, 384), float16] /* ty=Tensor[(32, 8, 8, 384), float16] */, %p1103: Tensor[(384, 3, 1, 384), float16] /* ty=Tensor[(384, 3, 1, 384), float16] */, %p2103: Tensor[(384), float16] /* ty=Tensor[(384), float16] */, %p3100: Tensor[(384), float16] /* ty=Tensor[(384), float16] */, Primitive=1) -> Tensor[(32, 8, 8, 384), float16] {
    %523 = nn.conv2d(%p0118, %p1103, padding=[1, 0, 1, 0], channels=384, kernel_size=[3, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 8, 8, 384), float16] */;
    %524 = multiply(%523, %p2103) /* ty=Tensor[(32, 8, 8, 384), float16] */;
    %525 = add(%524, %p3100) /* ty=Tensor[(32, 8, 8, 384), float16] */;
    nn.relu(%525) /* ty=Tensor[(32, 8, 8, 384), float16] */
  } /* ty=fn (Tensor[(32, 8, 8, 384), float16], Tensor[(384, 3, 1, 384), float16], Tensor[(384), float16], Tensor[(384), float16]) -> Tensor[(32, 8, 8, 384), float16] */;
  %530 = fn (%p0119: Tensor[(32, 8, 8, 2048), float16] /* ty=Tensor[(32, 8, 8, 2048), float16] */, %p1104: Tensor[(320, 1, 1, 2048), float16] /* ty=Tensor[(320, 1, 1, 2048), float16] */, %p2104: Tensor[(320), float16] /* ty=Tensor[(320), float16] */, %p3101: Tensor[(320), float16] /* ty=Tensor[(320), float16] */, Primitive=1) -> Tensor[(32, 8, 8, 320), float16] {
    %527 = nn.conv2d(%p0119, %p1104, padding=[0, 0, 0, 0], channels=320, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 8, 8, 320), float16] */;
    %528 = multiply(%527, %p2104) /* ty=Tensor[(32, 8, 8, 320), float16] */;
    %529 = add(%528, %p3101) /* ty=Tensor[(32, 8, 8, 320), float16] */;
    nn.relu(%529) /* ty=Tensor[(32, 8, 8, 320), float16] */
  } /* ty=fn (Tensor[(32, 8, 8, 2048), float16], Tensor[(320, 1, 1, 2048), float16], Tensor[(320), float16], Tensor[(320), float16]) -> Tensor[(32, 8, 8, 320), float16] */;
  %534 = fn (%p0121: Tensor[(32, 8, 8, 2048), float16] /* ty=Tensor[(32, 8, 8, 2048), float16] */, Primitive=1) -> Tensor[(32, 8, 8, 2048), float16] {
    nn.avg_pool2d(%p0121, pool_size=[3, 3], padding=[1, 1, 1, 1], layout="NHWC", out_layout="NHWC", count_include_pad=True) /* ty=Tensor[(32, 8, 8, 2048), float16] */
  } /* ty=fn (Tensor[(32, 8, 8, 2048), float16]) -> Tensor[(32, 8, 8, 2048), float16] */;
  %535 = %534(%501) /* ty=Tensor[(32, 8, 8, 2048), float16] */;
  %536 = fn (%p0120: Tensor[(32, 8, 8, 2048), float16] /* ty=Tensor[(32, 8, 8, 2048), float16] */, %p1105: Tensor[(192, 1, 1, 2048), float16] /* ty=Tensor[(192, 1, 1, 2048), float16] */, %p2105: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, %p3102: Tensor[(192), float16] /* ty=Tensor[(192), float16] */, Primitive=1) -> Tensor[(32, 8, 8, 192), float16] {
    %531 = nn.conv2d(%p0120, %p1105, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(32, 8, 8, 192), float16] */;
    %532 = multiply(%531, %p2105) /* ty=Tensor[(32, 8, 8, 192), float16] */;
    %533 = add(%532, %p3102) /* ty=Tensor[(32, 8, 8, 192), float16] */;
    nn.relu(%533) /* ty=Tensor[(32, 8, 8, 192), float16] */
  } /* ty=fn (Tensor[(32, 8, 8, 2048), float16], Tensor[(192, 1, 1, 2048), float16], Tensor[(192), float16], Tensor[(192), float16]) -> Tensor[(32, 8, 8, 192), float16] */;
  %537 = %504(%503, meta[relay.Constant][258] /* ty=Tensor[(384, 1, 3, 384), float16] */, meta[relay.Constant][259] /* ty=Tensor[(384), float16] */, meta[relay.Constant][260] /* ty=Tensor[(384), float16] */) /* ty=Tensor[(32, 8, 8, 384), float16] */;
  %538 = %508(%503, meta[relay.Constant][261] /* ty=Tensor[(384, 3, 1, 384), float16] */, meta[relay.Constant][262] /* ty=Tensor[(384), float16] */, meta[relay.Constant][263] /* ty=Tensor[(384), float16] */) /* ty=Tensor[(32, 8, 8, 384), float16] */;
  %539 = %522(%521, meta[relay.Constant][270] /* ty=Tensor[(384, 1, 3, 384), float16] */, meta[relay.Constant][271] /* ty=Tensor[(384), float16] */, meta[relay.Constant][272] /* ty=Tensor[(384), float16] */) /* ty=Tensor[(32, 8, 8, 384), float16] */;
  %540 = %526(%521, meta[relay.Constant][273] /* ty=Tensor[(384, 3, 1, 384), float16] */, meta[relay.Constant][274] /* ty=Tensor[(384), float16] */, meta[relay.Constant][275] /* ty=Tensor[(384), float16] */) /* ty=Tensor[(32, 8, 8, 384), float16] */;
  %541 = %530(%501, meta[relay.Constant][276] /* ty=Tensor[(320, 1, 1, 2048), float16] */, meta[relay.Constant][277] /* ty=Tensor[(320), float16] */, meta[relay.Constant][278] /* ty=Tensor[(320), float16] */) /* ty=Tensor[(32, 8, 8, 320), float16] */;
  %542 = %536(%535, meta[relay.Constant][279] /* ty=Tensor[(192, 1, 1, 2048), float16] */, meta[relay.Constant][280] /* ty=Tensor[(192), float16] */, meta[relay.Constant][281] /* ty=Tensor[(192), float16] */) /* ty=Tensor[(32, 8, 8, 192), float16] */;
  %543 = fn (%p03: Tensor[(32, 8, 8, 384), float16] /* ty=Tensor[(32, 8, 8, 384), float16] */, %p11: Tensor[(32, 8, 8, 384), float16] /* ty=Tensor[(32, 8, 8, 384), float16] */, %p21: Tensor[(32, 8, 8, 384), float16] /* ty=Tensor[(32, 8, 8, 384), float16] */, %p3: Tensor[(32, 8, 8, 384), float16] /* ty=Tensor[(32, 8, 8, 384), float16] */, %p4: Tensor[(32, 8, 8, 320), float16] /* ty=Tensor[(32, 8, 8, 320), float16] */, %p5: Tensor[(32, 8, 8, 192), float16] /* ty=Tensor[(32, 8, 8, 192), float16] */, Primitive=1) -> Tensor[(32, 8, 8, 2048), float32] {
    %4 = (%p03, %p11) /* ty=(Tensor[(32, 8, 8, 384), float16], Tensor[(32, 8, 8, 384), float16]) span=aten::cat_12:0:0 */;
    %5 = (%p21, %p3) /* ty=(Tensor[(32, 8, 8, 384), float16], Tensor[(32, 8, 8, 384), float16]) span=aten::cat_13:0:0 */;
    %6 = concatenate(%4, axis=3) /* ty=Tensor[(32, 8, 8, 768), float16] */;
    %7 = concatenate(%5, axis=3) /* ty=Tensor[(32, 8, 8, 768), float16] */;
    %8 = (%p4, %6, %7, %p5) /* ty=(Tensor[(32, 8, 8, 320), float16], Tensor[(32, 8, 8, 768), float16], Tensor[(32, 8, 8, 768), float16], Tensor[(32, 8, 8, 192), float16]) span=aten::cat_14:0:0 */;
    %9 = concatenate(%8, axis=3) /* ty=Tensor[(32, 8, 8, 2048), float16] */;
    cast(%9, dtype="float32") /* ty=Tensor[(32, 8, 8, 2048), float32] */
  } /* ty=fn (Tensor[(32, 8, 8, 384), float16], Tensor[(32, 8, 8, 384), float16], Tensor[(32, 8, 8, 384), float16], Tensor[(32, 8, 8, 384), float16], Tensor[(32, 8, 8, 320), float16], Tensor[(32, 8, 8, 192), float16]) -> Tensor[(32, 8, 8, 2048), float32] */;
  %544 = %543(%537, %538, %539, %540, %541, %542) /* ty=Tensor[(32, 8, 8, 2048), float32] */;
  %545 = fn (%p02: Tensor[(32, 8, 8, 2048), float32] /* ty=Tensor[(32, 8, 8, 2048), float32] */, Primitive=1) -> Tensor[(32, 1, 1, 2048), float32] {
    nn.adaptive_avg_pool2d(%p02, output_size=[1, 1], layout="NHWC") /* ty=Tensor[(32, 1, 1, 2048), float32] */
  } /* ty=fn (Tensor[(32, 8, 8, 2048), float32]) -> Tensor[(32, 1, 1, 2048), float32] */;
  %546 = %545(%544) /* ty=Tensor[(32, 1, 1, 2048), float32] */;
  %547 = fn (%p01: Tensor[(32, 1, 1, 2048), float32] /* ty=Tensor[(32, 1, 1, 2048), float32] */, Primitive=1) -> Tensor[(32, 2048), float16] {
    %1 = layout_transform(%p01, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(32, 2048, 1, 1), float32] */;
    %2 = reshape(%1, newshape=[0, -1, 1, 1]) /* ty=Tensor[(32, 2048, 1, 1), float32] */;
    %3 = squeeze(%2, axis=[2, 3]) /* ty=Tensor[(32, 2048), float32] */;
    cast(%3, dtype="float16") /* ty=Tensor[(32, 2048), float16] */
  } /* ty=fn (Tensor[(32, 1, 1, 2048), float32]) -> Tensor[(32, 2048), float16] */;
  %548 = %547(%546) /* ty=Tensor[(32, 2048), float16] */;
  %549 = fn (%p0: Tensor[(32, 2048), float16] /* ty=Tensor[(32, 2048), float16] */, %p1: Tensor[(1000, 2048), float16] /* ty=Tensor[(1000, 2048), float16] */, %p2: Tensor[(1, 1000), float16] /* ty=Tensor[(1, 1000), float16] */, Primitive=1) -> Tensor[(32, 1000), float16] {
    %0 = nn.dense(%p0, %p1, units=None, out_dtype="float16") /* ty=Tensor[(32, 1000), float16] */;
    add(%0, %p2) /* ty=Tensor[(32, 1000), float16] */
  } /* ty=fn (Tensor[(32, 2048), float16], Tensor[(1000, 2048), float16], Tensor[(1, 1000), float16]) -> Tensor[(32, 1000), float16] */;
  %549(%548, meta[relay.Constant][282] /* ty=Tensor[(1000, 2048), float16] */, meta[relay.Constant][283] /* ty=Tensor[(1, 1000), float16] */) /* ty=Tensor[(32, 1000), float16] */
}


